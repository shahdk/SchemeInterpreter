Chez Scheme Transcript [Thu May 16 12:55:34 2013]
> (rep)
>>> (load "main.ss")
|(apply-proc (primitive load) ("main.ss") ())
|(apply-primitive-proc load ("main.ss") ())
| (apply-proc (primitive load) ("environment.ss") ())
| (apply-primitive-proc load ("environment.ss") ())
| ()
| (apply-proc (primitive load) ("parser.ss") ())
| (apply-primitive-proc load ("parser.ss") ())
| ()
| (apply-proc (primitive load) ("interpreter.ss") ())
| (apply-primitive-proc load ("interpreter.ss") ())
| |(apply-proc
     (primitive list)
     (+ - * / add1 sub1 max display read zero? not = < > <= >= close-port
      newline cons list null? eq? equal? eof-object? write atom? length
      list->vector list? open-input-file pair? procedure? vector->list vector
      boolean? make-vector vector-ref vector? number? string? symbol? set-car!
      set-cdr! vector-set! car cdr caar cadr cdar cddr caaar load caadr cadar
      cdaar cdddr cddar cdadr caddr map apply assq assv append)
     ())
| |(apply-primitive-proc
     list
     (+ - * / add1 sub1 max display read zero? not = < > <= >= close-port
      newline cons list null? eq? equal? eof-object? write atom? length
      list->vector list? open-input-file pair? procedure? vector->list vector
      boolean? make-vector vector-ref vector? number? string? symbol? set-car!
      set-cdr! vector-set! car cdr caar cadr cdar cddr caaar load caadr cadar
      cdaar cdddr cddar cdadr caddr map apply assq assv append)
     ())
| |(+ - * / add1 sub1 max display read zero? not = < > <= >= close-port newline
    cons list null? eq? equal? eof-object? write atom? length list->vector list?
    open-input-file pair? procedure? vector->list vector boolean? make-vector
    vector-ref vector? number? string? symbol? set-car! set-cdr! vector-set! car
    cdr caar cadr cdar cddr caaar load caadr cadar cdaar cdddr cddar cdadr caddr
    map apply assq assv append)
| |(apply-proc
     (primitive map)
     ((closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
       (+ - * / add1 sub1 max display read zero? not = < > <= >= close-port
        newline cons list null? eq? equal? eof-object? write atom? length
        list->vector list? open-input-file pair? procedure? vector->list vector
        boolean? make-vector vector-ref vector? number? string? symbol? set-car!
        set-cdr! vector-set! car cdr caar cadr cdar cddr caaar load caadr cadar
        cdaar cdddr cddar cdadr caddr map apply assq assv append))
     ())
| |(apply-primitive-proc
     map
     ((closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
       (+ - * / add1 sub1 max display read zero? not = < > <= >= close-port
        newline cons list null? eq? equal? eof-object? write atom? length
        list->vector list? open-input-file pair? procedure? vector->list vector
        boolean? make-vector vector-ref vector? number? string? symbol? set-car!
        set-cdr! vector-set! car cdr caar cadr cdar cddr caaar load caadr cadar
        cdaar cdddr cddar cdadr caddr map apply assq assv append))
     ())
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (append)
      ())
| | |(apply-proc (primitive list) (primitive append) (((name) . #(append))))
| | |(apply-primitive-proc list (primitive append) (((name) . #(append))))
| | |(primitive append)
| | |(apply-proc (primitive list) ((primitive append)) (((name) . #(append))))
| | |(apply-primitive-proc list ((primitive append)) (((name) . #(append))))
| | |((primitive append))
| | (apply-proc
      (primitive cons)
      (append ((primitive append)))
      (((name) . #(append))))
| | (apply-primitive-proc
      cons
      (append ((primitive append)))
      (((name) . #(append))))
| | (append (primitive append))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (assv)
      ())
| | |(apply-proc (primitive list) (primitive assv) (((name) . #(assv))))
| | |(apply-primitive-proc list (primitive assv) (((name) . #(assv))))
| | |(primitive assv)
| | |(apply-proc (primitive list) ((primitive assv)) (((name) . #(assv))))
| | |(apply-primitive-proc list ((primitive assv)) (((name) . #(assv))))
| | |((primitive assv))
| | (apply-proc (primitive cons) (assv ((primitive assv))) (((name) . #(assv))))
| | (apply-primitive-proc cons (assv ((primitive assv))) (((name) . #(assv))))
| | (assv (primitive assv))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (assq)
      ())
| | |(apply-proc (primitive list) (primitive assq) (((name) . #(assq))))
| | |(apply-primitive-proc list (primitive assq) (((name) . #(assq))))
| | |(primitive assq)
| | |(apply-proc (primitive list) ((primitive assq)) (((name) . #(assq))))
| | |(apply-primitive-proc list ((primitive assq)) (((name) . #(assq))))
| | |((primitive assq))
| | (apply-proc (primitive cons) (assq ((primitive assq))) (((name) . #(assq))))
| | (apply-primitive-proc cons (assq ((primitive assq))) (((name) . #(assq))))
| | (assq (primitive assq))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (apply)
      ())
| | |(apply-proc (primitive list) (primitive apply) (((name) . #(apply))))
| | |(apply-primitive-proc list (primitive apply) (((name) . #(apply))))
| | |(primitive apply)
| | |(apply-proc (primitive list) ((primitive apply)) (((name) . #(apply))))
| | |(apply-primitive-proc list ((primitive apply)) (((name) . #(apply))))
| | |((primitive apply))
| | (apply-proc
      (primitive cons)
      (apply ((primitive apply)))
      (((name) . #(apply))))
| | (apply-primitive-proc
      cons
      (apply ((primitive apply)))
      (((name) . #(apply))))
| | (apply (primitive apply))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (map)
      ())
| | |(apply-proc (primitive list) (primitive map) (((name) . #(map))))
| | |(apply-primitive-proc list (primitive map) (((name) . #(map))))
| | |(primitive map)
| | |(apply-proc (primitive list) ((primitive map)) (((name) . #(map))))
| | |(apply-primitive-proc list ((primitive map)) (((name) . #(map))))
| | |((primitive map))
| | (apply-proc (primitive cons) (map ((primitive map))) (((name) . #(map))))
| | (apply-primitive-proc cons (map ((primitive map))) (((name) . #(map))))
| | (map (primitive map))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (caddr)
      ())
| | |(apply-proc (primitive list) (primitive caddr) (((name) . #(caddr))))
| | |(apply-primitive-proc list (primitive caddr) (((name) . #(caddr))))
| | |(primitive caddr)
| | |(apply-proc (primitive list) ((primitive caddr)) (((name) . #(caddr))))
| | |(apply-primitive-proc list ((primitive caddr)) (((name) . #(caddr))))
| | |((primitive caddr))
| | (apply-proc
      (primitive cons)
      (caddr ((primitive caddr)))
      (((name) . #(caddr))))
| | (apply-primitive-proc
      cons
      (caddr ((primitive caddr)))
      (((name) . #(caddr))))
| | (caddr (primitive caddr))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cdadr)
      ())
| | |(apply-proc (primitive list) (primitive cdadr) (((name) . #(cdadr))))
| | |(apply-primitive-proc list (primitive cdadr) (((name) . #(cdadr))))
| | |(primitive cdadr)
| | |(apply-proc (primitive list) ((primitive cdadr)) (((name) . #(cdadr))))
| | |(apply-primitive-proc list ((primitive cdadr)) (((name) . #(cdadr))))
| | |((primitive cdadr))
| | (apply-proc
      (primitive cons)
      (cdadr ((primitive cdadr)))
      (((name) . #(cdadr))))
| | (apply-primitive-proc
      cons
      (cdadr ((primitive cdadr)))
      (((name) . #(cdadr))))
| | (cdadr (primitive cdadr))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cddar)
      ())
| | |(apply-proc (primitive list) (primitive cddar) (((name) . #(cddar))))
| | |(apply-primitive-proc list (primitive cddar) (((name) . #(cddar))))
| | |(primitive cddar)
| | |(apply-proc (primitive list) ((primitive cddar)) (((name) . #(cddar))))
| | |(apply-primitive-proc list ((primitive cddar)) (((name) . #(cddar))))
| | |((primitive cddar))
| | (apply-proc
      (primitive cons)
      (cddar ((primitive cddar)))
      (((name) . #(cddar))))
| | (apply-primitive-proc
      cons
      (cddar ((primitive cddar)))
      (((name) . #(cddar))))
| | (cddar (primitive cddar))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cdddr)
      ())
| | |(apply-proc (primitive list) (primitive cdddr) (((name) . #(cdddr))))
| | |(apply-primitive-proc list (primitive cdddr) (((name) . #(cdddr))))
| | |(primitive cdddr)
| | |(apply-proc (primitive list) ((primitive cdddr)) (((name) . #(cdddr))))
| | |(apply-primitive-proc list ((primitive cdddr)) (((name) . #(cdddr))))
| | |((primitive cdddr))
| | (apply-proc
      (primitive cons)
      (cdddr ((primitive cdddr)))
      (((name) . #(cdddr))))
| | (apply-primitive-proc
      cons
      (cdddr ((primitive cdddr)))
      (((name) . #(cdddr))))
| | (cdddr (primitive cdddr))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cdaar)
      ())
| | |(apply-proc (primitive list) (primitive cdaar) (((name) . #(cdaar))))
| | |(apply-primitive-proc list (primitive cdaar) (((name) . #(cdaar))))
| | |(primitive cdaar)
| | |(apply-proc (primitive list) ((primitive cdaar)) (((name) . #(cdaar))))
| | |(apply-primitive-proc list ((primitive cdaar)) (((name) . #(cdaar))))
| | |((primitive cdaar))
| | (apply-proc
      (primitive cons)
      (cdaar ((primitive cdaar)))
      (((name) . #(cdaar))))
| | (apply-primitive-proc
      cons
      (cdaar ((primitive cdaar)))
      (((name) . #(cdaar))))
| | (cdaar (primitive cdaar))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cadar)
      ())
| | |(apply-proc (primitive list) (primitive cadar) (((name) . #(cadar))))
| | |(apply-primitive-proc list (primitive cadar) (((name) . #(cadar))))
| | |(primitive cadar)
| | |(apply-proc (primitive list) ((primitive cadar)) (((name) . #(cadar))))
| | |(apply-primitive-proc list ((primitive cadar)) (((name) . #(cadar))))
| | |((primitive cadar))
| | (apply-proc
      (primitive cons)
      (cadar ((primitive cadar)))
      (((name) . #(cadar))))
| | (apply-primitive-proc
      cons
      (cadar ((primitive cadar)))
      (((name) . #(cadar))))
| | (cadar (primitive cadar))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (caadr)
      ())
| | |(apply-proc (primitive list) (primitive caadr) (((name) . #(caadr))))
| | |(apply-primitive-proc list (primitive caadr) (((name) . #(caadr))))
| | |(primitive caadr)
| | |(apply-proc (primitive list) ((primitive caadr)) (((name) . #(caadr))))
| | |(apply-primitive-proc list ((primitive caadr)) (((name) . #(caadr))))
| | |((primitive caadr))
| | (apply-proc
      (primitive cons)
      (caadr ((primitive caadr)))
      (((name) . #(caadr))))
| | (apply-primitive-proc
      cons
      (caadr ((primitive caadr)))
      (((name) . #(caadr))))
| | (caadr (primitive caadr))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (load)
      ())
| | |(apply-proc (primitive list) (primitive load) (((name) . #(load))))
| | |(apply-primitive-proc list (primitive load) (((name) . #(load))))
| | |(primitive load)
| | |(apply-proc (primitive list) ((primitive load)) (((name) . #(load))))
| | |(apply-primitive-proc list ((primitive load)) (((name) . #(load))))
| | |((primitive load))
| | (apply-proc (primitive cons) (load ((primitive load))) (((name) . #(load))))
| | (apply-primitive-proc cons (load ((primitive load))) (((name) . #(load))))
| | (load (primitive load))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (caaar)
      ())
| | |(apply-proc (primitive list) (primitive caaar) (((name) . #(caaar))))
| | |(apply-primitive-proc list (primitive caaar) (((name) . #(caaar))))
| | |(primitive caaar)
| | |(apply-proc (primitive list) ((primitive caaar)) (((name) . #(caaar))))
| | |(apply-primitive-proc list ((primitive caaar)) (((name) . #(caaar))))
| | |((primitive caaar))
| | (apply-proc
      (primitive cons)
      (caaar ((primitive caaar)))
      (((name) . #(caaar))))
| | (apply-primitive-proc
      cons
      (caaar ((primitive caaar)))
      (((name) . #(caaar))))
| | (caaar (primitive caaar))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cddr)
      ())
| | |(apply-proc (primitive list) (primitive cddr) (((name) . #(cddr))))
| | |(apply-primitive-proc list (primitive cddr) (((name) . #(cddr))))
| | |(primitive cddr)
| | |(apply-proc (primitive list) ((primitive cddr)) (((name) . #(cddr))))
| | |(apply-primitive-proc list ((primitive cddr)) (((name) . #(cddr))))
| | |((primitive cddr))
| | (apply-proc (primitive cons) (cddr ((primitive cddr))) (((name) . #(cddr))))
| | (apply-primitive-proc cons (cddr ((primitive cddr))) (((name) . #(cddr))))
| | (cddr (primitive cddr))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cdar)
      ())
| | |(apply-proc (primitive list) (primitive cdar) (((name) . #(cdar))))
| | |(apply-primitive-proc list (primitive cdar) (((name) . #(cdar))))
| | |(primitive cdar)
| | |(apply-proc (primitive list) ((primitive cdar)) (((name) . #(cdar))))
| | |(apply-primitive-proc list ((primitive cdar)) (((name) . #(cdar))))
| | |((primitive cdar))
| | (apply-proc (primitive cons) (cdar ((primitive cdar))) (((name) . #(cdar))))
| | (apply-primitive-proc cons (cdar ((primitive cdar))) (((name) . #(cdar))))
| | (cdar (primitive cdar))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cadr)
      ())
| | |(apply-proc (primitive list) (primitive cadr) (((name) . #(cadr))))
| | |(apply-primitive-proc list (primitive cadr) (((name) . #(cadr))))
| | |(primitive cadr)
| | |(apply-proc (primitive list) ((primitive cadr)) (((name) . #(cadr))))
| | |(apply-primitive-proc list ((primitive cadr)) (((name) . #(cadr))))
| | |((primitive cadr))
| | (apply-proc (primitive cons) (cadr ((primitive cadr))) (((name) . #(cadr))))
| | (apply-primitive-proc cons (cadr ((primitive cadr))) (((name) . #(cadr))))
| | (cadr (primitive cadr))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (caar)
      ())
| | |(apply-proc (primitive list) (primitive caar) (((name) . #(caar))))
| | |(apply-primitive-proc list (primitive caar) (((name) . #(caar))))
| | |(primitive caar)
| | |(apply-proc (primitive list) ((primitive caar)) (((name) . #(caar))))
| | |(apply-primitive-proc list ((primitive caar)) (((name) . #(caar))))
| | |((primitive caar))
| | (apply-proc (primitive cons) (caar ((primitive caar))) (((name) . #(caar))))
| | (apply-primitive-proc cons (caar ((primitive caar))) (((name) . #(caar))))
| | (caar (primitive caar))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cdr)
      ())
| | |(apply-proc (primitive list) (primitive cdr) (((name) . #(cdr))))
| | |(apply-primitive-proc list (primitive cdr) (((name) . #(cdr))))
| | |(primitive cdr)
| | |(apply-proc (primitive list) ((primitive cdr)) (((name) . #(cdr))))
| | |(apply-primitive-proc list ((primitive cdr)) (((name) . #(cdr))))
| | |((primitive cdr))
| | (apply-proc (primitive cons) (cdr ((primitive cdr))) (((name) . #(cdr))))
| | (apply-primitive-proc cons (cdr ((primitive cdr))) (((name) . #(cdr))))
| | (cdr (primitive cdr))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (car)
      ())
| | |(apply-proc (primitive list) (primitive car) (((name) . #(car))))
| | |(apply-primitive-proc list (primitive car) (((name) . #(car))))
| | |(primitive car)
| | |(apply-proc (primitive list) ((primitive car)) (((name) . #(car))))
| | |(apply-primitive-proc list ((primitive car)) (((name) . #(car))))
| | |((primitive car))
| | (apply-proc (primitive cons) (car ((primitive car))) (((name) . #(car))))
| | (apply-primitive-proc cons (car ((primitive car))) (((name) . #(car))))
| | (car (primitive car))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (vector-set!)
      ())
| | |(apply-proc
       (primitive list)
       (primitive vector-set!)
       (((name) . #(vector-set!))))
| | |(apply-primitive-proc
       list
       (primitive vector-set!)
       (((name) . #(vector-set!))))
| | |(primitive vector-set!)
| | |(apply-proc
       (primitive list)
       ((primitive vector-set!))
       (((name) . #(vector-set!))))
| | |(apply-primitive-proc
       list
       ((primitive vector-set!))
       (((name) . #(vector-set!))))
| | |((primitive vector-set!))
| | (apply-proc
      (primitive cons)
      (vector-set! ((primitive vector-set!)))
      (((name) . #(vector-set!))))
| | (apply-primitive-proc
      cons
      (vector-set! ((primitive vector-set!)))
      (((name) . #(vector-set!))))
| | (vector-set! (primitive vector-set!))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (set-cdr!)
      ())
| | |(apply-proc (primitive list) (primitive set-cdr!) (((name) . #(set-cdr!))))
| | |(apply-primitive-proc list (primitive set-cdr!) (((name) . #(set-cdr!))))
| | |(primitive set-cdr!)
| | |(apply-proc
       (primitive list)
       ((primitive set-cdr!))
       (((name) . #(set-cdr!))))
| | |(apply-primitive-proc list ((primitive set-cdr!)) (((name) . #(set-cdr!))))
| | |((primitive set-cdr!))
| | (apply-proc
      (primitive cons)
      (set-cdr! ((primitive set-cdr!)))
      (((name) . #(set-cdr!))))
| | (apply-primitive-proc
      cons
      (set-cdr! ((primitive set-cdr!)))
      (((name) . #(set-cdr!))))
| | (set-cdr! (primitive set-cdr!))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (set-car!)
      ())
| | |(apply-proc (primitive list) (primitive set-car!) (((name) . #(set-car!))))
| | |(apply-primitive-proc list (primitive set-car!) (((name) . #(set-car!))))
| | |(primitive set-car!)
| | |(apply-proc
       (primitive list)
       ((primitive set-car!))
       (((name) . #(set-car!))))
| | |(apply-primitive-proc list ((primitive set-car!)) (((name) . #(set-car!))))
| | |((primitive set-car!))
| | (apply-proc
      (primitive cons)
      (set-car! ((primitive set-car!)))
      (((name) . #(set-car!))))
| | (apply-primitive-proc
      cons
      (set-car! ((primitive set-car!)))
      (((name) . #(set-car!))))
| | (set-car! (primitive set-car!))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (symbol?)
      ())
| | |(apply-proc (primitive list) (primitive symbol?) (((name) . #(symbol?))))
| | |(apply-primitive-proc list (primitive symbol?) (((name) . #(symbol?))))
| | |(primitive symbol?)
| | |(apply-proc (primitive list) ((primitive symbol?)) (((name) . #(symbol?))))
| | |(apply-primitive-proc list ((primitive symbol?)) (((name) . #(symbol?))))
| | |((primitive symbol?))
| | (apply-proc
      (primitive cons)
      (symbol? ((primitive symbol?)))
      (((name) . #(symbol?))))
| | (apply-primitive-proc
      cons
      (symbol? ((primitive symbol?)))
      (((name) . #(symbol?))))
| | (symbol? (primitive symbol?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (string?)
      ())
| | |(apply-proc (primitive list) (primitive string?) (((name) . #(string?))))
| | |(apply-primitive-proc list (primitive string?) (((name) . #(string?))))
| | |(primitive string?)
| | |(apply-proc (primitive list) ((primitive string?)) (((name) . #(string?))))
| | |(apply-primitive-proc list ((primitive string?)) (((name) . #(string?))))
| | |((primitive string?))
| | (apply-proc
      (primitive cons)
      (string? ((primitive string?)))
      (((name) . #(string?))))
| | (apply-primitive-proc
      cons
      (string? ((primitive string?)))
      (((name) . #(string?))))
| | (string? (primitive string?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (number?)
      ())
| | |(apply-proc (primitive list) (primitive number?) (((name) . #(number?))))
| | |(apply-primitive-proc list (primitive number?) (((name) . #(number?))))
| | |(primitive number?)
| | |(apply-proc (primitive list) ((primitive number?)) (((name) . #(number?))))
| | |(apply-primitive-proc list ((primitive number?)) (((name) . #(number?))))
| | |((primitive number?))
| | (apply-proc
      (primitive cons)
      (number? ((primitive number?)))
      (((name) . #(number?))))
| | (apply-primitive-proc
      cons
      (number? ((primitive number?)))
      (((name) . #(number?))))
| | (number? (primitive number?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (vector?)
      ())
| | |(apply-proc (primitive list) (primitive vector?) (((name) . #(vector?))))
| | |(apply-primitive-proc list (primitive vector?) (((name) . #(vector?))))
| | |(primitive vector?)
| | |(apply-proc (primitive list) ((primitive vector?)) (((name) . #(vector?))))
| | |(apply-primitive-proc list ((primitive vector?)) (((name) . #(vector?))))
| | |((primitive vector?))
| | (apply-proc
      (primitive cons)
      (vector? ((primitive vector?)))
      (((name) . #(vector?))))
| | (apply-primitive-proc
      cons
      (vector? ((primitive vector?)))
      (((name) . #(vector?))))
| | (vector? (primitive vector?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (vector-ref)
      ())
| | |(apply-proc
       (primitive list)
       (primitive vector-ref)
       (((name) . #(vector-ref))))
| | |(apply-primitive-proc
       list
       (primitive vector-ref)
       (((name) . #(vector-ref))))
| | |(primitive vector-ref)
| | |(apply-proc
       (primitive list)
       ((primitive vector-ref))
       (((name) . #(vector-ref))))
| | |(apply-primitive-proc
       list
       ((primitive vector-ref))
       (((name) . #(vector-ref))))
| | |((primitive vector-ref))
| | (apply-proc
      (primitive cons)
      (vector-ref ((primitive vector-ref)))
      (((name) . #(vector-ref))))
| | (apply-primitive-proc
      cons
      (vector-ref ((primitive vector-ref)))
      (((name) . #(vector-ref))))
| | (vector-ref (primitive vector-ref))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (make-vector)
      ())
| | |(apply-proc
       (primitive list)
       (primitive make-vector)
       (((name) . #(make-vector))))
| | |(apply-primitive-proc
       list
       (primitive make-vector)
       (((name) . #(make-vector))))
| | |(primitive make-vector)
| | |(apply-proc
       (primitive list)
       ((primitive make-vector))
       (((name) . #(make-vector))))
| | |(apply-primitive-proc
       list
       ((primitive make-vector))
       (((name) . #(make-vector))))
| | |((primitive make-vector))
| | (apply-proc
      (primitive cons)
      (make-vector ((primitive make-vector)))
      (((name) . #(make-vector))))
| | (apply-primitive-proc
      cons
      (make-vector ((primitive make-vector)))
      (((name) . #(make-vector))))
| | (make-vector (primitive make-vector))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (boolean?)
      ())
| | |(apply-proc (primitive list) (primitive boolean?) (((name) . #(boolean?))))
| | |(apply-primitive-proc list (primitive boolean?) (((name) . #(boolean?))))
| | |(primitive boolean?)
| | |(apply-proc
       (primitive list)
       ((primitive boolean?))
       (((name) . #(boolean?))))
| | |(apply-primitive-proc list ((primitive boolean?)) (((name) . #(boolean?))))
| | |((primitive boolean?))
| | (apply-proc
      (primitive cons)
      (boolean? ((primitive boolean?)))
      (((name) . #(boolean?))))
| | (apply-primitive-proc
      cons
      (boolean? ((primitive boolean?)))
      (((name) . #(boolean?))))
| | (boolean? (primitive boolean?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (vector)
      ())
| | |(apply-proc (primitive list) (primitive vector) (((name) . #(vector))))
| | |(apply-primitive-proc list (primitive vector) (((name) . #(vector))))
| | |(primitive vector)
| | |(apply-proc (primitive list) ((primitive vector)) (((name) . #(vector))))
| | |(apply-primitive-proc list ((primitive vector)) (((name) . #(vector))))
| | |((primitive vector))
| | (apply-proc
      (primitive cons)
      (vector ((primitive vector)))
      (((name) . #(vector))))
| | (apply-primitive-proc
      cons
      (vector ((primitive vector)))
      (((name) . #(vector))))
| | (vector (primitive vector))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (vector->list)
      ())
| | |(apply-proc
       (primitive list)
       (primitive vector->list)
       (((name) . #(vector->list))))
| | |(apply-primitive-proc
       list
       (primitive vector->list)
       (((name) . #(vector->list))))
| | |(primitive vector->list)
| | |(apply-proc
       (primitive list)
       ((primitive vector->list))
       (((name) . #(vector->list))))
| | |(apply-primitive-proc
       list
       ((primitive vector->list))
       (((name) . #(vector->list))))
| | |((primitive vector->list))
| | (apply-proc
      (primitive cons)
      (vector->list ((primitive vector->list)))
      (((name) . #(vector->list))))
| | (apply-primitive-proc
      cons
      (vector->list ((primitive vector->list)))
      (((name) . #(vector->list))))
| | (vector->list (primitive vector->list))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (procedure?)
      ())
| | |(apply-proc
       (primitive list)
       (primitive procedure?)
       (((name) . #(procedure?))))
| | |(apply-primitive-proc
       list
       (primitive procedure?)
       (((name) . #(procedure?))))
| | |(primitive procedure?)
| | |(apply-proc
       (primitive list)
       ((primitive procedure?))
       (((name) . #(procedure?))))
| | |(apply-primitive-proc
       list
       ((primitive procedure?))
       (((name) . #(procedure?))))
| | |((primitive procedure?))
| | (apply-proc
      (primitive cons)
      (procedure? ((primitive procedure?)))
      (((name) . #(procedure?))))
| | (apply-primitive-proc
      cons
      (procedure? ((primitive procedure?)))
      (((name) . #(procedure?))))
| | (procedure? (primitive procedure?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (pair?)
      ())
| | |(apply-proc (primitive list) (primitive pair?) (((name) . #(pair?))))
| | |(apply-primitive-proc list (primitive pair?) (((name) . #(pair?))))
| | |(primitive pair?)
| | |(apply-proc (primitive list) ((primitive pair?)) (((name) . #(pair?))))
| | |(apply-primitive-proc list ((primitive pair?)) (((name) . #(pair?))))
| | |((primitive pair?))
| | (apply-proc
      (primitive cons)
      (pair? ((primitive pair?)))
      (((name) . #(pair?))))
| | (apply-primitive-proc
      cons
      (pair? ((primitive pair?)))
      (((name) . #(pair?))))
| | (pair? (primitive pair?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (open-input-file)
      ())
| | |(apply-proc
       (primitive list)
       (primitive open-input-file)
       (((name) . #(open-input-file))))
| | |(apply-primitive-proc
       list
       (primitive open-input-file)
       (((name) . #(open-input-file))))
| | |(primitive open-input-file)
| | |(apply-proc
       (primitive list)
       ((primitive open-input-file))
       (((name) . #(open-input-file))))
| | |(apply-primitive-proc
       list
       ((primitive open-input-file))
       (((name) . #(open-input-file))))
| | |((primitive open-input-file))
| | (apply-proc
      (primitive cons)
      (open-input-file ((primitive open-input-file)))
      (((name) . #(open-input-file))))
| | (apply-primitive-proc
      cons
      (open-input-file ((primitive open-input-file)))
      (((name) . #(open-input-file))))
| | (open-input-file (primitive open-input-file))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (list?)
      ())
| | |(apply-proc (primitive list) (primitive list?) (((name) . #(list?))))
| | |(apply-primitive-proc list (primitive list?) (((name) . #(list?))))
| | |(primitive list?)
| | |(apply-proc (primitive list) ((primitive list?)) (((name) . #(list?))))
| | |(apply-primitive-proc list ((primitive list?)) (((name) . #(list?))))
| | |((primitive list?))
| | (apply-proc
      (primitive cons)
      (list? ((primitive list?)))
      (((name) . #(list?))))
| | (apply-primitive-proc
      cons
      (list? ((primitive list?)))
      (((name) . #(list?))))
| | (list? (primitive list?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (list->vector)
      ())
| | |(apply-proc
       (primitive list)
       (primitive list->vector)
       (((name) . #(list->vector))))
| | |(apply-primitive-proc
       list
       (primitive list->vector)
       (((name) . #(list->vector))))
| | |(primitive list->vector)
| | |(apply-proc
       (primitive list)
       ((primitive list->vector))
       (((name) . #(list->vector))))
| | |(apply-primitive-proc
       list
       ((primitive list->vector))
       (((name) . #(list->vector))))
| | |((primitive list->vector))
| | (apply-proc
      (primitive cons)
      (list->vector ((primitive list->vector)))
      (((name) . #(list->vector))))
| | (apply-primitive-proc
      cons
      (list->vector ((primitive list->vector)))
      (((name) . #(list->vector))))
| | (list->vector (primitive list->vector))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (length)
      ())
| | |(apply-proc (primitive list) (primitive length) (((name) . #(length))))
| | |(apply-primitive-proc list (primitive length) (((name) . #(length))))
| | |(primitive length)
| | |(apply-proc (primitive list) ((primitive length)) (((name) . #(length))))
| | |(apply-primitive-proc list ((primitive length)) (((name) . #(length))))
| | |((primitive length))
| | (apply-proc
      (primitive cons)
      (length ((primitive length)))
      (((name) . #(length))))
| | (apply-primitive-proc
      cons
      (length ((primitive length)))
      (((name) . #(length))))
| | (length (primitive length))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (atom?)
      ())
| | |(apply-proc (primitive list) (primitive atom?) (((name) . #(atom?))))
| | |(apply-primitive-proc list (primitive atom?) (((name) . #(atom?))))
| | |(primitive atom?)
| | |(apply-proc (primitive list) ((primitive atom?)) (((name) . #(atom?))))
| | |(apply-primitive-proc list ((primitive atom?)) (((name) . #(atom?))))
| | |((primitive atom?))
| | (apply-proc
      (primitive cons)
      (atom? ((primitive atom?)))
      (((name) . #(atom?))))
| | (apply-primitive-proc
      cons
      (atom? ((primitive atom?)))
      (((name) . #(atom?))))
| | (atom? (primitive atom?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (write)
      ())
| | |(apply-proc (primitive list) (primitive write) (((name) . #(write))))
| | |(apply-primitive-proc list (primitive write) (((name) . #(write))))
| | |(primitive write)
| | |(apply-proc (primitive list) ((primitive write)) (((name) . #(write))))
| | |(apply-primitive-proc list ((primitive write)) (((name) . #(write))))
| | |((primitive write))
| | (apply-proc
      (primitive cons)
      (write ((primitive write)))
      (((name) . #(write))))
| | (apply-primitive-proc
      cons
      (write ((primitive write)))
      (((name) . #(write))))
| | (write (primitive write))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (eof-object?)
      ())
| | |(apply-proc
       (primitive list)
       (primitive eof-object?)
       (((name) . #(eof-object?))))
| | |(apply-primitive-proc
       list
       (primitive eof-object?)
       (((name) . #(eof-object?))))
| | |(primitive eof-object?)
| | |(apply-proc
       (primitive list)
       ((primitive eof-object?))
       (((name) . #(eof-object?))))
| | |(apply-primitive-proc
       list
       ((primitive eof-object?))
       (((name) . #(eof-object?))))
| | |((primitive eof-object?))
| | (apply-proc
      (primitive cons)
      (eof-object? ((primitive eof-object?)))
      (((name) . #(eof-object?))))
| | (apply-primitive-proc
      cons
      (eof-object? ((primitive eof-object?)))
      (((name) . #(eof-object?))))
| | (eof-object? (primitive eof-object?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (equal?)
      ())
| | |(apply-proc (primitive list) (primitive equal?) (((name) . #(equal?))))
| | |(apply-primitive-proc list (primitive equal?) (((name) . #(equal?))))
| | |(primitive equal?)
| | |(apply-proc (primitive list) ((primitive equal?)) (((name) . #(equal?))))
| | |(apply-primitive-proc list ((primitive equal?)) (((name) . #(equal?))))
| | |((primitive equal?))
| | (apply-proc
      (primitive cons)
      (equal? ((primitive equal?)))
      (((name) . #(equal?))))
| | (apply-primitive-proc
      cons
      (equal? ((primitive equal?)))
      (((name) . #(equal?))))
| | (equal? (primitive equal?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (eq?)
      ())
| | |(apply-proc (primitive list) (primitive eq?) (((name) . #(eq?))))
| | |(apply-primitive-proc list (primitive eq?) (((name) . #(eq?))))
| | |(primitive eq?)
| | |(apply-proc (primitive list) ((primitive eq?)) (((name) . #(eq?))))
| | |(apply-primitive-proc list ((primitive eq?)) (((name) . #(eq?))))
| | |((primitive eq?))
| | (apply-proc (primitive cons) (eq? ((primitive eq?))) (((name) . #(eq?))))
| | (apply-primitive-proc cons (eq? ((primitive eq?))) (((name) . #(eq?))))
| | (eq? (primitive eq?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (null?)
      ())
| | |(apply-proc (primitive list) (primitive null?) (((name) . #(null?))))
| | |(apply-primitive-proc list (primitive null?) (((name) . #(null?))))
| | |(primitive null?)
| | |(apply-proc (primitive list) ((primitive null?)) (((name) . #(null?))))
| | |(apply-primitive-proc list ((primitive null?)) (((name) . #(null?))))
| | |((primitive null?))
| | (apply-proc
      (primitive cons)
      (null? ((primitive null?)))
      (((name) . #(null?))))
| | (apply-primitive-proc
      cons
      (null? ((primitive null?)))
      (((name) . #(null?))))
| | (null? (primitive null?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (list)
      ())
| | |(apply-proc (primitive list) (primitive list) (((name) . #(list))))
| | |(apply-primitive-proc list (primitive list) (((name) . #(list))))
| | |(primitive list)
| | |(apply-proc (primitive list) ((primitive list)) (((name) . #(list))))
| | |(apply-primitive-proc list ((primitive list)) (((name) . #(list))))
| | |((primitive list))
| | (apply-proc (primitive cons) (list ((primitive list))) (((name) . #(list))))
| | (apply-primitive-proc cons (list ((primitive list))) (((name) . #(list))))
| | (list (primitive list))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (cons)
      ())
| | |(apply-proc (primitive list) (primitive cons) (((name) . #(cons))))
| | |(apply-primitive-proc list (primitive cons) (((name) . #(cons))))
| | |(primitive cons)
| | |(apply-proc (primitive list) ((primitive cons)) (((name) . #(cons))))
| | |(apply-primitive-proc list ((primitive cons)) (((name) . #(cons))))
| | |((primitive cons))
| | (apply-proc (primitive cons) (cons ((primitive cons))) (((name) . #(cons))))
| | (apply-primitive-proc cons (cons ((primitive cons))) (((name) . #(cons))))
| | (cons (primitive cons))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (newline)
      ())
| | |(apply-proc (primitive list) (primitive newline) (((name) . #(newline))))
| | |(apply-primitive-proc list (primitive newline) (((name) . #(newline))))
| | |(primitive newline)
| | |(apply-proc (primitive list) ((primitive newline)) (((name) . #(newline))))
| | |(apply-primitive-proc list ((primitive newline)) (((name) . #(newline))))
| | |((primitive newline))
| | (apply-proc
      (primitive cons)
      (newline ((primitive newline)))
      (((name) . #(newline))))
| | (apply-primitive-proc
      cons
      (newline ((primitive newline)))
      (((name) . #(newline))))
| | (newline (primitive newline))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (close-port)
      ())
| | |(apply-proc
       (primitive list)
       (primitive close-port)
       (((name) . #(close-port))))
| | |(apply-primitive-proc
       list
       (primitive close-port)
       (((name) . #(close-port))))
| | |(primitive close-port)
| | |(apply-proc
       (primitive list)
       ((primitive close-port))
       (((name) . #(close-port))))
| | |(apply-primitive-proc
       list
       ((primitive close-port))
       (((name) . #(close-port))))
| | |((primitive close-port))
| | (apply-proc
      (primitive cons)
      (close-port ((primitive close-port)))
      (((name) . #(close-port))))
| | (apply-primitive-proc
      cons
      (close-port ((primitive close-port)))
      (((name) . #(close-port))))
| | (close-port (primitive close-port))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (>=)
      ())
| | |(apply-proc (primitive list) (primitive >=) (((name) . #(>=))))
| | |(apply-primitive-proc list (primitive >=) (((name) . #(>=))))
| | |(primitive >=)
| | |(apply-proc (primitive list) ((primitive >=)) (((name) . #(>=))))
| | |(apply-primitive-proc list ((primitive >=)) (((name) . #(>=))))
| | |((primitive >=))
| | (apply-proc (primitive cons) (>= ((primitive >=))) (((name) . #(>=))))
| | (apply-primitive-proc cons (>= ((primitive >=))) (((name) . #(>=))))
| | (>= (primitive >=))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (<=)
      ())
| | |(apply-proc (primitive list) (primitive <=) (((name) . #(<=))))
| | |(apply-primitive-proc list (primitive <=) (((name) . #(<=))))
| | |(primitive <=)
| | |(apply-proc (primitive list) ((primitive <=)) (((name) . #(<=))))
| | |(apply-primitive-proc list ((primitive <=)) (((name) . #(<=))))
| | |((primitive <=))
| | (apply-proc (primitive cons) (<= ((primitive <=))) (((name) . #(<=))))
| | (apply-primitive-proc cons (<= ((primitive <=))) (((name) . #(<=))))
| | (<= (primitive <=))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (>)
      ())
| | |(apply-proc (primitive list) (primitive >) (((name) . #(>))))
| | |(apply-primitive-proc list (primitive >) (((name) . #(>))))
| | |(primitive >)
| | |(apply-proc (primitive list) ((primitive >)) (((name) . #(>))))
| | |(apply-primitive-proc list ((primitive >)) (((name) . #(>))))
| | |((primitive >))
| | (apply-proc (primitive cons) (> ((primitive >))) (((name) . #(>))))
| | (apply-primitive-proc cons (> ((primitive >))) (((name) . #(>))))
| | (> (primitive >))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (<)
      ())
| | |(apply-proc (primitive list) (primitive <) (((name) . #(<))))
| | |(apply-primitive-proc list (primitive <) (((name) . #(<))))
| | |(primitive <)
| | |(apply-proc (primitive list) ((primitive <)) (((name) . #(<))))
| | |(apply-primitive-proc list ((primitive <)) (((name) . #(<))))
| | |((primitive <))
| | (apply-proc (primitive cons) (< ((primitive <))) (((name) . #(<))))
| | (apply-primitive-proc cons (< ((primitive <))) (((name) . #(<))))
| | (< (primitive <))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (=)
      ())
| | |(apply-proc (primitive list) (primitive =) (((name) . #(=))))
| | |(apply-primitive-proc list (primitive =) (((name) . #(=))))
| | |(primitive =)
| | |(apply-proc (primitive list) ((primitive =)) (((name) . #(=))))
| | |(apply-primitive-proc list ((primitive =)) (((name) . #(=))))
| | |((primitive =))
| | (apply-proc (primitive cons) (= ((primitive =))) (((name) . #(=))))
| | (apply-primitive-proc cons (= ((primitive =))) (((name) . #(=))))
| | (= (primitive =))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (not)
      ())
| | |(apply-proc (primitive list) (primitive not) (((name) . #(not))))
| | |(apply-primitive-proc list (primitive not) (((name) . #(not))))
| | |(primitive not)
| | |(apply-proc (primitive list) ((primitive not)) (((name) . #(not))))
| | |(apply-primitive-proc list ((primitive not)) (((name) . #(not))))
| | |((primitive not))
| | (apply-proc (primitive cons) (not ((primitive not))) (((name) . #(not))))
| | (apply-primitive-proc cons (not ((primitive not))) (((name) . #(not))))
| | (not (primitive not))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (zero?)
      ())
| | |(apply-proc (primitive list) (primitive zero?) (((name) . #(zero?))))
| | |(apply-primitive-proc list (primitive zero?) (((name) . #(zero?))))
| | |(primitive zero?)
| | |(apply-proc (primitive list) ((primitive zero?)) (((name) . #(zero?))))
| | |(apply-primitive-proc list ((primitive zero?)) (((name) . #(zero?))))
| | |((primitive zero?))
| | (apply-proc
      (primitive cons)
      (zero? ((primitive zero?)))
      (((name) . #(zero?))))
| | (apply-primitive-proc
      cons
      (zero? ((primitive zero?)))
      (((name) . #(zero?))))
| | (zero? (primitive zero?))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (read)
      ())
| | |(apply-proc (primitive list) (primitive read) (((name) . #(read))))
| | |(apply-primitive-proc list (primitive read) (((name) . #(read))))
| | |(primitive read)
| | |(apply-proc (primitive list) ((primitive read)) (((name) . #(read))))
| | |(apply-primitive-proc list ((primitive read)) (((name) . #(read))))
| | |((primitive read))
| | (apply-proc (primitive cons) (read ((primitive read))) (((name) . #(read))))
| | (apply-primitive-proc cons (read ((primitive read))) (((name) . #(read))))
| | (read (primitive read))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (display)
      ())
| | |(apply-proc (primitive list) (primitive display) (((name) . #(display))))
| | |(apply-primitive-proc list (primitive display) (((name) . #(display))))
| | |(primitive display)
| | |(apply-proc (primitive list) ((primitive display)) (((name) . #(display))))
| | |(apply-primitive-proc list ((primitive display)) (((name) . #(display))))
| | |((primitive display))
| | (apply-proc
      (primitive cons)
      (display ((primitive display)))
      (((name) . #(display))))
| | (apply-primitive-proc
      cons
      (display ((primitive display)))
      (((name) . #(display))))
| | (display (primitive display))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (max)
      ())
| | |(apply-proc (primitive list) (primitive max) (((name) . #(max))))
| | |(apply-primitive-proc list (primitive max) (((name) . #(max))))
| | |(primitive max)
| | |(apply-proc (primitive list) ((primitive max)) (((name) . #(max))))
| | |(apply-primitive-proc list ((primitive max)) (((name) . #(max))))
| | |((primitive max))
| | (apply-proc (primitive cons) (max ((primitive max))) (((name) . #(max))))
| | (apply-primitive-proc cons (max ((primitive max))) (((name) . #(max))))
| | (max (primitive max))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (sub1)
      ())
| | |(apply-proc (primitive list) (primitive sub1) (((name) . #(sub1))))
| | |(apply-primitive-proc list (primitive sub1) (((name) . #(sub1))))
| | |(primitive sub1)
| | |(apply-proc (primitive list) ((primitive sub1)) (((name) . #(sub1))))
| | |(apply-primitive-proc list ((primitive sub1)) (((name) . #(sub1))))
| | |((primitive sub1))
| | (apply-proc (primitive cons) (sub1 ((primitive sub1))) (((name) . #(sub1))))
| | (apply-primitive-proc cons (sub1 ((primitive sub1))) (((name) . #(sub1))))
| | (sub1 (primitive sub1))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (add1)
      ())
| | |(apply-proc (primitive list) (primitive add1) (((name) . #(add1))))
| | |(apply-primitive-proc list (primitive add1) (((name) . #(add1))))
| | |(primitive add1)
| | |(apply-proc (primitive list) ((primitive add1)) (((name) . #(add1))))
| | |(apply-primitive-proc list ((primitive add1)) (((name) . #(add1))))
| | |((primitive add1))
| | (apply-proc (primitive cons) (add1 ((primitive add1))) (((name) . #(add1))))
| | (apply-primitive-proc cons (add1 ((primitive add1))) (((name) . #(add1))))
| | (add1 (primitive add1))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (/)
      ())
| | |(apply-proc (primitive list) (primitive /) (((name) . #(/))))
| | |(apply-primitive-proc list (primitive /) (((name) . #(/))))
| | |(primitive /)
| | |(apply-proc (primitive list) ((primitive /)) (((name) . #(/))))
| | |(apply-primitive-proc list ((primitive /)) (((name) . #(/))))
| | |((primitive /))
| | (apply-proc (primitive cons) (/ ((primitive /))) (((name) . #(/))))
| | (apply-primitive-proc cons (/ ((primitive /))) (((name) . #(/))))
| | (/ (primitive /))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (*)
      ())
| | |(apply-proc (primitive list) (primitive *) (((name) . #(*))))
| | |(apply-primitive-proc list (primitive *) (((name) . #(*))))
| | |(primitive *)
| | |(apply-proc (primitive list) ((primitive *)) (((name) . #(*))))
| | |(apply-primitive-proc list ((primitive *)) (((name) . #(*))))
| | |((primitive *))
| | (apply-proc (primitive cons) (* ((primitive *))) (((name) . #(*))))
| | (apply-primitive-proc cons (* ((primitive *))) (((name) . #(*))))
| | (* (primitive *))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (-)
      ())
| | |(apply-proc (primitive list) (primitive -) (((name) . #(-))))
| | |(apply-primitive-proc list (primitive -) (((name) . #(-))))
| | |(primitive -)
| | |(apply-proc (primitive list) ((primitive -)) (((name) . #(-))))
| | |(apply-primitive-proc list ((primitive -)) (((name) . #(-))))
| | |((primitive -))
| | (apply-proc (primitive cons) (- ((primitive -))) (((name) . #(-))))
| | (apply-primitive-proc cons (- ((primitive -))) (((name) . #(-))))
| | (- (primitive -))
| | (apply-proc
      (closure-record
        (name)
        (app-exp
          (var-exp cons)
          ((var-exp name)
            (app-exp
              (var-exp list)
              ((app-exp (var-exp list) ((lit-exp primitive) (var-exp name)))))))
        ())
      (+)
      ())
| | |(apply-proc (primitive list) (primitive +) (((name) . #(+))))
| | |(apply-primitive-proc list (primitive +) (((name) . #(+))))
| | |(primitive +)
| | |(apply-proc (primitive list) ((primitive +)) (((name) . #(+))))
| | |(apply-primitive-proc list ((primitive +)) (((name) . #(+))))
| | |((primitive +))
| | (apply-proc (primitive cons) (+ ((primitive +))) (((name) . #(+))))
| | (apply-primitive-proc cons (+ ((primitive +))) (((name) . #(+))))
| | (+ (primitive +))
| |((+ (primitive +)) (- (primitive -)) (* (primitive *)) (/ (primitive /))
    (add1 (primitive add1)) (sub1 (primitive sub1)) (max (primitive max))
    (display (primitive display)) (read (primitive read))
    (zero? (primitive zero?)) (not (primitive not)) (= (primitive =))
    (< (primitive <)) (> (primitive >)) (<= (primitive <=)) (>= (primitive >=))
    (close-port (primitive close-port)) (newline (primitive newline))
    (cons (primitive cons)) (list (primitive list)) (null? (primitive null?))
    (eq? (primitive eq?)) (equal? (primitive equal?))
    (eof-object? (primitive eof-object?)) (write (primitive write))
    (atom? (primitive atom?)) (length (primitive length))
    (list->vector (primitive list->vector)) (list? (primitive list?))
    (open-input-file (primitive open-input-file)) (pair? (primitive pair?))
    (procedure? (primitive procedure?)) (vector->list (primitive vector->list))
    (vector (primitive vector)) (boolean? (primitive boolean?))
    (make-vector (primitive make-vector)) (vector-ref (primitive vector-ref))
    (vector? (primitive vector?)) (number? (primitive number?))
    (string? (primitive string?)) (symbol? (primitive symbol?))
    (set-car! (primitive set-car!)) (set-cdr! (primitive set-cdr!))
    (vector-set! (primitive vector-set!)) (car (primitive car))
    (cdr (primitive cdr)) (caar (primitive caar)) (cadr (primitive cadr))
    (cdar (primitive cdar)) (cddr (primitive cddr)) (caaar (primitive caaar))
    (load (primitive load)) (caadr (primitive caadr)) (cadar (primitive cadar))
    (cdaar (primitive cdaar)) (cdddr (primitive cdddr))
    (cddar (primitive cddar)) (cdadr (primitive cdadr))
    (caddr (primitive caddr)) (map (primitive map)) (apply (primitive apply))
    (assq (primitive assq)) (assv (primitive assv)) (append (primitive append)))
| ()
|()
()
>>> (rep)
|(apply-proc
   (closure-record
     ()
     (begin-exp
       ((app-exp (var-exp display) ((lit-exp ">>> ")))
         (app-exp
           (lambda-exp
             (foo)
             (begin-exp
               ((if-exp
                  (app-exp
                    (var-exp not)
                    ((app-exp
                       (var-exp equal?)
                       ((var-exp foo) (lit-exp (exit))))))
                  (begin-exp
                    ((app-exp
                       (var-exp write)
                       ((app-exp (var-exp eval-one-exp) ((var-exp foo)))))
                      (app-exp (var-exp newline) (()))
                      (app-exp (var-exp rep) (()))))
                  (app-exp (var-exp display) ((lit-exp "Bye...")))))))
           ((app-exp (var-exp read) (()))))))
     ())
   (())
   ())
| (apply-proc (primitive display) (">>> ") ((() . #(()))))
| (apply-primitive-proc display (">>> ") ((() . #(()))))
>>> | #<void>
| (apply-proc (primitive read) (()) ((() . #(()))))
| (apply-primitive-proc read (()) ((() . #(()))))
(+ 1 2)
| (+ 1 2)
|(apply-proc
   (closure-record
     (foo)
     (begin-exp
       ((if-exp
          (app-exp
            (var-exp not)
            ((app-exp (var-exp equal?) ((var-exp foo) (lit-exp (exit))))))
          (begin-exp
            ((app-exp
               (var-exp write)
               ((app-exp (var-exp eval-one-exp) ((var-exp foo)))))
              (app-exp (var-exp newline) (()))
              (app-exp (var-exp rep) (()))))
          (app-exp (var-exp display) ((lit-exp "Bye..."))))))
     ((() . #(()))))
   ((+ 1 2))
   ((() . #(()))))
| (apply-proc
    (primitive equal?)
    ((+ 1 2) (exit))
    (((foo) . #((+ 1 2))) (() . #(()))))
| (apply-primitive-proc
    equal?
    ((+ 1 2) (exit))
    (((foo) . #((+ 1 2))) (() . #(()))))
| #f
| (apply-proc (primitive not) (#f) (((foo) . #((+ 1 2))) (() . #(()))))
| (apply-primitive-proc not (#f) (((foo) . #((+ 1 2))) (() . #(()))))
| #t
| (apply-proc
    (closure-record
      (exp)
      (app-exp
        (lambda-exp
          (parse-tree)
          (app-exp
            (lambda-exp
              (expanded-tree)
              (app-exp
                (lambda-exp (result) (begin-exp ((var-exp result))))
                ((app-exp (var-exp top-level-eval) ((var-exp expanded-tree))))))
            ((app-exp (var-exp expand-syntax) ((var-exp parse-tree))))))
        ((app-exp (var-exp parse-expression) ((var-exp exp)))))
      ())
    ((+ 1 2))
    (((foo) . #((+ 1 2))) (() . #(()))))
| |(apply-proc
     (closure-record
       (datum)
       (if-exp
         (app-exp (var-exp null?) ((var-exp datum)))
         (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
         (if-exp
           (app-exp (var-exp symbol?) ((var-exp datum)))
           (app-exp (var-exp list) ((lit-exp var-exp) (var-exp datum)))
           (if-exp
             (app-exp (var-exp number?) ((var-exp datum)))
             (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
             (if-exp
               (app-exp (var-exp string?) ((var-exp datum)))
               (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
               (if-exp
                 (app-exp (var-exp boolean?) ((var-exp datum)))
                 (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                 (if-exp
                   (app-exp (var-exp vector?) ((var-exp datum)))
                   (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                   (if-exp
                     (app-exp (var-exp pair?) ((var-exp datum)))
                     (if-exp
                       (app-exp
                         (var-exp eq?)
                         ((app-exp (var-exp car) ((var-exp datum)))
                           (lit-exp quote)))
                       (app-exp
                         (var-exp list)
                         ((lit-exp lit-exp)
                           (app-exp (var-exp cadr) ((var-exp datum)))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp datum)))
                             (lit-exp lambda)))
                         (app-exp
                           (var-exp list)
                           ((lit-exp lambda-exp)
                             (app-exp
                               (var-exp param-list)
                               ((app-exp (var-exp cadr) ((var-exp datum)))))
                             (if-exp
                               (app-exp
                                 (var-exp =)
                                 ((app-exp
                                    (var-exp length)
                                    ((app-exp
                                       (var-exp cddr)
                                       ((var-exp datum)))))
                                   (lit-exp 1)))
                               (app-exp
                                 (var-exp parse-expression)
                                 ((app-exp (var-exp caddr) ((var-exp datum)))))
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp begin-exp)
                                   (app-exp
                                     (var-exp map)
                                     ((var-exp parse-expression)
                                       (app-exp
                                         (var-exp cddr)
                                         ((var-exp datum))))))))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp datum)))
                               (lit-exp set!)))
                           (app-exp
                             (var-exp list)
                             ((lit-exp set!-exp)
                               (app-exp (var-exp cadr) ((var-exp datum)))
                               (app-exp
                                 (var-exp parse-expression)
                                 ((app-exp
                                    (var-exp caddr)
                                    ((var-exp datum)))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp datum)))
                                 (lit-exp letrec)))
                             (if-exp
                               (app-exp
                                 (var-exp valid?)
                                 ((app-exp (var-exp cadr) ((var-exp datum)))))
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp letrec-exp)
                                   (app-exp
                                     (var-exp map)
                                     ((var-exp car)
                                       (app-exp
                                         (var-exp cadr)
                                         ((var-exp datum)))))
                                   (app-exp
                                     (var-exp map)
                                     ((var-exp parse-expression)
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp cadr)
                                           (app-exp
                                             (var-exp cadr)
                                             ((var-exp datum)))))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp begin-exp)
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp parse-expression)
                                           (app-exp
                                             (var-exp cddr)
                                             ((var-exp datum)))))))))
                               (lit-exp ()))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp datum)))
                                   (lit-exp let*)))
                               (if-exp
                                 (app-exp
                                   (var-exp valid?)
                                   ((app-exp (var-exp cadr) ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp let*-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp car)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))))
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp cadr)
                                             (app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp begin-exp)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp cddr)
                                               ((var-exp datum)))))))))
                                 (lit-exp ()))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp datum)))
                                     (lit-exp let)))
                                 (if-exp
                                   (app-exp
                                     (var-exp list?)
                                     ((app-exp
                                        (var-exp cadr)
                                        ((var-exp datum)))))
                                   (if-exp
                                     (app-exp
                                       (lambda-exp
                                         (sys-var tempVal)
                                         (if-exp
                                           (var-exp (sys-var tempVal))
                                           (var-exp (sys-var tempVal))
                                           (lit-exp #t)))
                                       ((app-exp
                                          (var-exp valid?)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp datum)))))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp let-exp)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp car)
                                             (app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp cadr)
                                                 (app-exp
                                                   (var-exp cadr)
                                                   ((var-exp datum)))))))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp begin-exp)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp parse-expression)
                                                 (app-exp
                                                   (var-exp cddr)
                                                   ((var-exp datum)))))))))
                                     (lit-exp ()))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp named-let-exp)
                                       (app-exp
                                         (var-exp cadr)
                                         ((var-exp datum)))
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp car)
                                           (app-exp
                                             (var-exp caddr)
                                             ((var-exp datum)))))
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp parse-expression)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp cadr)
                                               (app-exp
                                                 (var-exp caddr)
                                                 ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cdddr)
                                                 ((var-exp datum))))))))))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp datum)))
                                       (lit-exp if)))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp if-exp)
                                       (app-exp
                                         (var-exp parse-expression)
                                         ((app-exp
                                            (var-exp cadr)
                                            ((var-exp datum)))))
                                       (app-exp
                                         (var-exp parse-expression)
                                         ((app-exp
                                            (var-exp caddr)
                                            ((var-exp datum)))))
                                       (if-exp
                                         (app-exp
                                           (var-exp null?)
                                           ((app-exp
                                              (var-exp cdddr)
                                              ((var-exp datum)))))
                                         (lit-exp ())
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp cadddr)
                                              ((var-exp datum))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp
                                          (var-exp car)
                                          ((var-exp datum)))
                                         (lit-exp begin)))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp begin-exp)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp cdr)
                                               ((var-exp datum)))))))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp datum)))
                                           (lit-exp while)))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp while-exp)
                                           (app-exp
                                             (var-exp parse-expression)
                                             ((app-exp
                                                (var-exp cadr)
                                                ((var-exp datum)))))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp begin-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cddr)
                                                     ((var-exp datum)))))))))
                                       (if-exp
                                         (app-exp
                                           (var-exp equal?)
                                           ((app-exp
                                              (var-exp car)
                                              ((var-exp datum)))
                                             (lit-exp and)))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp and-exp)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp parse-expression)
                                                 (app-exp
                                                   (var-exp cdr)
                                                   ((var-exp datum)))))))
                                         (if-exp
                                           (app-exp
                                             (var-exp equal?)
                                             ((app-exp
                                                (var-exp car)
                                                ((var-exp datum)))
                                               (lit-exp or)))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp or-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cdr)
                                                     ((var-exp datum)))))))
                                           (if-exp
                                             (app-exp
                                               (var-exp equal?)
                                               ((app-exp
                                                  (var-exp car)
                                                  ((var-exp datum)))
                                                 (lit-exp cond)))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp cond-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp cd-lambda)
                                                     (app-exp
                                                       (var-exp cdr)
                                                       ((var-exp datum)))))))
                                             (if-exp
                                               (app-exp
                                                 (var-exp equal?)
                                                 ((app-exp
                                                    (var-exp car)
                                                    ((var-exp datum)))
                                                   (lit-exp case)))
                                               (app-exp
                                                 (var-exp list)
                                                 ((lit-exp case-exp)
                                                   (app-exp
                                                     (var-exp parse-expression)
                                                     ((app-exp
                                                        (var-exp cadr)
                                                        ((var-exp datum)))))
                                                   (app-exp
                                                     (var-exp map)
                                                     ((lambda-exp
                                                        (ls)
                                                        (app-exp
                                                          (var-exp list)
                                                          ((if-exp
                                                             (app-exp
                                                               (var-exp equal?)
                                                               ((lit-exp else)
                                                                 (app-exp
                                                                   (var-exp car)
                                                                   ((var-exp
                                                                      ls)))))
                                                             (app-exp
                                                               (var-exp list)
                                                               ((app-exp
                                                                  (var-exp
                                                                    parse-expression)
                                                                  ((app-exp
                                                                     (var-exp
                                                                       cadr)
                                                                     ((var-exp
                                                                        datum)))))))
                                                             (if-exp
                                                               (app-exp
                                                                 (var-exp atom?)
                                                                 ((app-exp
                                                                    (var-exp
                                                                      car)
                                                                    ((var-exp
                                                                       ls)))))
                                                               (app-exp
                                                                 (var-exp list)
                                                                 ((lit-exp
                                                                    lit-exp)
                                                                   (app-exp
                                                                     (var-exp
                                                                       car)
                                                                     ((var-exp
                                                                        ls)))))
                                                               (app-exp
                                                                 (var-exp map)
                                                                 ((var-exp
                                                                    parse-expression)
                                                                   (app-exp
                                                                     (var-exp
                                                                       car)
                                                                     ((var-exp
                                                                        ls)))))))
                                                            (app-exp
                                                              (var-exp
                                                                parse-expression)
                                                              ((app-exp
                                                                 (var-exp cadr)
                                                                 ((var-exp
                                                                    ls))))))))
                                                       (app-exp
                                                         (var-exp cddr)
                                                         ((var-exp datum)))))))
                                               (if-exp
                                                 (app-exp
                                                   (var-exp equal?)
                                                   ((app-exp
                                                      (var-exp car)
                                                      ((var-exp datum)))
                                                     (lit-exp define)))
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp define-exp)
                                                     (app-exp
                                                       (var-exp cadr)
                                                       ((var-exp datum)))
                                                     (app-exp
                                                       (var-exp
                                                         parse-expression)
                                                       ((app-exp
                                                          (var-exp caddr)
                                                          ((var-exp datum)))))))
                                                 (if-exp
                                                   (lit-exp #t)
                                                   (if-exp
                                                     (app-exp
                                                       (var-exp not)
                                                       ((app-exp
                                                          (var-exp list?)
                                                          ((app-exp
                                                             (var-exp cdr)
                                                             ((var-exp
                                                                datum)))))))
                                                     (lit-exp (()))
                                                     (app-exp
                                                       (var-exp list)
                                                       ((lit-exp app-exp)
                                                         (app-exp
                                                           (var-exp
                                                             parse-expression)
                                                           ((app-exp
                                                              (var-exp car)
                                                              ((var-exp
                                                                 datum)))))
                                                         (if-exp
                                                           (app-exp
                                                             (var-exp null?)
                                                             ((app-exp
                                                                (var-exp cdr)
                                                                ((var-exp
                                                                   datum)))))
                                                           (lit-exp (()))
                                                           (app-exp
                                                             (var-exp map)
                                                             ((var-exp
                                                                parse-expression)
                                                               (app-exp
                                                                 (var-exp cdr)
                                                                 ((var-exp
                                                                    datum)))))))))
                                                   ())))))))))))))))
                     ())))))))
       ())
     ((+ 1 2))
     (((exp) . #((+ 1 2)))))
| | (apply-proc (primitive null?) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc null? ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive symbol?) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc symbol? ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive number?) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc number? ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive string?) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc string? ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive boolean?) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc boolean? ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive vector?) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc vector? ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive pair?) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc pair? ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | #t
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive eq?) (+ quote) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc eq? (+ quote) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ lambda) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ lambda) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ set!) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ set!) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ letrec) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ letrec) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ let*) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ let*) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ let) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ let) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ if) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ if) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ begin) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ begin) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ while) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ while) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ and) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ and) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ or) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ or) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ cond) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ cond) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ case) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ case) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc (primitive equal?) (+ define) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc equal? (+ define) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive cdr) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc cdr ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (1 2)
| | (apply-proc (primitive list?) ((1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc list? ((1 2)) (((datum) . #((+ 1 2)))))
| | #t
| | (apply-proc (primitive not) (#t) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc not (#t) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive cdr) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc cdr ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (1 2)
| | (apply-proc (primitive null?) ((1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc null? ((1 2)) (((datum) . #((+ 1 2)))))
| | #f
| | (apply-proc (primitive cdr) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc cdr ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (1 2)
| | (apply-proc
      (primitive map)
      ((closure-record
         (datum)
         (if-exp
           (app-exp (var-exp null?) ((var-exp datum)))
           (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
           (if-exp
             (app-exp (var-exp symbol?) ((var-exp datum)))
             (app-exp (var-exp list) ((lit-exp var-exp) (var-exp datum)))
             (if-exp
               (app-exp (var-exp number?) ((var-exp datum)))
               (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
               (if-exp
                 (app-exp (var-exp string?) ((var-exp datum)))
                 (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                 (if-exp
                   (app-exp (var-exp boolean?) ((var-exp datum)))
                   (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                   (if-exp
                     (app-exp (var-exp vector?) ((var-exp datum)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp lit-exp) (var-exp datum)))
                     (if-exp
                       (app-exp (var-exp pair?) ((var-exp datum)))
                       (if-exp
                         (app-exp
                           (var-exp eq?)
                           ((app-exp (var-exp car) ((var-exp datum)))
                             (lit-exp quote)))
                         (app-exp
                           (var-exp list)
                           ((lit-exp lit-exp)
                             (app-exp (var-exp cadr) ((var-exp datum)))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp datum)))
                               (lit-exp lambda)))
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp
                                 (var-exp param-list)
                                 ((app-exp (var-exp cadr) ((var-exp datum)))))
                               (if-exp
                                 (app-exp
                                   (var-exp =)
                                   ((app-exp
                                      (var-exp length)
                                      ((app-exp
                                         (var-exp cddr)
                                         ((var-exp datum)))))
                                     (lit-exp 1)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp begin-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp cddr)
                                           ((var-exp datum))))))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp datum)))
                                 (lit-exp set!)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp set!-exp)
                                 (app-exp (var-exp cadr) ((var-exp datum)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp datum)))
                                   (lit-exp letrec)))
                               (if-exp
                                 (app-exp
                                   (var-exp valid?)
                                   ((app-exp (var-exp cadr) ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp letrec-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp car)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))))
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp cadr)
                                             (app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp begin-exp)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp cddr)
                                               ((var-exp datum)))))))))
                                 (lit-exp ()))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp datum)))
                                     (lit-exp let*)))
                                 (if-exp
                                   (app-exp
                                     (var-exp valid?)
                                     ((app-exp
                                        (var-exp cadr)
                                        ((var-exp datum)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp let*-exp)
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp car)
                                           (app-exp
                                             (var-exp cadr)
                                             ((var-exp datum)))))
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp parse-expression)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp cadr)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cddr)
                                                 ((var-exp datum)))))))))
                                   (lit-exp ()))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp datum)))
                                       (lit-exp let)))
                                   (if-exp
                                     (app-exp
                                       (var-exp list?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp datum)))))
                                     (if-exp
                                       (app-exp
                                         (lambda-exp
                                           (sys-var tempVal)
                                           (if-exp
                                             (var-exp (sys-var tempVal))
                                             (var-exp (sys-var tempVal))
                                             (lit-exp #t)))
                                         ((app-exp
                                            (var-exp valid?)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp let-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp car)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp cadr)
                                                   (app-exp
                                                     (var-exp cadr)
                                                     ((var-exp datum)))))))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp begin-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cddr)
                                                     ((var-exp datum)))))))))
                                       (lit-exp ()))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp named-let-exp)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp car)
                                             (app-exp
                                               (var-exp caddr)
                                               ((var-exp datum)))))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp cadr)
                                                 (app-exp
                                                   (var-exp caddr)
                                                   ((var-exp datum)))))))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp begin-exp)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp parse-expression)
                                                 (app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp datum))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp
                                          (var-exp car)
                                          ((var-exp datum)))
                                         (lit-exp if)))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp if-exp)
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp datum)))))
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp datum)))))
                                         (if-exp
                                           (app-exp
                                             (var-exp null?)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp datum)))))
                                           (lit-exp ())
                                           (app-exp
                                             (var-exp parse-expression)
                                             ((app-exp
                                                (var-exp cadddr)
                                                ((var-exp datum))))))))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp datum)))
                                           (lit-exp begin)))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cdr)
                                                 ((var-exp datum)))))))
                                       (if-exp
                                         (app-exp
                                           (var-exp equal?)
                                           ((app-exp
                                              (var-exp car)
                                              ((var-exp datum)))
                                             (lit-exp while)))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp while-exp)
                                             (app-exp
                                               (var-exp parse-expression)
                                               ((app-exp
                                                  (var-exp cadr)
                                                  ((var-exp datum)))))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp begin-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cddr)
                                                       ((var-exp datum)))))))))
                                         (if-exp
                                           (app-exp
                                             (var-exp equal?)
                                             ((app-exp
                                                (var-exp car)
                                                ((var-exp datum)))
                                               (lit-exp and)))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp and-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cdr)
                                                     ((var-exp datum)))))))
                                           (if-exp
                                             (app-exp
                                               (var-exp equal?)
                                               ((app-exp
                                                  (var-exp car)
                                                  ((var-exp datum)))
                                                 (lit-exp or)))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp or-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cdr)
                                                       ((var-exp datum)))))))
                                             (if-exp
                                               (app-exp
                                                 (var-exp equal?)
                                                 ((app-exp
                                                    (var-exp car)
                                                    ((var-exp datum)))
                                                   (lit-exp cond)))
                                               (app-exp
                                                 (var-exp list)
                                                 ((lit-exp cond-exp)
                                                   (app-exp
                                                     (var-exp map)
                                                     ((var-exp cd-lambda)
                                                       (app-exp
                                                         (var-exp cdr)
                                                         ((var-exp datum)))))))
                                               (if-exp
                                                 (app-exp
                                                   (var-exp equal?)
                                                   ((app-exp
                                                      (var-exp car)
                                                      ((var-exp datum)))
                                                     (lit-exp case)))
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp case-exp)
                                                     (app-exp
                                                       (var-exp
                                                         parse-expression)
                                                       ((app-exp
                                                          (var-exp cadr)
                                                          ((var-exp datum)))))
                                                     (app-exp
                                                       (var-exp map)
                                                       ((lambda-exp
                                                          (ls)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((if-exp
                                                               (app-exp
                                                                 (var-exp
                                                                   equal?)
                                                                 ((lit-exp else)
                                                                   (app-exp
                                                                     (var-exp
                                                                       car)
                                                                     ((var-exp
                                                                        ls)))))
                                                               (app-exp
                                                                 (var-exp list)
                                                                 ((app-exp
                                                                    (var-exp
                                                                      parse-expression)
                                                                    ((app-exp
                                                                       (var-exp
                                                                         cadr)
                                                                       ((var-exp
                                                                          datum)))))))
                                                               (if-exp
                                                                 (app-exp
                                                                   (var-exp
                                                                     atom?)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        car)
                                                                      ((var-exp
                                                                         ls)))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     list)
                                                                   ((lit-exp
                                                                      lit-exp)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))
                                                                 (app-exp
                                                                   (var-exp map)
                                                                   ((var-exp
                                                                      parse-expression)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))))
                                                              (app-exp
                                                                (var-exp
                                                                  parse-expression)
                                                                ((app-exp
                                                                   (var-exp
                                                                     cadr)
                                                                   ((var-exp
                                                                      ls))))))))
                                                         (app-exp
                                                           (var-exp cddr)
                                                           ((var-exp
                                                              datum)))))))
                                                 (if-exp
                                                   (app-exp
                                                     (var-exp equal?)
                                                     ((app-exp
                                                        (var-exp car)
                                                        ((var-exp datum)))
                                                       (lit-exp define)))
                                                   (app-exp
                                                     (var-exp list)
                                                     ((lit-exp define-exp)
                                                       (app-exp
                                                         (var-exp cadr)
                                                         ((var-exp datum)))
                                                       (app-exp
                                                         (var-exp
                                                           parse-expression)
                                                         ((app-exp
                                                            (var-exp caddr)
                                                            ((var-exp
                                                               datum)))))))
                                                   (if-exp
                                                     (lit-exp #t)
                                                     (if-exp
                                                       (app-exp
                                                         (var-exp not)
                                                         ((app-exp
                                                            (var-exp list?)
                                                            ((app-exp
                                                               (var-exp cdr)
                                                               ((var-exp
                                                                  datum)))))))
                                                       (lit-exp (()))
                                                       (app-exp
                                                         (var-exp list)
                                                         ((lit-exp app-exp)
                                                           (app-exp
                                                             (var-exp
                                                               parse-expression)
                                                             ((app-exp
                                                                (var-exp car)
                                                                ((var-exp
                                                                   datum)))))
                                                           (if-exp
                                                             (app-exp
                                                               (var-exp null?)
                                                               ((app-exp
                                                                  (var-exp cdr)
                                                                  ((var-exp
                                                                     datum)))))
                                                             (lit-exp (()))
                                                             (app-exp
                                                               (var-exp map)
                                                               ((var-exp
                                                                  parse-expression)
                                                                 (app-exp
                                                                   (var-exp cdr)
                                                                   ((var-exp
                                                                      datum)))))))))
                                                     ())))))))))))))))
                       ())))))))
         ())
        (1 2))
      (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc
      map
      ((closure-record
         (datum)
         (if-exp
           (app-exp (var-exp null?) ((var-exp datum)))
           (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
           (if-exp
             (app-exp (var-exp symbol?) ((var-exp datum)))
             (app-exp (var-exp list) ((lit-exp var-exp) (var-exp datum)))
             (if-exp
               (app-exp (var-exp number?) ((var-exp datum)))
               (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
               (if-exp
                 (app-exp (var-exp string?) ((var-exp datum)))
                 (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                 (if-exp
                   (app-exp (var-exp boolean?) ((var-exp datum)))
                   (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                   (if-exp
                     (app-exp (var-exp vector?) ((var-exp datum)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp lit-exp) (var-exp datum)))
                     (if-exp
                       (app-exp (var-exp pair?) ((var-exp datum)))
                       (if-exp
                         (app-exp
                           (var-exp eq?)
                           ((app-exp (var-exp car) ((var-exp datum)))
                             (lit-exp quote)))
                         (app-exp
                           (var-exp list)
                           ((lit-exp lit-exp)
                             (app-exp (var-exp cadr) ((var-exp datum)))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp datum)))
                               (lit-exp lambda)))
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp
                                 (var-exp param-list)
                                 ((app-exp (var-exp cadr) ((var-exp datum)))))
                               (if-exp
                                 (app-exp
                                   (var-exp =)
                                   ((app-exp
                                      (var-exp length)
                                      ((app-exp
                                         (var-exp cddr)
                                         ((var-exp datum)))))
                                     (lit-exp 1)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp begin-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp cddr)
                                           ((var-exp datum))))))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp datum)))
                                 (lit-exp set!)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp set!-exp)
                                 (app-exp (var-exp cadr) ((var-exp datum)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp datum)))
                                   (lit-exp letrec)))
                               (if-exp
                                 (app-exp
                                   (var-exp valid?)
                                   ((app-exp (var-exp cadr) ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp letrec-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp car)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))))
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp cadr)
                                             (app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp begin-exp)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp cddr)
                                               ((var-exp datum)))))))))
                                 (lit-exp ()))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp datum)))
                                     (lit-exp let*)))
                                 (if-exp
                                   (app-exp
                                     (var-exp valid?)
                                     ((app-exp
                                        (var-exp cadr)
                                        ((var-exp datum)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp let*-exp)
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp car)
                                           (app-exp
                                             (var-exp cadr)
                                             ((var-exp datum)))))
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp parse-expression)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp cadr)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cddr)
                                                 ((var-exp datum)))))))))
                                   (lit-exp ()))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp datum)))
                                       (lit-exp let)))
                                   (if-exp
                                     (app-exp
                                       (var-exp list?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp datum)))))
                                     (if-exp
                                       (app-exp
                                         (lambda-exp
                                           (sys-var tempVal)
                                           (if-exp
                                             (var-exp (sys-var tempVal))
                                             (var-exp (sys-var tempVal))
                                             (lit-exp #t)))
                                         ((app-exp
                                            (var-exp valid?)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp let-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp car)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp cadr)
                                                   (app-exp
                                                     (var-exp cadr)
                                                     ((var-exp datum)))))))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp begin-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cddr)
                                                     ((var-exp datum)))))))))
                                       (lit-exp ()))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp named-let-exp)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp car)
                                             (app-exp
                                               (var-exp caddr)
                                               ((var-exp datum)))))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp cadr)
                                                 (app-exp
                                                   (var-exp caddr)
                                                   ((var-exp datum)))))))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp begin-exp)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp parse-expression)
                                                 (app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp datum))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp
                                          (var-exp car)
                                          ((var-exp datum)))
                                         (lit-exp if)))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp if-exp)
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp datum)))))
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp datum)))))
                                         (if-exp
                                           (app-exp
                                             (var-exp null?)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp datum)))))
                                           (lit-exp ())
                                           (app-exp
                                             (var-exp parse-expression)
                                             ((app-exp
                                                (var-exp cadddr)
                                                ((var-exp datum))))))))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp datum)))
                                           (lit-exp begin)))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cdr)
                                                 ((var-exp datum)))))))
                                       (if-exp
                                         (app-exp
                                           (var-exp equal?)
                                           ((app-exp
                                              (var-exp car)
                                              ((var-exp datum)))
                                             (lit-exp while)))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp while-exp)
                                             (app-exp
                                               (var-exp parse-expression)
                                               ((app-exp
                                                  (var-exp cadr)
                                                  ((var-exp datum)))))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp begin-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cddr)
                                                       ((var-exp datum)))))))))
                                         (if-exp
                                           (app-exp
                                             (var-exp equal?)
                                             ((app-exp
                                                (var-exp car)
                                                ((var-exp datum)))
                                               (lit-exp and)))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp and-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cdr)
                                                     ((var-exp datum)))))))
                                           (if-exp
                                             (app-exp
                                               (var-exp equal?)
                                               ((app-exp
                                                  (var-exp car)
                                                  ((var-exp datum)))
                                                 (lit-exp or)))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp or-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cdr)
                                                       ((var-exp datum)))))))
                                             (if-exp
                                               (app-exp
                                                 (var-exp equal?)
                                                 ((app-exp
                                                    (var-exp car)
                                                    ((var-exp datum)))
                                                   (lit-exp cond)))
                                               (app-exp
                                                 (var-exp list)
                                                 ((lit-exp cond-exp)
                                                   (app-exp
                                                     (var-exp map)
                                                     ((var-exp cd-lambda)
                                                       (app-exp
                                                         (var-exp cdr)
                                                         ((var-exp datum)))))))
                                               (if-exp
                                                 (app-exp
                                                   (var-exp equal?)
                                                   ((app-exp
                                                      (var-exp car)
                                                      ((var-exp datum)))
                                                     (lit-exp case)))
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp case-exp)
                                                     (app-exp
                                                       (var-exp
                                                         parse-expression)
                                                       ((app-exp
                                                          (var-exp cadr)
                                                          ((var-exp datum)))))
                                                     (app-exp
                                                       (var-exp map)
                                                       ((lambda-exp
                                                          (ls)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((if-exp
                                                               (app-exp
                                                                 (var-exp
                                                                   equal?)
                                                                 ((lit-exp else)
                                                                   (app-exp
                                                                     (var-exp
                                                                       car)
                                                                     ((var-exp
                                                                        ls)))))
                                                               (app-exp
                                                                 (var-exp list)
                                                                 ((app-exp
                                                                    (var-exp
                                                                      parse-expression)
                                                                    ((app-exp
                                                                       (var-exp
                                                                         cadr)
                                                                       ((var-exp
                                                                          datum)))))))
                                                               (if-exp
                                                                 (app-exp
                                                                   (var-exp
                                                                     atom?)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        car)
                                                                      ((var-exp
                                                                         ls)))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     list)
                                                                   ((lit-exp
                                                                      lit-exp)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))
                                                                 (app-exp
                                                                   (var-exp map)
                                                                   ((var-exp
                                                                      parse-expression)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))))
                                                              (app-exp
                                                                (var-exp
                                                                  parse-expression)
                                                                ((app-exp
                                                                   (var-exp
                                                                     cadr)
                                                                   ((var-exp
                                                                      ls))))))))
                                                         (app-exp
                                                           (var-exp cddr)
                                                           ((var-exp
                                                              datum)))))))
                                                 (if-exp
                                                   (app-exp
                                                     (var-exp equal?)
                                                     ((app-exp
                                                        (var-exp car)
                                                        ((var-exp datum)))
                                                       (lit-exp define)))
                                                   (app-exp
                                                     (var-exp list)
                                                     ((lit-exp define-exp)
                                                       (app-exp
                                                         (var-exp cadr)
                                                         ((var-exp datum)))
                                                       (app-exp
                                                         (var-exp
                                                           parse-expression)
                                                         ((app-exp
                                                            (var-exp caddr)
                                                            ((var-exp
                                                               datum)))))))
                                                   (if-exp
                                                     (lit-exp #t)
                                                     (if-exp
                                                       (app-exp
                                                         (var-exp not)
                                                         ((app-exp
                                                            (var-exp list?)
                                                            ((app-exp
                                                               (var-exp cdr)
                                                               ((var-exp
                                                                  datum)))))))
                                                       (lit-exp (()))
                                                       (app-exp
                                                         (var-exp list)
                                                         ((lit-exp app-exp)
                                                           (app-exp
                                                             (var-exp
                                                               parse-expression)
                                                             ((app-exp
                                                                (var-exp car)
                                                                ((var-exp
                                                                   datum)))))
                                                           (if-exp
                                                             (app-exp
                                                               (var-exp null?)
                                                               ((app-exp
                                                                  (var-exp cdr)
                                                                  ((var-exp
                                                                     datum)))))
                                                             (lit-exp (()))
                                                             (app-exp
                                                               (var-exp map)
                                                               ((var-exp
                                                                  parse-expression)
                                                                 (app-exp
                                                                   (var-exp cdr)
                                                                   ((var-exp
                                                                      datum)))))))))
                                                     ())))))))))))))))
                       ())))))))
         ())
        (1 2))
      (((datum) . #((+ 1 2)))))
| | |(apply-proc
       (closure-record
         (datum)
         (if-exp
           (app-exp (var-exp null?) ((var-exp datum)))
           (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
           (if-exp
             (app-exp (var-exp symbol?) ((var-exp datum)))
             (app-exp (var-exp list) ((lit-exp var-exp) (var-exp datum)))
             (if-exp
               (app-exp (var-exp number?) ((var-exp datum)))
               (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
               (if-exp
                 (app-exp (var-exp string?) ((var-exp datum)))
                 (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                 (if-exp
                   (app-exp (var-exp boolean?) ((var-exp datum)))
                   (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                   (if-exp
                     (app-exp (var-exp vector?) ((var-exp datum)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp lit-exp) (var-exp datum)))
                     (if-exp
                       (app-exp (var-exp pair?) ((var-exp datum)))
                       (if-exp
                         (app-exp
                           (var-exp eq?)
                           ((app-exp (var-exp car) ((var-exp datum)))
                             (lit-exp quote)))
                         (app-exp
                           (var-exp list)
                           ((lit-exp lit-exp)
                             (app-exp (var-exp cadr) ((var-exp datum)))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp datum)))
                               (lit-exp lambda)))
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp
                                 (var-exp param-list)
                                 ((app-exp (var-exp cadr) ((var-exp datum)))))
                               (if-exp
                                 (app-exp
                                   (var-exp =)
                                   ((app-exp
                                      (var-exp length)
                                      ((app-exp
                                         (var-exp cddr)
                                         ((var-exp datum)))))
                                     (lit-exp 1)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp begin-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp cddr)
                                           ((var-exp datum))))))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp datum)))
                                 (lit-exp set!)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp set!-exp)
                                 (app-exp (var-exp cadr) ((var-exp datum)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp datum)))
                                   (lit-exp letrec)))
                               (if-exp
                                 (app-exp
                                   (var-exp valid?)
                                   ((app-exp (var-exp cadr) ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp letrec-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp car)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))))
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp cadr)
                                             (app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp begin-exp)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp cddr)
                                               ((var-exp datum)))))))))
                                 (lit-exp ()))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp datum)))
                                     (lit-exp let*)))
                                 (if-exp
                                   (app-exp
                                     (var-exp valid?)
                                     ((app-exp
                                        (var-exp cadr)
                                        ((var-exp datum)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp let*-exp)
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp car)
                                           (app-exp
                                             (var-exp cadr)
                                             ((var-exp datum)))))
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp parse-expression)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp cadr)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cddr)
                                                 ((var-exp datum)))))))))
                                   (lit-exp ()))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp datum)))
                                       (lit-exp let)))
                                   (if-exp
                                     (app-exp
                                       (var-exp list?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp datum)))))
                                     (if-exp
                                       (app-exp
                                         (lambda-exp
                                           (sys-var tempVal)
                                           (if-exp
                                             (var-exp (sys-var tempVal))
                                             (var-exp (sys-var tempVal))
                                             (lit-exp #t)))
                                         ((app-exp
                                            (var-exp valid?)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp let-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp car)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp cadr)
                                                   (app-exp
                                                     (var-exp cadr)
                                                     ((var-exp datum)))))))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp begin-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cddr)
                                                     ((var-exp datum)))))))))
                                       (lit-exp ()))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp named-let-exp)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp car)
                                             (app-exp
                                               (var-exp caddr)
                                               ((var-exp datum)))))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp cadr)
                                                 (app-exp
                                                   (var-exp caddr)
                                                   ((var-exp datum)))))))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp begin-exp)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp parse-expression)
                                                 (app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp datum))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp
                                          (var-exp car)
                                          ((var-exp datum)))
                                         (lit-exp if)))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp if-exp)
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp datum)))))
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp datum)))))
                                         (if-exp
                                           (app-exp
                                             (var-exp null?)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp datum)))))
                                           (lit-exp ())
                                           (app-exp
                                             (var-exp parse-expression)
                                             ((app-exp
                                                (var-exp cadddr)
                                                ((var-exp datum))))))))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp datum)))
                                           (lit-exp begin)))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cdr)
                                                 ((var-exp datum)))))))
                                       (if-exp
                                         (app-exp
                                           (var-exp equal?)
                                           ((app-exp
                                              (var-exp car)
                                              ((var-exp datum)))
                                             (lit-exp while)))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp while-exp)
                                             (app-exp
                                               (var-exp parse-expression)
                                               ((app-exp
                                                  (var-exp cadr)
                                                  ((var-exp datum)))))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp begin-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cddr)
                                                       ((var-exp datum)))))))))
                                         (if-exp
                                           (app-exp
                                             (var-exp equal?)
                                             ((app-exp
                                                (var-exp car)
                                                ((var-exp datum)))
                                               (lit-exp and)))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp and-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cdr)
                                                     ((var-exp datum)))))))
                                           (if-exp
                                             (app-exp
                                               (var-exp equal?)
                                               ((app-exp
                                                  (var-exp car)
                                                  ((var-exp datum)))
                                                 (lit-exp or)))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp or-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cdr)
                                                       ((var-exp datum)))))))
                                             (if-exp
                                               (app-exp
                                                 (var-exp equal?)
                                                 ((app-exp
                                                    (var-exp car)
                                                    ((var-exp datum)))
                                                   (lit-exp cond)))
                                               (app-exp
                                                 (var-exp list)
                                                 ((lit-exp cond-exp)
                                                   (app-exp
                                                     (var-exp map)
                                                     ((var-exp cd-lambda)
                                                       (app-exp
                                                         (var-exp cdr)
                                                         ((var-exp datum)))))))
                                               (if-exp
                                                 (app-exp
                                                   (var-exp equal?)
                                                   ((app-exp
                                                      (var-exp car)
                                                      ((var-exp datum)))
                                                     (lit-exp case)))
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp case-exp)
                                                     (app-exp
                                                       (var-exp
                                                         parse-expression)
                                                       ((app-exp
                                                          (var-exp cadr)
                                                          ((var-exp datum)))))
                                                     (app-exp
                                                       (var-exp map)
                                                       ((lambda-exp
                                                          (ls)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((if-exp
                                                               (app-exp
                                                                 (var-exp
                                                                   equal?)
                                                                 ((lit-exp else)
                                                                   (app-exp
                                                                     (var-exp
                                                                       car)
                                                                     ((var-exp
                                                                        ls)))))
                                                               (app-exp
                                                                 (var-exp list)
                                                                 ((app-exp
                                                                    (var-exp
                                                                      parse-expression)
                                                                    ((app-exp
                                                                       (var-exp
                                                                         cadr)
                                                                       ((var-exp
                                                                          datum)))))))
                                                               (if-exp
                                                                 (app-exp
                                                                   (var-exp
                                                                     atom?)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        car)
                                                                      ((var-exp
                                                                         ls)))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     list)
                                                                   ((lit-exp
                                                                      lit-exp)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))
                                                                 (app-exp
                                                                   (var-exp map)
                                                                   ((var-exp
                                                                      parse-expression)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))))
                                                              (app-exp
                                                                (var-exp
                                                                  parse-expression)
                                                                ((app-exp
                                                                   (var-exp
                                                                     cadr)
                                                                   ((var-exp
                                                                      ls))))))))
                                                         (app-exp
                                                           (var-exp cddr)
                                                           ((var-exp
                                                              datum)))))))
                                                 (if-exp
                                                   (app-exp
                                                     (var-exp equal?)
                                                     ((app-exp
                                                        (var-exp car)
                                                        ((var-exp datum)))
                                                       (lit-exp define)))
                                                   (app-exp
                                                     (var-exp list)
                                                     ((lit-exp define-exp)
                                                       (app-exp
                                                         (var-exp cadr)
                                                         ((var-exp datum)))
                                                       (app-exp
                                                         (var-exp
                                                           parse-expression)
                                                         ((app-exp
                                                            (var-exp caddr)
                                                            ((var-exp
                                                               datum)))))))
                                                   (if-exp
                                                     (lit-exp #t)
                                                     (if-exp
                                                       (app-exp
                                                         (var-exp not)
                                                         ((app-exp
                                                            (var-exp list?)
                                                            ((app-exp
                                                               (var-exp cdr)
                                                               ((var-exp
                                                                  datum)))))))
                                                       (lit-exp (()))
                                                       (app-exp
                                                         (var-exp list)
                                                         ((lit-exp app-exp)
                                                           (app-exp
                                                             (var-exp
                                                               parse-expression)
                                                             ((app-exp
                                                                (var-exp car)
                                                                ((var-exp
                                                                   datum)))))
                                                           (if-exp
                                                             (app-exp
                                                               (var-exp null?)
                                                               ((app-exp
                                                                  (var-exp cdr)
                                                                  ((var-exp
                                                                     datum)))))
                                                             (lit-exp (()))
                                                             (app-exp
                                                               (var-exp map)
                                                               ((var-exp
                                                                  parse-expression)
                                                                 (app-exp
                                                                   (var-exp cdr)
                                                                   ((var-exp
                                                                      datum)))))))))
                                                     ())))))))))))))))
                       ())))))))
         ())
       (2)
       (((datum) . #((+ 1 2)))))
| | | (apply-proc (primitive null?) (2) (((datum) . #(2))))
| | | (apply-primitive-proc null? (2) (((datum) . #(2))))
| | | #f
| | | (apply-proc (primitive symbol?) (2) (((datum) . #(2))))
| | | (apply-primitive-proc symbol? (2) (((datum) . #(2))))
| | | #f
| | | (apply-proc (primitive number?) (2) (((datum) . #(2))))
| | | (apply-primitive-proc number? (2) (((datum) . #(2))))
| | | #t
| | |(apply-proc (primitive list) (lit-exp 2) (((datum) . #(2))))
| | |(apply-primitive-proc list (lit-exp 2) (((datum) . #(2))))
| | |(lit-exp 2)
| | |(apply-proc
       (closure-record
         (datum)
         (if-exp
           (app-exp (var-exp null?) ((var-exp datum)))
           (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
           (if-exp
             (app-exp (var-exp symbol?) ((var-exp datum)))
             (app-exp (var-exp list) ((lit-exp var-exp) (var-exp datum)))
             (if-exp
               (app-exp (var-exp number?) ((var-exp datum)))
               (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
               (if-exp
                 (app-exp (var-exp string?) ((var-exp datum)))
                 (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                 (if-exp
                   (app-exp (var-exp boolean?) ((var-exp datum)))
                   (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                   (if-exp
                     (app-exp (var-exp vector?) ((var-exp datum)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp lit-exp) (var-exp datum)))
                     (if-exp
                       (app-exp (var-exp pair?) ((var-exp datum)))
                       (if-exp
                         (app-exp
                           (var-exp eq?)
                           ((app-exp (var-exp car) ((var-exp datum)))
                             (lit-exp quote)))
                         (app-exp
                           (var-exp list)
                           ((lit-exp lit-exp)
                             (app-exp (var-exp cadr) ((var-exp datum)))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp datum)))
                               (lit-exp lambda)))
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp
                                 (var-exp param-list)
                                 ((app-exp (var-exp cadr) ((var-exp datum)))))
                               (if-exp
                                 (app-exp
                                   (var-exp =)
                                   ((app-exp
                                      (var-exp length)
                                      ((app-exp
                                         (var-exp cddr)
                                         ((var-exp datum)))))
                                     (lit-exp 1)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp begin-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp cddr)
                                           ((var-exp datum))))))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp datum)))
                                 (lit-exp set!)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp set!-exp)
                                 (app-exp (var-exp cadr) ((var-exp datum)))
                                 (app-exp
                                   (var-exp parse-expression)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp datum)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp datum)))
                                   (lit-exp letrec)))
                               (if-exp
                                 (app-exp
                                   (var-exp valid?)
                                   ((app-exp (var-exp cadr) ((var-exp datum)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp letrec-exp)
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp car)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))))
                                     (app-exp
                                       (var-exp map)
                                       ((var-exp parse-expression)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp cadr)
                                             (app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp begin-exp)
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp cddr)
                                               ((var-exp datum)))))))))
                                 (lit-exp ()))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp datum)))
                                     (lit-exp let*)))
                                 (if-exp
                                   (app-exp
                                     (var-exp valid?)
                                     ((app-exp
                                        (var-exp cadr)
                                        ((var-exp datum)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp let*-exp)
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp car)
                                           (app-exp
                                             (var-exp cadr)
                                             ((var-exp datum)))))
                                       (app-exp
                                         (var-exp map)
                                         ((var-exp parse-expression)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp cadr)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cddr)
                                                 ((var-exp datum)))))))))
                                   (lit-exp ()))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp datum)))
                                       (lit-exp let)))
                                   (if-exp
                                     (app-exp
                                       (var-exp list?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp datum)))))
                                     (if-exp
                                       (app-exp
                                         (lambda-exp
                                           (sys-var tempVal)
                                           (if-exp
                                             (var-exp (sys-var tempVal))
                                             (var-exp (sys-var tempVal))
                                             (lit-exp #t)))
                                         ((app-exp
                                            (var-exp valid?)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp datum)))))))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp let-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp car)
                                               (app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp cadr)
                                                   (app-exp
                                                     (var-exp cadr)
                                                     ((var-exp datum)))))))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp begin-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cddr)
                                                     ((var-exp datum)))))))))
                                       (lit-exp ()))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp named-let-exp)
                                         (app-exp
                                           (var-exp cadr)
                                           ((var-exp datum)))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp car)
                                             (app-exp
                                               (var-exp caddr)
                                               ((var-exp datum)))))
                                         (app-exp
                                           (var-exp map)
                                           ((var-exp parse-expression)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp cadr)
                                                 (app-exp
                                                   (var-exp caddr)
                                                   ((var-exp datum)))))))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp begin-exp)
                                             (app-exp
                                               (var-exp map)
                                               ((var-exp parse-expression)
                                                 (app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp datum))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp
                                          (var-exp car)
                                          ((var-exp datum)))
                                         (lit-exp if)))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp if-exp)
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp datum)))))
                                         (app-exp
                                           (var-exp parse-expression)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp datum)))))
                                         (if-exp
                                           (app-exp
                                             (var-exp null?)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp datum)))))
                                           (lit-exp ())
                                           (app-exp
                                             (var-exp parse-expression)
                                             ((app-exp
                                                (var-exp cadddr)
                                                ((var-exp datum))))))))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp datum)))
                                           (lit-exp begin)))
                                       (app-exp
                                         (var-exp list)
                                         ((lit-exp begin-exp)
                                           (app-exp
                                             (var-exp map)
                                             ((var-exp parse-expression)
                                               (app-exp
                                                 (var-exp cdr)
                                                 ((var-exp datum)))))))
                                       (if-exp
                                         (app-exp
                                           (var-exp equal?)
                                           ((app-exp
                                              (var-exp car)
                                              ((var-exp datum)))
                                             (lit-exp while)))
                                         (app-exp
                                           (var-exp list)
                                           ((lit-exp while-exp)
                                             (app-exp
                                               (var-exp parse-expression)
                                               ((app-exp
                                                  (var-exp cadr)
                                                  ((var-exp datum)))))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp begin-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cddr)
                                                       ((var-exp datum)))))))))
                                         (if-exp
                                           (app-exp
                                             (var-exp equal?)
                                             ((app-exp
                                                (var-exp car)
                                                ((var-exp datum)))
                                               (lit-exp and)))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp and-exp)
                                               (app-exp
                                                 (var-exp map)
                                                 ((var-exp parse-expression)
                                                   (app-exp
                                                     (var-exp cdr)
                                                     ((var-exp datum)))))))
                                           (if-exp
                                             (app-exp
                                               (var-exp equal?)
                                               ((app-exp
                                                  (var-exp car)
                                                  ((var-exp datum)))
                                                 (lit-exp or)))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp or-exp)
                                                 (app-exp
                                                   (var-exp map)
                                                   ((var-exp parse-expression)
                                                     (app-exp
                                                       (var-exp cdr)
                                                       ((var-exp datum)))))))
                                             (if-exp
                                               (app-exp
                                                 (var-exp equal?)
                                                 ((app-exp
                                                    (var-exp car)
                                                    ((var-exp datum)))
                                                   (lit-exp cond)))
                                               (app-exp
                                                 (var-exp list)
                                                 ((lit-exp cond-exp)
                                                   (app-exp
                                                     (var-exp map)
                                                     ((var-exp cd-lambda)
                                                       (app-exp
                                                         (var-exp cdr)
                                                         ((var-exp datum)))))))
                                               (if-exp
                                                 (app-exp
                                                   (var-exp equal?)
                                                   ((app-exp
                                                      (var-exp car)
                                                      ((var-exp datum)))
                                                     (lit-exp case)))
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp case-exp)
                                                     (app-exp
                                                       (var-exp
                                                         parse-expression)
                                                       ((app-exp
                                                          (var-exp cadr)
                                                          ((var-exp datum)))))
                                                     (app-exp
                                                       (var-exp map)
                                                       ((lambda-exp
                                                          (ls)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((if-exp
                                                               (app-exp
                                                                 (var-exp
                                                                   equal?)
                                                                 ((lit-exp else)
                                                                   (app-exp
                                                                     (var-exp
                                                                       car)
                                                                     ((var-exp
                                                                        ls)))))
                                                               (app-exp
                                                                 (var-exp list)
                                                                 ((app-exp
                                                                    (var-exp
                                                                      parse-expression)
                                                                    ((app-exp
                                                                       (var-exp
                                                                         cadr)
                                                                       ((var-exp
                                                                          datum)))))))
                                                               (if-exp
                                                                 (app-exp
                                                                   (var-exp
                                                                     atom?)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        car)
                                                                      ((var-exp
                                                                         ls)))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     list)
                                                                   ((lit-exp
                                                                      lit-exp)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))
                                                                 (app-exp
                                                                   (var-exp map)
                                                                   ((var-exp
                                                                      parse-expression)
                                                                     (app-exp
                                                                       (var-exp
                                                                         car)
                                                                       ((var-exp
                                                                          ls)))))))
                                                              (app-exp
                                                                (var-exp
                                                                  parse-expression)
                                                                ((app-exp
                                                                   (var-exp
                                                                     cadr)
                                                                   ((var-exp
                                                                      ls))))))))
                                                         (app-exp
                                                           (var-exp cddr)
                                                           ((var-exp
                                                              datum)))))))
                                                 (if-exp
                                                   (app-exp
                                                     (var-exp equal?)
                                                     ((app-exp
                                                        (var-exp car)
                                                        ((var-exp datum)))
                                                       (lit-exp define)))
                                                   (app-exp
                                                     (var-exp list)
                                                     ((lit-exp define-exp)
                                                       (app-exp
                                                         (var-exp cadr)
                                                         ((var-exp datum)))
                                                       (app-exp
                                                         (var-exp
                                                           parse-expression)
                                                         ((app-exp
                                                            (var-exp caddr)
                                                            ((var-exp
                                                               datum)))))))
                                                   (if-exp
                                                     (lit-exp #t)
                                                     (if-exp
                                                       (app-exp
                                                         (var-exp not)
                                                         ((app-exp
                                                            (var-exp list?)
                                                            ((app-exp
                                                               (var-exp cdr)
                                                               ((var-exp
                                                                  datum)))))))
                                                       (lit-exp (()))
                                                       (app-exp
                                                         (var-exp list)
                                                         ((lit-exp app-exp)
                                                           (app-exp
                                                             (var-exp
                                                               parse-expression)
                                                             ((app-exp
                                                                (var-exp car)
                                                                ((var-exp
                                                                   datum)))))
                                                           (if-exp
                                                             (app-exp
                                                               (var-exp null?)
                                                               ((app-exp
                                                                  (var-exp cdr)
                                                                  ((var-exp
                                                                     datum)))))
                                                             (lit-exp (()))
                                                             (app-exp
                                                               (var-exp map)
                                                               ((var-exp
                                                                  parse-expression)
                                                                 (app-exp
                                                                   (var-exp cdr)
                                                                   ((var-exp
                                                                      datum)))))))))
                                                     ())))))))))))))))
                       ())))))))
         ())
       (1)
       (((datum) . #((+ 1 2)))))
| | | (apply-proc (primitive null?) (1) (((datum) . #(1))))
| | | (apply-primitive-proc null? (1) (((datum) . #(1))))
| | | #f
| | | (apply-proc (primitive symbol?) (1) (((datum) . #(1))))
| | | (apply-primitive-proc symbol? (1) (((datum) . #(1))))
| | | #f
| | | (apply-proc (primitive number?) (1) (((datum) . #(1))))
| | | (apply-primitive-proc number? (1) (((datum) . #(1))))
| | | #t
| | |(apply-proc (primitive list) (lit-exp 1) (((datum) . #(1))))
| | |(apply-primitive-proc list (lit-exp 1) (((datum) . #(1))))
| | |(lit-exp 1)
| | ((lit-exp 1) (lit-exp 2))
| | (apply-proc (primitive car) ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | (apply-primitive-proc car ((+ 1 2)) (((datum) . #((+ 1 2)))))
| | +
| | (apply-proc
      (closure-record
        (datum)
        (if-exp
          (app-exp (var-exp null?) ((var-exp datum)))
          (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
          (if-exp
            (app-exp (var-exp symbol?) ((var-exp datum)))
            (app-exp (var-exp list) ((lit-exp var-exp) (var-exp datum)))
            (if-exp
              (app-exp (var-exp number?) ((var-exp datum)))
              (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
              (if-exp
                (app-exp (var-exp string?) ((var-exp datum)))
                (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                (if-exp
                  (app-exp (var-exp boolean?) ((var-exp datum)))
                  (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                  (if-exp
                    (app-exp (var-exp vector?) ((var-exp datum)))
                    (app-exp (var-exp list) ((lit-exp lit-exp) (var-exp datum)))
                    (if-exp
                      (app-exp (var-exp pair?) ((var-exp datum)))
                      (if-exp
                        (app-exp
                          (var-exp eq?)
                          ((app-exp (var-exp car) ((var-exp datum)))
                            (lit-exp quote)))
                        (app-exp
                          (var-exp list)
                          ((lit-exp lit-exp)
                            (app-exp (var-exp cadr) ((var-exp datum)))))
                        (if-exp
                          (app-exp
                            (var-exp equal?)
                            ((app-exp (var-exp car) ((var-exp datum)))
                              (lit-exp lambda)))
                          (app-exp
                            (var-exp list)
                            ((lit-exp lambda-exp)
                              (app-exp
                                (var-exp param-list)
                                ((app-exp (var-exp cadr) ((var-exp datum)))))
                              (if-exp
                                (app-exp
                                  (var-exp =)
                                  ((app-exp
                                     (var-exp length)
                                     ((app-exp
                                        (var-exp cddr)
                                        ((var-exp datum)))))
                                    (lit-exp 1)))
                                (app-exp
                                  (var-exp parse-expression)
                                  ((app-exp (var-exp caddr) ((var-exp datum)))))
                                (app-exp
                                  (var-exp list)
                                  ((lit-exp begin-exp)
                                    (app-exp
                                      (var-exp map)
                                      ((var-exp parse-expression)
                                        (app-exp
                                          (var-exp cddr)
                                          ((var-exp datum))))))))))
                          (if-exp
                            (app-exp
                              (var-exp equal?)
                              ((app-exp (var-exp car) ((var-exp datum)))
                                (lit-exp set!)))
                            (app-exp
                              (var-exp list)
                              ((lit-exp set!-exp)
                                (app-exp (var-exp cadr) ((var-exp datum)))
                                (app-exp
                                  (var-exp parse-expression)
                                  ((app-exp
                                     (var-exp caddr)
                                     ((var-exp datum)))))))
                            (if-exp
                              (app-exp
                                (var-exp equal?)
                                ((app-exp (var-exp car) ((var-exp datum)))
                                  (lit-exp letrec)))
                              (if-exp
                                (app-exp
                                  (var-exp valid?)
                                  ((app-exp (var-exp cadr) ((var-exp datum)))))
                                (app-exp
                                  (var-exp list)
                                  ((lit-exp letrec-exp)
                                    (app-exp
                                      (var-exp map)
                                      ((var-exp car)
                                        (app-exp
                                          (var-exp cadr)
                                          ((var-exp datum)))))
                                    (app-exp
                                      (var-exp map)
                                      ((var-exp parse-expression)
                                        (app-exp
                                          (var-exp map)
                                          ((var-exp cadr)
                                            (app-exp
                                              (var-exp cadr)
                                              ((var-exp datum)))))))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp begin-exp)
                                        (app-exp
                                          (var-exp map)
                                          ((var-exp parse-expression)
                                            (app-exp
                                              (var-exp cddr)
                                              ((var-exp datum)))))))))
                                (lit-exp ()))
                              (if-exp
                                (app-exp
                                  (var-exp equal?)
                                  ((app-exp (var-exp car) ((var-exp datum)))
                                    (lit-exp let*)))
                                (if-exp
                                  (app-exp
                                    (var-exp valid?)
                                    ((app-exp
                                       (var-exp cadr)
                                       ((var-exp datum)))))
                                  (app-exp
                                    (var-exp list)
                                    ((lit-exp let*-exp)
                                      (app-exp
                                        (var-exp map)
                                        ((var-exp car)
                                          (app-exp
                                            (var-exp cadr)
                                            ((var-exp datum)))))
                                      (app-exp
                                        (var-exp map)
                                        ((var-exp parse-expression)
                                          (app-exp
                                            (var-exp map)
                                            ((var-exp cadr)
                                              (app-exp
                                                (var-exp cadr)
                                                ((var-exp datum)))))))
                                      (app-exp
                                        (var-exp list)
                                        ((lit-exp begin-exp)
                                          (app-exp
                                            (var-exp map)
                                            ((var-exp parse-expression)
                                              (app-exp
                                                (var-exp cddr)
                                                ((var-exp datum)))))))))
                                  (lit-exp ()))
                                (if-exp
                                  (app-exp
                                    (var-exp equal?)
                                    ((app-exp (var-exp car) ((var-exp datum)))
                                      (lit-exp let)))
                                  (if-exp
                                    (app-exp
                                      (var-exp list?)
                                      ((app-exp
                                         (var-exp cadr)
                                         ((var-exp datum)))))
                                    (if-exp
                                      (app-exp
                                        (lambda-exp
                                          (sys-var tempVal)
                                          (if-exp
                                            (var-exp (sys-var tempVal))
                                            (var-exp (sys-var tempVal))
                                            (lit-exp #t)))
                                        ((app-exp
                                           (var-exp valid?)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp datum)))))))
                                      (app-exp
                                        (var-exp list)
                                        ((lit-exp let-exp)
                                          (app-exp
                                            (var-exp map)
                                            ((var-exp car)
                                              (app-exp
                                                (var-exp cadr)
                                                ((var-exp datum)))))
                                          (app-exp
                                            (var-exp map)
                                            ((var-exp parse-expression)
                                              (app-exp
                                                (var-exp map)
                                                ((var-exp cadr)
                                                  (app-exp
                                                    (var-exp cadr)
                                                    ((var-exp datum)))))))
                                          (app-exp
                                            (var-exp list)
                                            ((lit-exp begin-exp)
                                              (app-exp
                                                (var-exp map)
                                                ((var-exp parse-expression)
                                                  (app-exp
                                                    (var-exp cddr)
                                                    ((var-exp datum)))))))))
                                      (lit-exp ()))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp named-let-exp)
                                        (app-exp
                                          (var-exp cadr)
                                          ((var-exp datum)))
                                        (app-exp
                                          (var-exp map)
                                          ((var-exp car)
                                            (app-exp
                                              (var-exp caddr)
                                              ((var-exp datum)))))
                                        (app-exp
                                          (var-exp map)
                                          ((var-exp parse-expression)
                                            (app-exp
                                              (var-exp map)
                                              ((var-exp cadr)
                                                (app-exp
                                                  (var-exp caddr)
                                                  ((var-exp datum)))))))
                                        (app-exp
                                          (var-exp list)
                                          ((lit-exp begin-exp)
                                            (app-exp
                                              (var-exp map)
                                              ((var-exp parse-expression)
                                                (app-exp
                                                  (var-exp cdddr)
                                                  ((var-exp datum))))))))))
                                  (if-exp
                                    (app-exp
                                      (var-exp equal?)
                                      ((app-exp (var-exp car) ((var-exp datum)))
                                        (lit-exp if)))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp if-exp)
                                        (app-exp
                                          (var-exp parse-expression)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp datum)))))
                                        (app-exp
                                          (var-exp parse-expression)
                                          ((app-exp
                                             (var-exp caddr)
                                             ((var-exp datum)))))
                                        (if-exp
                                          (app-exp
                                            (var-exp null?)
                                            ((app-exp
                                               (var-exp cdddr)
                                               ((var-exp datum)))))
                                          (lit-exp ())
                                          (app-exp
                                            (var-exp parse-expression)
                                            ((app-exp
                                               (var-exp cadddr)
                                               ((var-exp datum))))))))
                                    (if-exp
                                      (app-exp
                                        (var-exp equal?)
                                        ((app-exp
                                           (var-exp car)
                                           ((var-exp datum)))
                                          (lit-exp begin)))
                                      (app-exp
                                        (var-exp list)
                                        ((lit-exp begin-exp)
                                          (app-exp
                                            (var-exp map)
                                            ((var-exp parse-expression)
                                              (app-exp
                                                (var-exp cdr)
                                                ((var-exp datum)))))))
                                      (if-exp
                                        (app-exp
                                          (var-exp equal?)
                                          ((app-exp
                                             (var-exp car)
                                             ((var-exp datum)))
                                            (lit-exp while)))
                                        (app-exp
                                          (var-exp list)
                                          ((lit-exp while-exp)
                                            (app-exp
                                              (var-exp parse-expression)
                                              ((app-exp
                                                 (var-exp cadr)
                                                 ((var-exp datum)))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp begin-exp)
                                                (app-exp
                                                  (var-exp map)
                                                  ((var-exp parse-expression)
                                                    (app-exp
                                                      (var-exp cddr)
                                                      ((var-exp datum)))))))))
                                        (if-exp
                                          (app-exp
                                            (var-exp equal?)
                                            ((app-exp
                                               (var-exp car)
                                               ((var-exp datum)))
                                              (lit-exp and)))
                                          (app-exp
                                            (var-exp list)
                                            ((lit-exp and-exp)
                                              (app-exp
                                                (var-exp map)
                                                ((var-exp parse-expression)
                                                  (app-exp
                                                    (var-exp cdr)
                                                    ((var-exp datum)))))))
                                          (if-exp
                                            (app-exp
                                              (var-exp equal?)
                                              ((app-exp
                                                 (var-exp car)
                                                 ((var-exp datum)))
                                                (lit-exp or)))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp or-exp)
                                                (app-exp
                                                  (var-exp map)
                                                  ((var-exp parse-expression)
                                                    (app-exp
                                                      (var-exp cdr)
                                                      ((var-exp datum)))))))
                                            (if-exp
                                              (app-exp
                                                (var-exp equal?)
                                                ((app-exp
                                                   (var-exp car)
                                                   ((var-exp datum)))
                                                  (lit-exp cond)))
                                              (app-exp
                                                (var-exp list)
                                                ((lit-exp cond-exp)
                                                  (app-exp
                                                    (var-exp map)
                                                    ((var-exp cd-lambda)
                                                      (app-exp
                                                        (var-exp cdr)
                                                        ((var-exp datum)))))))
                                              (if-exp
                                                (app-exp
                                                  (var-exp equal?)
                                                  ((app-exp
                                                     (var-exp car)
                                                     ((var-exp datum)))
                                                    (lit-exp case)))
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp case-exp)
                                                    (app-exp
                                                      (var-exp parse-expression)
                                                      ((app-exp
                                                         (var-exp cadr)
                                                         ((var-exp datum)))))
                                                    (app-exp
                                                      (var-exp map)
                                                      ((lambda-exp
                                                         (ls)
                                                         (app-exp
                                                           (var-exp list)
                                                           ((if-exp
                                                              (app-exp
                                                                (var-exp equal?)
                                                                ((lit-exp else)
                                                                  (app-exp
                                                                    (var-exp
                                                                      car)
                                                                    ((var-exp
                                                                       ls)))))
                                                              (app-exp
                                                                (var-exp list)
                                                                ((app-exp
                                                                   (var-exp
                                                                     parse-expression)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        cadr)
                                                                      ((var-exp
                                                                         datum)))))))
                                                              (if-exp
                                                                (app-exp
                                                                  (var-exp
                                                                    atom?)
                                                                  ((app-exp
                                                                     (var-exp
                                                                       car)
                                                                     ((var-exp
                                                                        ls)))))
                                                                (app-exp
                                                                  (var-exp list)
                                                                  ((lit-exp
                                                                     lit-exp)
                                                                    (app-exp
                                                                      (var-exp
                                                                        car)
                                                                      ((var-exp
                                                                         ls)))))
                                                                (app-exp
                                                                  (var-exp map)
                                                                  ((var-exp
                                                                     parse-expression)
                                                                    (app-exp
                                                                      (var-exp
                                                                        car)
                                                                      ((var-exp
                                                                         ls)))))))
                                                             (app-exp
                                                               (var-exp
                                                                 parse-expression)
                                                               ((app-exp
                                                                  (var-exp cadr)
                                                                  ((var-exp
                                                                     ls))))))))
                                                        (app-exp
                                                          (var-exp cddr)
                                                          ((var-exp datum)))))))
                                                (if-exp
                                                  (app-exp
                                                    (var-exp equal?)
                                                    ((app-exp
                                                       (var-exp car)
                                                       ((var-exp datum)))
                                                      (lit-exp define)))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp define-exp)
                                                      (app-exp
                                                        (var-exp cadr)
                                                        ((var-exp datum)))
                                                      (app-exp
                                                        (var-exp
                                                          parse-expression)
                                                        ((app-exp
                                                           (var-exp caddr)
                                                           ((var-exp
                                                              datum)))))))
                                                  (if-exp
                                                    (lit-exp #t)
                                                    (if-exp
                                                      (app-exp
                                                        (var-exp not)
                                                        ((app-exp
                                                           (var-exp list?)
                                                           ((app-exp
                                                              (var-exp cdr)
                                                              ((var-exp
                                                                 datum)))))))
                                                      (lit-exp (()))
                                                      (app-exp
                                                        (var-exp list)
                                                        ((lit-exp app-exp)
                                                          (app-exp
                                                            (var-exp
                                                              parse-expression)
                                                            ((app-exp
                                                               (var-exp car)
                                                               ((var-exp
                                                                  datum)))))
                                                          (if-exp
                                                            (app-exp
                                                              (var-exp null?)
                                                              ((app-exp
                                                                 (var-exp cdr)
                                                                 ((var-exp
                                                                    datum)))))
                                                            (lit-exp (()))
                                                            (app-exp
                                                              (var-exp map)
                                                              ((var-exp
                                                                 parse-expression)
                                                                (app-exp
                                                                  (var-exp cdr)
                                                                  ((var-exp
                                                                     datum)))))))))
                                                    ())))))))))))))))
                      ())))))))
        ())
      (+)
      (((datum) . #((+ 1 2)))))
| | |(apply-proc (primitive null?) (+) (((datum) . #(+))))
| | |(apply-primitive-proc null? (+) (((datum) . #(+))))
| | |#f
| | |(apply-proc (primitive symbol?) (+) (((datum) . #(+))))
| | |(apply-primitive-proc symbol? (+) (((datum) . #(+))))
| | |#t
| | (apply-proc (primitive list) (var-exp +) (((datum) . #(+))))
| | (apply-primitive-proc list (var-exp +) (((datum) . #(+))))
| | (var-exp +)
| |(apply-proc
     (primitive list)
     (app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))
     (((datum) . #((+ 1 2)))))
| |(apply-primitive-proc
     list
     (app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))
     (((datum) . #((+ 1 2)))))
| |(app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))
| (apply-proc
    (closure-record
      (parse-tree)
      (app-exp
        (lambda-exp
          (expanded-tree)
          (app-exp
            (lambda-exp (result) (begin-exp ((var-exp result))))
            ((app-exp (var-exp top-level-eval) ((var-exp expanded-tree))))))
        ((app-exp (var-exp expand-syntax) ((var-exp parse-tree)))))
      (((exp) . #((+ 1 2)))))
    ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
    (((exp) . #((+ 1 2)))))
| |(apply-proc
     (closure-record
       (exp)
       (if-exp
         (app-exp (var-exp null?) ((var-exp exp)))
         (lit-exp ())
         (if-exp
           (app-exp
             (var-exp equal?)
             ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lambda-exp)))
           (app-exp
             (var-exp list)
             ((lit-exp lambda-exp)
               (app-exp (var-exp cadr) ((var-exp exp)))
               (app-exp
                 (var-exp expand-syntax)
                 ((app-exp (var-exp caddr) ((var-exp exp)))))))
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
             (app-exp
               (var-exp list)
               ((lit-exp app-exp)
                 (app-exp
                   (var-exp expand-syntax)
                   ((app-exp (var-exp cadr) ((var-exp exp)))))
                 (app-exp
                   (var-exp map)
                   ((var-exp expand-syntax)
                     (app-exp (var-exp caddr) ((var-exp exp)))))))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp if-exp)))
               (app-exp
                 (var-exp list)
                 ((lit-exp if-exp)
                   (app-exp
                     (var-exp expand-syntax)
                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                   (app-exp
                     (var-exp expand-syntax)
                     ((app-exp (var-exp caddr) ((var-exp exp)))))
                   (app-exp
                     (var-exp expand-syntax)
                     ((app-exp
                        (var-exp car)
                        ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp))) (lit-exp set!-exp)))
                 (app-exp
                   (var-exp list)
                   ((lit-exp set!-exp)
                     (app-exp (var-exp cadr) ((var-exp exp)))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp caddr) ((var-exp exp)))))))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp)))
                       (lit-exp letrec-exp)))
                   (app-exp
                     (var-exp list)
                     ((lit-exp letrec-exp)
                       (app-exp (var-exp cadr) ((var-exp exp)))
                       (app-exp
                         (var-exp map)
                         ((var-exp expand-syntax)
                           (app-exp (var-exp caddr) ((var-exp exp)))))
                       (app-exp
                         (var-exp expand-syntax)
                         ((app-exp
                            (var-exp car)
                            ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp let-exp)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp app-exp)
                         (app-exp
                           (var-exp list)
                           ((lit-exp lambda-exp)
                             (app-exp (var-exp cadr) ((var-exp exp)))
                             (app-exp
                               (var-exp expand-syntax)
                               ((app-exp
                                  (var-exp car)
                                  ((app-exp
                                     (var-exp cdddr)
                                     ((var-exp exp)))))))))
                         (app-exp
                           (var-exp map)
                           ((var-exp expand-syntax)
                             (app-exp (var-exp caddr) ((var-exp exp)))))))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp named-let-exp)))
                       (app-exp
                         (var-exp expand-syntax)
                         ((app-exp
                            (var-exp list)
                            ((lit-exp app-exp)
                              (app-exp
                                (var-exp list)
                                ((lit-exp letrec-exp)
                                  (app-exp
                                    (var-exp list)
                                    ((app-exp (var-exp cadr) ((var-exp exp)))))
                                  (app-exp
                                    (var-exp list)
                                    ((app-exp
                                       (var-exp list)
                                       ((lit-exp lambda-exp)
                                         (app-exp
                                           (var-exp caddr)
                                           ((var-exp exp)))
                                         (app-exp
                                           (var-exp cadr)
                                           ((app-exp
                                              (var-exp cdddr)
                                              ((var-exp exp)))))))))
                                  (app-exp
                                    (var-exp list)
                                    ((lit-exp var-exp)
                                      (app-exp
                                        (var-exp cadr)
                                        ((var-exp exp)))))))
                              (app-exp
                                (var-exp car)
                                ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp let*-exp)))
                         (if-exp
                           (if-exp
                             (app-exp
                               (var-exp null?)
                               ((app-exp (var-exp cadr) ((var-exp exp)))))
                             (app-exp
                               (var-exp null?)
                               ((app-exp (var-exp caddr) ((var-exp exp)))))
                             (lit-exp #f))
                           (app-exp
                             (var-exp expand-syntax)
                             ((app-exp
                                (var-exp car)
                                ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                           (if-exp
                             (lit-exp #t)
                             (app-exp
                               (var-exp list)
                               ((lit-exp app-exp)
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp lambda-exp)
                                     (app-exp
                                       (var-exp list)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp list)
                                          ((lit-exp let*-exp)
                                            (app-exp
                                              (var-exp cdr)
                                              ((app-exp
                                                 (var-exp cadr)
                                                 ((var-exp exp)))))
                                            (app-exp
                                              (var-exp cdr)
                                              ((app-exp
                                                 (var-exp caddr)
                                                 ((var-exp exp)))))
                                            (app-exp
                                              (var-exp car)
                                              ((app-exp
                                                 (var-exp cdddr)
                                                 ((var-exp exp)))))))))))
                                 (app-exp
                                   (var-exp list)
                                   ((app-exp
                                      (var-exp expand-syntax)
                                      ((app-exp
                                         (var-exp car)
                                         ((app-exp
                                            (var-exp caddr)
                                            ((var-exp exp)))))))))))
                             ()))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp begin-exp)))
                           (app-exp
                             (var-exp list)
                             ((lit-exp begin-exp)
                               (app-exp
                                 (var-exp map)
                                 ((var-exp expand-syntax)
                                   (app-exp (var-exp cadr) ((var-exp exp)))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp define-exp)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp define-exp)
                                 (app-exp (var-exp cadr) ((var-exp exp)))
                                 (app-exp
                                   (var-exp expand-syntax)
                                   ((app-exp
                                      (var-exp caddr)
                                      ((var-exp exp)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp exp)))
                                   (lit-exp and-exp)))
                               (if-exp
                                 (app-exp
                                   (var-exp null?)
                                   ((app-exp (var-exp cadr) ((var-exp exp)))))
                                 (app-exp
                                   (var-exp list)
                                   ((lit-exp lit-exp) (lit-exp #t)))
                                 (if-exp
                                   (app-exp
                                     (var-exp null?)
                                     ((app-exp
                                        (var-exp cdr)
                                        ((app-exp
                                           (var-exp cadr)
                                           ((var-exp exp)))))))
                                   (app-exp
                                     (var-exp expand-syntax)
                                     ((app-exp
                                        (var-exp car)
                                        ((app-exp
                                           (var-exp cadr)
                                           ((var-exp exp)))))))
                                   (app-exp
                                     (var-exp expand-syntax)
                                     ((app-exp
                                        (var-exp list)
                                        ((lit-exp if-exp)
                                          (app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))
                                          (app-exp
                                            (var-exp list)
                                            ((lit-exp and-exp)
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp cadr)
                                                   ((var-exp exp)))))))
                                          (app-exp
                                            (var-exp list)
                                            ((lit-exp lit-exp)
                                              (lit-exp #f)))))))))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp exp)))
                                     (lit-exp or-exp)))
                                 (if-exp
                                   (app-exp
                                     (var-exp null?)
                                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lit-exp) (lit-exp #f)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cdr)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp list)
                                          ((lit-exp let-exp)
                                            (app-exp
                                              (var-exp cons)
                                              ((lit-exp sys-var)
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp tempVal)))))
                                            (app-exp
                                              (var-exp list)
                                              ((app-exp
                                                 (var-exp car)
                                                 ((app-exp
                                                    (var-exp cadr)
                                                    ((var-exp exp)))))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp if-exp)
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp var-exp)
                                                    (app-exp
                                                      (var-exp cons)
                                                      ((lit-exp sys-var)
                                                        (app-exp
                                                          (var-exp list)
                                                          ((lit-exp
                                                             tempVal)))))))
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp var-exp)
                                                    (app-exp
                                                      (var-exp cons)
                                                      ((lit-exp sys-var)
                                                        (app-exp
                                                          (var-exp list)
                                                          ((lit-exp
                                                             tempVal)))))))
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp or-exp)
                                                    (app-exp
                                                      (var-exp cdr)
                                                      ((app-exp
                                                         (var-exp cadr)
                                                         ((var-exp
                                                            exp)))))))))))))))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp exp)))
                                       (lit-exp cond-exp)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))
                                     (lit-exp ())
                                     (if-exp
                                       (lit-exp #t)
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp if-exp)
                                              (app-exp
                                                (var-exp caar)
                                                ((app-exp
                                                   (var-exp cadr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp cadar)
                                                ((app-exp
                                                   (var-exp cadr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp list)
                                                ((lit-exp cond-exp)
                                                  (app-exp
                                                    (var-exp cdr)
                                                    ((app-exp
                                                       (var-exp cadr)
                                                       ((var-exp exp)))))))))))
                                       ()))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp (var-exp car) ((var-exp exp)))
                                         (lit-exp case-exp)))
                                     (app-exp
                                       (lambda-exp
                                         (case-key)
                                         (begin-exp
                                           ((if-exp
                                              (app-exp
                                                (var-exp null?)
                                                ((app-exp
                                                   (var-exp caddr)
                                                   ((var-exp exp)))))
                                              (lit-exp ())
                                              (if-exp
                                                (lit-exp #t)
                                                (app-exp
                                                  (var-exp expand-syntax)
                                                  ((app-exp
                                                     (var-exp list)
                                                     ((lit-exp if-exp)
                                                       (app-exp
                                                         (var-exp list)
                                                         ((lit-exp or-exp)
                                                           (app-exp
                                                             (var-exp map)
                                                             ((lambda-exp
                                                                (ls)
                                                                (app-exp
                                                                  (var-exp list)
                                                                  ((lit-exp
                                                                     app-exp)
                                                                    (app-exp
                                                                      (var-exp
                                                                        list)
                                                                      ((lit-exp
                                                                         var-exp)
                                                                        (lit-exp
                                                                          equal?)))
                                                                    (app-exp
                                                                      (var-exp
                                                                        list)
                                                                      ((var-exp
                                                                         ls)
                                                                        (var-exp
                                                                          case-key))))))
                                                               (app-exp
                                                                 (var-exp caar)
                                                                 ((app-exp
                                                                    (var-exp
                                                                      caddr)
                                                                    ((var-exp
                                                                       exp)))))))))
                                                       (app-exp
                                                         (var-exp cadar)
                                                         ((app-exp
                                                            (var-exp caddr)
                                                            ((var-exp exp)))))
                                                       (app-exp
                                                         (var-exp list)
                                                         ((lit-exp case-exp)
                                                           (app-exp
                                                             (var-exp cadr)
                                                             ((var-exp exp)))
                                                           (app-exp
                                                             (var-exp cdr)
                                                             ((app-exp
                                                                (var-exp caddr)
                                                                ((var-exp
                                                                   exp)))))))))))
                                                ())))))
                                       ((app-exp
                                          (var-exp expand-syntax)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (if-exp
                                       (lit-exp #t)
                                       (var-exp exp)
                                       ()))))))))))))))))
       ())
     ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
     (((parse-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
       ((exp) . #((+ 1 2)))))
| | (apply-proc
      (primitive null?)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      null?
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | #f
| | (apply-proc
      (primitive car)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      car
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | app-exp
| | (apply-proc
      (primitive equal?)
      (app-exp lambda-exp)
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      equal?
      (app-exp lambda-exp)
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | #f
| | (apply-proc
      (primitive car)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      car
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | app-exp
| | (apply-proc
      (primitive equal?)
      (app-exp app-exp)
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      equal?
      (app-exp app-exp)
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | #t
| | (apply-proc
      (primitive caddr)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      caddr
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | ((lit-exp 1) (lit-exp 2))
| | (apply-proc
      (primitive map)
      ((closure-record
         (exp)
         (if-exp
           (app-exp (var-exp null?) ((var-exp exp)))
           (lit-exp ())
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lambda-exp)))
             (app-exp
               (var-exp list)
               ((lit-exp lambda-exp)
                 (app-exp (var-exp cadr) ((var-exp exp)))
                 (app-exp
                   (var-exp expand-syntax)
                   ((app-exp (var-exp caddr) ((var-exp exp)))))))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
               (app-exp
                 (var-exp list)
                 ((lit-exp app-exp)
                   (app-exp
                     (var-exp expand-syntax)
                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                   (app-exp
                     (var-exp map)
                     ((var-exp expand-syntax)
                       (app-exp (var-exp caddr) ((var-exp exp)))))))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp))) (lit-exp if-exp)))
                 (app-exp
                   (var-exp list)
                   ((lit-exp if-exp)
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp cadr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp caddr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp
                          (var-exp car)
                          ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp)))
                       (lit-exp set!-exp)))
                   (app-exp
                     (var-exp list)
                     ((lit-exp set!-exp)
                       (app-exp (var-exp cadr) ((var-exp exp)))
                       (app-exp
                         (var-exp expand-syntax)
                         ((app-exp (var-exp caddr) ((var-exp exp)))))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp letrec-exp)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp letrec-exp)
                         (app-exp (var-exp cadr) ((var-exp exp)))
                         (app-exp
                           (var-exp map)
                           ((var-exp expand-syntax)
                             (app-exp (var-exp caddr) ((var-exp exp)))))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp car)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp let-exp)))
                       (app-exp
                         (var-exp list)
                         ((lit-exp app-exp)
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp (var-exp cadr) ((var-exp exp)))
                               (app-exp
                                 (var-exp expand-syntax)
                                 ((app-exp
                                    (var-exp car)
                                    ((app-exp
                                       (var-exp cdddr)
                                       ((var-exp exp)))))))))
                           (app-exp
                             (var-exp map)
                             ((var-exp expand-syntax)
                               (app-exp (var-exp caddr) ((var-exp exp)))))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp named-let-exp)))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp list)
                              ((lit-exp app-exp)
                                (app-exp
                                  (var-exp list)
                                  ((lit-exp letrec-exp)
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp cadr)
                                         ((var-exp exp)))))
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp list)
                                         ((lit-exp lambda-exp)
                                           (app-exp
                                             (var-exp caddr)
                                             ((var-exp exp)))
                                           (app-exp
                                             (var-exp cadr)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp exp)))))))))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp var-exp)
                                        (app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))))
                                (app-exp
                                  (var-exp car)
                                  ((app-exp
                                     (var-exp cdddr)
                                     ((var-exp exp)))))))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp let*-exp)))
                           (if-exp
                             (if-exp
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp cadr) ((var-exp exp)))))
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp caddr) ((var-exp exp)))))
                               (lit-exp #f))
                             (app-exp
                               (var-exp expand-syntax)
                               ((app-exp
                                  (var-exp car)
                                  ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                             (if-exp
                               (lit-exp #t)
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp app-exp)
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lambda-exp)
                                       (app-exp
                                         (var-exp list)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let*-exp)
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp cadr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp caddr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp car)
                                                ((app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp exp)))))))))))
                                   (app-exp
                                     (var-exp list)
                                     ((app-exp
                                        (var-exp expand-syntax)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp exp)))))))))))
                               ()))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp begin-exp)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp begin-exp)
                                 (app-exp
                                   (var-exp map)
                                   ((var-exp expand-syntax)
                                     (app-exp
                                       (var-exp cadr)
                                       ((var-exp exp)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp exp)))
                                   (lit-exp define-exp)))
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp define-exp)
                                   (app-exp (var-exp cadr) ((var-exp exp)))
                                   (app-exp
                                     (var-exp expand-syntax)
                                     ((app-exp
                                        (var-exp caddr)
                                        ((var-exp exp)))))))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp exp)))
                                     (lit-exp and-exp)))
                                 (if-exp
                                   (app-exp
                                     (var-exp null?)
                                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lit-exp) (lit-exp #t)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cdr)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp list)
                                          ((lit-exp if-exp)
                                            (app-exp
                                              (var-exp car)
                                              ((app-exp
                                                 (var-exp cadr)
                                                 ((var-exp exp)))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp and-exp)
                                                (app-exp
                                                  (var-exp cdr)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp lit-exp)
                                                (lit-exp #f)))))))))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp exp)))
                                       (lit-exp or-exp)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp lit-exp) (lit-exp #f)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cdr)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let-exp)
                                              (app-exp
                                                (var-exp cons)
                                                ((lit-exp sys-var)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp tempVal)))))
                                              (app-exp
                                                (var-exp list)
                                                ((app-exp
                                                   (var-exp car)
                                                   ((app-exp
                                                      (var-exp cadr)
                                                      ((var-exp exp)))))))
                                              (app-exp
                                                (var-exp list)
                                                ((lit-exp if-exp)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp or-exp)
                                                      (app-exp
                                                        (var-exp cdr)
                                                        ((app-exp
                                                           (var-exp cadr)
                                                           ((var-exp
                                                              exp)))))))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp (var-exp car) ((var-exp exp)))
                                         (lit-exp cond-exp)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cadr)
                                            ((var-exp exp)))))
                                       (lit-exp ())
                                       (if-exp
                                         (lit-exp #t)
                                         (app-exp
                                           (var-exp expand-syntax)
                                           ((app-exp
                                              (var-exp list)
                                              ((lit-exp if-exp)
                                                (app-exp
                                                  (var-exp caar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp cadar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp cond-exp)
                                                    (app-exp
                                                      (var-exp cdr)
                                                      ((app-exp
                                                         (var-exp cadr)
                                                         ((var-exp
                                                            exp)))))))))))
                                         ()))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp exp)))
                                           (lit-exp case-exp)))
                                       (app-exp
                                         (lambda-exp
                                           (case-key)
                                           (begin-exp
                                             ((if-exp
                                                (app-exp
                                                  (var-exp null?)
                                                  ((app-exp
                                                     (var-exp caddr)
                                                     ((var-exp exp)))))
                                                (lit-exp ())
                                                (if-exp
                                                  (lit-exp #t)
                                                  (app-exp
                                                    (var-exp expand-syntax)
                                                    ((app-exp
                                                       (var-exp list)
                                                       ((lit-exp if-exp)
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp or-exp)
                                                             (app-exp
                                                               (var-exp map)
                                                               ((lambda-exp
                                                                  (ls)
                                                                  (app-exp
                                                                    (var-exp
                                                                      list)
                                                                    ((lit-exp
                                                                       app-exp)
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((lit-exp
                                                                           var-exp)
                                                                          (lit-exp
                                                                            equal?)))
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((var-exp
                                                                           ls)
                                                                          (var-exp
                                                                            case-key))))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     caar)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        caddr)
                                                                      ((var-exp
                                                                         exp)))))))))
                                                         (app-exp
                                                           (var-exp cadar)
                                                           ((app-exp
                                                              (var-exp caddr)
                                                              ((var-exp exp)))))
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp case-exp)
                                                             (app-exp
                                                               (var-exp cadr)
                                                               ((var-exp exp)))
                                                             (app-exp
                                                               (var-exp cdr)
                                                               ((app-exp
                                                                  (var-exp
                                                                    caddr)
                                                                  ((var-exp
                                                                     exp)))))))))))
                                                  ())))))
                                         ((app-exp
                                            (var-exp expand-syntax)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (if-exp
                                         (lit-exp #t)
                                         (var-exp exp)
                                         ()))))))))))))))))
         ())
        ((lit-exp 1) (lit-exp 2)))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      map
      ((closure-record
         (exp)
         (if-exp
           (app-exp (var-exp null?) ((var-exp exp)))
           (lit-exp ())
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lambda-exp)))
             (app-exp
               (var-exp list)
               ((lit-exp lambda-exp)
                 (app-exp (var-exp cadr) ((var-exp exp)))
                 (app-exp
                   (var-exp expand-syntax)
                   ((app-exp (var-exp caddr) ((var-exp exp)))))))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
               (app-exp
                 (var-exp list)
                 ((lit-exp app-exp)
                   (app-exp
                     (var-exp expand-syntax)
                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                   (app-exp
                     (var-exp map)
                     ((var-exp expand-syntax)
                       (app-exp (var-exp caddr) ((var-exp exp)))))))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp))) (lit-exp if-exp)))
                 (app-exp
                   (var-exp list)
                   ((lit-exp if-exp)
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp cadr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp caddr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp
                          (var-exp car)
                          ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp)))
                       (lit-exp set!-exp)))
                   (app-exp
                     (var-exp list)
                     ((lit-exp set!-exp)
                       (app-exp (var-exp cadr) ((var-exp exp)))
                       (app-exp
                         (var-exp expand-syntax)
                         ((app-exp (var-exp caddr) ((var-exp exp)))))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp letrec-exp)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp letrec-exp)
                         (app-exp (var-exp cadr) ((var-exp exp)))
                         (app-exp
                           (var-exp map)
                           ((var-exp expand-syntax)
                             (app-exp (var-exp caddr) ((var-exp exp)))))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp car)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp let-exp)))
                       (app-exp
                         (var-exp list)
                         ((lit-exp app-exp)
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp (var-exp cadr) ((var-exp exp)))
                               (app-exp
                                 (var-exp expand-syntax)
                                 ((app-exp
                                    (var-exp car)
                                    ((app-exp
                                       (var-exp cdddr)
                                       ((var-exp exp)))))))))
                           (app-exp
                             (var-exp map)
                             ((var-exp expand-syntax)
                               (app-exp (var-exp caddr) ((var-exp exp)))))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp named-let-exp)))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp list)
                              ((lit-exp app-exp)
                                (app-exp
                                  (var-exp list)
                                  ((lit-exp letrec-exp)
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp cadr)
                                         ((var-exp exp)))))
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp list)
                                         ((lit-exp lambda-exp)
                                           (app-exp
                                             (var-exp caddr)
                                             ((var-exp exp)))
                                           (app-exp
                                             (var-exp cadr)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp exp)))))))))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp var-exp)
                                        (app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))))
                                (app-exp
                                  (var-exp car)
                                  ((app-exp
                                     (var-exp cdddr)
                                     ((var-exp exp)))))))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp let*-exp)))
                           (if-exp
                             (if-exp
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp cadr) ((var-exp exp)))))
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp caddr) ((var-exp exp)))))
                               (lit-exp #f))
                             (app-exp
                               (var-exp expand-syntax)
                               ((app-exp
                                  (var-exp car)
                                  ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                             (if-exp
                               (lit-exp #t)
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp app-exp)
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lambda-exp)
                                       (app-exp
                                         (var-exp list)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let*-exp)
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp cadr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp caddr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp car)
                                                ((app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp exp)))))))))))
                                   (app-exp
                                     (var-exp list)
                                     ((app-exp
                                        (var-exp expand-syntax)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp exp)))))))))))
                               ()))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp begin-exp)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp begin-exp)
                                 (app-exp
                                   (var-exp map)
                                   ((var-exp expand-syntax)
                                     (app-exp
                                       (var-exp cadr)
                                       ((var-exp exp)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp exp)))
                                   (lit-exp define-exp)))
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp define-exp)
                                   (app-exp (var-exp cadr) ((var-exp exp)))
                                   (app-exp
                                     (var-exp expand-syntax)
                                     ((app-exp
                                        (var-exp caddr)
                                        ((var-exp exp)))))))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp exp)))
                                     (lit-exp and-exp)))
                                 (if-exp
                                   (app-exp
                                     (var-exp null?)
                                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lit-exp) (lit-exp #t)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cdr)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp list)
                                          ((lit-exp if-exp)
                                            (app-exp
                                              (var-exp car)
                                              ((app-exp
                                                 (var-exp cadr)
                                                 ((var-exp exp)))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp and-exp)
                                                (app-exp
                                                  (var-exp cdr)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp lit-exp)
                                                (lit-exp #f)))))))))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp exp)))
                                       (lit-exp or-exp)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp lit-exp) (lit-exp #f)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cdr)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let-exp)
                                              (app-exp
                                                (var-exp cons)
                                                ((lit-exp sys-var)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp tempVal)))))
                                              (app-exp
                                                (var-exp list)
                                                ((app-exp
                                                   (var-exp car)
                                                   ((app-exp
                                                      (var-exp cadr)
                                                      ((var-exp exp)))))))
                                              (app-exp
                                                (var-exp list)
                                                ((lit-exp if-exp)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp or-exp)
                                                      (app-exp
                                                        (var-exp cdr)
                                                        ((app-exp
                                                           (var-exp cadr)
                                                           ((var-exp
                                                              exp)))))))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp (var-exp car) ((var-exp exp)))
                                         (lit-exp cond-exp)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cadr)
                                            ((var-exp exp)))))
                                       (lit-exp ())
                                       (if-exp
                                         (lit-exp #t)
                                         (app-exp
                                           (var-exp expand-syntax)
                                           ((app-exp
                                              (var-exp list)
                                              ((lit-exp if-exp)
                                                (app-exp
                                                  (var-exp caar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp cadar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp cond-exp)
                                                    (app-exp
                                                      (var-exp cdr)
                                                      ((app-exp
                                                         (var-exp cadr)
                                                         ((var-exp
                                                            exp)))))))))))
                                         ()))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp exp)))
                                           (lit-exp case-exp)))
                                       (app-exp
                                         (lambda-exp
                                           (case-key)
                                           (begin-exp
                                             ((if-exp
                                                (app-exp
                                                  (var-exp null?)
                                                  ((app-exp
                                                     (var-exp caddr)
                                                     ((var-exp exp)))))
                                                (lit-exp ())
                                                (if-exp
                                                  (lit-exp #t)
                                                  (app-exp
                                                    (var-exp expand-syntax)
                                                    ((app-exp
                                                       (var-exp list)
                                                       ((lit-exp if-exp)
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp or-exp)
                                                             (app-exp
                                                               (var-exp map)
                                                               ((lambda-exp
                                                                  (ls)
                                                                  (app-exp
                                                                    (var-exp
                                                                      list)
                                                                    ((lit-exp
                                                                       app-exp)
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((lit-exp
                                                                           var-exp)
                                                                          (lit-exp
                                                                            equal?)))
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((var-exp
                                                                           ls)
                                                                          (var-exp
                                                                            case-key))))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     caar)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        caddr)
                                                                      ((var-exp
                                                                         exp)))))))))
                                                         (app-exp
                                                           (var-exp cadar)
                                                           ((app-exp
                                                              (var-exp caddr)
                                                              ((var-exp exp)))))
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp case-exp)
                                                             (app-exp
                                                               (var-exp cadr)
                                                               ((var-exp exp)))
                                                             (app-exp
                                                               (var-exp cdr)
                                                               ((app-exp
                                                                  (var-exp
                                                                    caddr)
                                                                  ((var-exp
                                                                     exp)))))))))))
                                                  ())))))
                                         ((app-exp
                                            (var-exp expand-syntax)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (if-exp
                                         (lit-exp #t)
                                         (var-exp exp)
                                         ()))))))))))))))))
         ())
        ((lit-exp 1) (lit-exp 2)))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | |(apply-proc
       (closure-record
         (exp)
         (if-exp
           (app-exp (var-exp null?) ((var-exp exp)))
           (lit-exp ())
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lambda-exp)))
             (app-exp
               (var-exp list)
               ((lit-exp lambda-exp)
                 (app-exp (var-exp cadr) ((var-exp exp)))
                 (app-exp
                   (var-exp expand-syntax)
                   ((app-exp (var-exp caddr) ((var-exp exp)))))))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
               (app-exp
                 (var-exp list)
                 ((lit-exp app-exp)
                   (app-exp
                     (var-exp expand-syntax)
                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                   (app-exp
                     (var-exp map)
                     ((var-exp expand-syntax)
                       (app-exp (var-exp caddr) ((var-exp exp)))))))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp))) (lit-exp if-exp)))
                 (app-exp
                   (var-exp list)
                   ((lit-exp if-exp)
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp cadr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp caddr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp
                          (var-exp car)
                          ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp)))
                       (lit-exp set!-exp)))
                   (app-exp
                     (var-exp list)
                     ((lit-exp set!-exp)
                       (app-exp (var-exp cadr) ((var-exp exp)))
                       (app-exp
                         (var-exp expand-syntax)
                         ((app-exp (var-exp caddr) ((var-exp exp)))))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp letrec-exp)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp letrec-exp)
                         (app-exp (var-exp cadr) ((var-exp exp)))
                         (app-exp
                           (var-exp map)
                           ((var-exp expand-syntax)
                             (app-exp (var-exp caddr) ((var-exp exp)))))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp car)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp let-exp)))
                       (app-exp
                         (var-exp list)
                         ((lit-exp app-exp)
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp (var-exp cadr) ((var-exp exp)))
                               (app-exp
                                 (var-exp expand-syntax)
                                 ((app-exp
                                    (var-exp car)
                                    ((app-exp
                                       (var-exp cdddr)
                                       ((var-exp exp)))))))))
                           (app-exp
                             (var-exp map)
                             ((var-exp expand-syntax)
                               (app-exp (var-exp caddr) ((var-exp exp)))))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp named-let-exp)))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp list)
                              ((lit-exp app-exp)
                                (app-exp
                                  (var-exp list)
                                  ((lit-exp letrec-exp)
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp cadr)
                                         ((var-exp exp)))))
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp list)
                                         ((lit-exp lambda-exp)
                                           (app-exp
                                             (var-exp caddr)
                                             ((var-exp exp)))
                                           (app-exp
                                             (var-exp cadr)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp exp)))))))))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp var-exp)
                                        (app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))))
                                (app-exp
                                  (var-exp car)
                                  ((app-exp
                                     (var-exp cdddr)
                                     ((var-exp exp)))))))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp let*-exp)))
                           (if-exp
                             (if-exp
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp cadr) ((var-exp exp)))))
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp caddr) ((var-exp exp)))))
                               (lit-exp #f))
                             (app-exp
                               (var-exp expand-syntax)
                               ((app-exp
                                  (var-exp car)
                                  ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                             (if-exp
                               (lit-exp #t)
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp app-exp)
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lambda-exp)
                                       (app-exp
                                         (var-exp list)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let*-exp)
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp cadr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp caddr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp car)
                                                ((app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp exp)))))))))))
                                   (app-exp
                                     (var-exp list)
                                     ((app-exp
                                        (var-exp expand-syntax)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp exp)))))))))))
                               ()))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp begin-exp)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp begin-exp)
                                 (app-exp
                                   (var-exp map)
                                   ((var-exp expand-syntax)
                                     (app-exp
                                       (var-exp cadr)
                                       ((var-exp exp)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp exp)))
                                   (lit-exp define-exp)))
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp define-exp)
                                   (app-exp (var-exp cadr) ((var-exp exp)))
                                   (app-exp
                                     (var-exp expand-syntax)
                                     ((app-exp
                                        (var-exp caddr)
                                        ((var-exp exp)))))))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp exp)))
                                     (lit-exp and-exp)))
                                 (if-exp
                                   (app-exp
                                     (var-exp null?)
                                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lit-exp) (lit-exp #t)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cdr)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp list)
                                          ((lit-exp if-exp)
                                            (app-exp
                                              (var-exp car)
                                              ((app-exp
                                                 (var-exp cadr)
                                                 ((var-exp exp)))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp and-exp)
                                                (app-exp
                                                  (var-exp cdr)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp lit-exp)
                                                (lit-exp #f)))))))))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp exp)))
                                       (lit-exp or-exp)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp lit-exp) (lit-exp #f)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cdr)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let-exp)
                                              (app-exp
                                                (var-exp cons)
                                                ((lit-exp sys-var)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp tempVal)))))
                                              (app-exp
                                                (var-exp list)
                                                ((app-exp
                                                   (var-exp car)
                                                   ((app-exp
                                                      (var-exp cadr)
                                                      ((var-exp exp)))))))
                                              (app-exp
                                                (var-exp list)
                                                ((lit-exp if-exp)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp or-exp)
                                                      (app-exp
                                                        (var-exp cdr)
                                                        ((app-exp
                                                           (var-exp cadr)
                                                           ((var-exp
                                                              exp)))))))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp (var-exp car) ((var-exp exp)))
                                         (lit-exp cond-exp)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cadr)
                                            ((var-exp exp)))))
                                       (lit-exp ())
                                       (if-exp
                                         (lit-exp #t)
                                         (app-exp
                                           (var-exp expand-syntax)
                                           ((app-exp
                                              (var-exp list)
                                              ((lit-exp if-exp)
                                                (app-exp
                                                  (var-exp caar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp cadar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp cond-exp)
                                                    (app-exp
                                                      (var-exp cdr)
                                                      ((app-exp
                                                         (var-exp cadr)
                                                         ((var-exp
                                                            exp)))))))))))
                                         ()))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp exp)))
                                           (lit-exp case-exp)))
                                       (app-exp
                                         (lambda-exp
                                           (case-key)
                                           (begin-exp
                                             ((if-exp
                                                (app-exp
                                                  (var-exp null?)
                                                  ((app-exp
                                                     (var-exp caddr)
                                                     ((var-exp exp)))))
                                                (lit-exp ())
                                                (if-exp
                                                  (lit-exp #t)
                                                  (app-exp
                                                    (var-exp expand-syntax)
                                                    ((app-exp
                                                       (var-exp list)
                                                       ((lit-exp if-exp)
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp or-exp)
                                                             (app-exp
                                                               (var-exp map)
                                                               ((lambda-exp
                                                                  (ls)
                                                                  (app-exp
                                                                    (var-exp
                                                                      list)
                                                                    ((lit-exp
                                                                       app-exp)
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((lit-exp
                                                                           var-exp)
                                                                          (lit-exp
                                                                            equal?)))
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((var-exp
                                                                           ls)
                                                                          (var-exp
                                                                            case-key))))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     caar)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        caddr)
                                                                      ((var-exp
                                                                         exp)))))))))
                                                         (app-exp
                                                           (var-exp cadar)
                                                           ((app-exp
                                                              (var-exp caddr)
                                                              ((var-exp exp)))))
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp case-exp)
                                                             (app-exp
                                                               (var-exp cadr)
                                                               ((var-exp exp)))
                                                             (app-exp
                                                               (var-exp cdr)
                                                               ((app-exp
                                                                  (var-exp
                                                                    caddr)
                                                                  ((var-exp
                                                                     exp)))))))))))
                                                  ())))))
                                         ((app-exp
                                            (var-exp expand-syntax)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (if-exp
                                         (lit-exp #t)
                                         (var-exp exp)
                                         ()))))))))))))))))
         ())
       ((lit-exp 2))
       (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | | (apply-proc (primitive null?) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc null? ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp lambda-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp lambda-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp app-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc equal? (lit-exp app-exp) (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp if-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc equal? (lit-exp if-exp) (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp set!-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp set!-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp letrec-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp letrec-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp let-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc equal? (lit-exp let-exp) (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp named-let-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp named-let-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp let*-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp let*-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp begin-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp begin-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp define-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp define-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp and-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc equal? (lit-exp and-exp) (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp or-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc equal? (lit-exp or-exp) (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp cond-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp cond-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp) . #((lit-exp 2)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp case-exp)
        (((exp) . #((lit-exp 2)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp case-exp)
        (((exp) . #((lit-exp 2)))))
| | | #f
| | |(lit-exp 2)
| | |(apply-proc
       (closure-record
         (exp)
         (if-exp
           (app-exp (var-exp null?) ((var-exp exp)))
           (lit-exp ())
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lambda-exp)))
             (app-exp
               (var-exp list)
               ((lit-exp lambda-exp)
                 (app-exp (var-exp cadr) ((var-exp exp)))
                 (app-exp
                   (var-exp expand-syntax)
                   ((app-exp (var-exp caddr) ((var-exp exp)))))))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
               (app-exp
                 (var-exp list)
                 ((lit-exp app-exp)
                   (app-exp
                     (var-exp expand-syntax)
                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                   (app-exp
                     (var-exp map)
                     ((var-exp expand-syntax)
                       (app-exp (var-exp caddr) ((var-exp exp)))))))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp))) (lit-exp if-exp)))
                 (app-exp
                   (var-exp list)
                   ((lit-exp if-exp)
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp cadr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp (var-exp caddr) ((var-exp exp)))))
                     (app-exp
                       (var-exp expand-syntax)
                       ((app-exp
                          (var-exp car)
                          ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp)))
                       (lit-exp set!-exp)))
                   (app-exp
                     (var-exp list)
                     ((lit-exp set!-exp)
                       (app-exp (var-exp cadr) ((var-exp exp)))
                       (app-exp
                         (var-exp expand-syntax)
                         ((app-exp (var-exp caddr) ((var-exp exp)))))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp letrec-exp)))
                     (app-exp
                       (var-exp list)
                       ((lit-exp letrec-exp)
                         (app-exp (var-exp cadr) ((var-exp exp)))
                         (app-exp
                           (var-exp map)
                           ((var-exp expand-syntax)
                             (app-exp (var-exp caddr) ((var-exp exp)))))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp car)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp let-exp)))
                       (app-exp
                         (var-exp list)
                         ((lit-exp app-exp)
                           (app-exp
                             (var-exp list)
                             ((lit-exp lambda-exp)
                               (app-exp (var-exp cadr) ((var-exp exp)))
                               (app-exp
                                 (var-exp expand-syntax)
                                 ((app-exp
                                    (var-exp car)
                                    ((app-exp
                                       (var-exp cdddr)
                                       ((var-exp exp)))))))))
                           (app-exp
                             (var-exp map)
                             ((var-exp expand-syntax)
                               (app-exp (var-exp caddr) ((var-exp exp)))))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp named-let-exp)))
                         (app-exp
                           (var-exp expand-syntax)
                           ((app-exp
                              (var-exp list)
                              ((lit-exp app-exp)
                                (app-exp
                                  (var-exp list)
                                  ((lit-exp letrec-exp)
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp cadr)
                                         ((var-exp exp)))))
                                    (app-exp
                                      (var-exp list)
                                      ((app-exp
                                         (var-exp list)
                                         ((lit-exp lambda-exp)
                                           (app-exp
                                             (var-exp caddr)
                                             ((var-exp exp)))
                                           (app-exp
                                             (var-exp cadr)
                                             ((app-exp
                                                (var-exp cdddr)
                                                ((var-exp exp)))))))))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp var-exp)
                                        (app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))))
                                (app-exp
                                  (var-exp car)
                                  ((app-exp
                                     (var-exp cdddr)
                                     ((var-exp exp)))))))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp let*-exp)))
                           (if-exp
                             (if-exp
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp cadr) ((var-exp exp)))))
                               (app-exp
                                 (var-exp null?)
                                 ((app-exp (var-exp caddr) ((var-exp exp)))))
                               (lit-exp #f))
                             (app-exp
                               (var-exp expand-syntax)
                               ((app-exp
                                  (var-exp car)
                                  ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                             (if-exp
                               (lit-exp #t)
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp app-exp)
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lambda-exp)
                                       (app-exp
                                         (var-exp list)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let*-exp)
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp cadr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp cdr)
                                                ((app-exp
                                                   (var-exp caddr)
                                                   ((var-exp exp)))))
                                              (app-exp
                                                (var-exp car)
                                                ((app-exp
                                                   (var-exp cdddr)
                                                   ((var-exp exp)))))))))))
                                   (app-exp
                                     (var-exp list)
                                     ((app-exp
                                        (var-exp expand-syntax)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp caddr)
                                              ((var-exp exp)))))))))))
                               ()))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp begin-exp)))
                             (app-exp
                               (var-exp list)
                               ((lit-exp begin-exp)
                                 (app-exp
                                   (var-exp map)
                                   ((var-exp expand-syntax)
                                     (app-exp
                                       (var-exp cadr)
                                       ((var-exp exp)))))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp exp)))
                                   (lit-exp define-exp)))
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp define-exp)
                                   (app-exp (var-exp cadr) ((var-exp exp)))
                                   (app-exp
                                     (var-exp expand-syntax)
                                     ((app-exp
                                        (var-exp caddr)
                                        ((var-exp exp)))))))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((app-exp (var-exp car) ((var-exp exp)))
                                     (lit-exp and-exp)))
                                 (if-exp
                                   (app-exp
                                     (var-exp null?)
                                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp lit-exp) (lit-exp #t)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cdr)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp cadr)
                                             ((var-exp exp)))))))
                                     (app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp list)
                                          ((lit-exp if-exp)
                                            (app-exp
                                              (var-exp car)
                                              ((app-exp
                                                 (var-exp cadr)
                                                 ((var-exp exp)))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp and-exp)
                                                (app-exp
                                                  (var-exp cdr)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))))
                                            (app-exp
                                              (var-exp list)
                                              ((lit-exp lit-exp)
                                                (lit-exp #f)))))))))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((app-exp (var-exp car) ((var-exp exp)))
                                       (lit-exp or-exp)))
                                   (if-exp
                                     (app-exp
                                       (var-exp null?)
                                       ((app-exp
                                          (var-exp cadr)
                                          ((var-exp exp)))))
                                     (app-exp
                                       (var-exp list)
                                       ((lit-exp lit-exp) (lit-exp #f)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cdr)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp car)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (app-exp
                                         (var-exp expand-syntax)
                                         ((app-exp
                                            (var-exp list)
                                            ((lit-exp let-exp)
                                              (app-exp
                                                (var-exp cons)
                                                ((lit-exp sys-var)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp tempVal)))))
                                              (app-exp
                                                (var-exp list)
                                                ((app-exp
                                                   (var-exp car)
                                                   ((app-exp
                                                      (var-exp cadr)
                                                      ((var-exp exp)))))))
                                              (app-exp
                                                (var-exp list)
                                                ((lit-exp if-exp)
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp var-exp)
                                                      (app-exp
                                                        (var-exp cons)
                                                        ((lit-exp sys-var)
                                                          (app-exp
                                                            (var-exp list)
                                                            ((lit-exp
                                                               tempVal)))))))
                                                  (app-exp
                                                    (var-exp list)
                                                    ((lit-exp or-exp)
                                                      (app-exp
                                                        (var-exp cdr)
                                                        ((app-exp
                                                           (var-exp cadr)
                                                           ((var-exp
                                                              exp)))))))))))))))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((app-exp (var-exp car) ((var-exp exp)))
                                         (lit-exp cond-exp)))
                                     (if-exp
                                       (app-exp
                                         (var-exp null?)
                                         ((app-exp
                                            (var-exp cadr)
                                            ((var-exp exp)))))
                                       (lit-exp ())
                                       (if-exp
                                         (lit-exp #t)
                                         (app-exp
                                           (var-exp expand-syntax)
                                           ((app-exp
                                              (var-exp list)
                                              ((lit-exp if-exp)
                                                (app-exp
                                                  (var-exp caar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp cadar)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))
                                                (app-exp
                                                  (var-exp list)
                                                  ((lit-exp cond-exp)
                                                    (app-exp
                                                      (var-exp cdr)
                                                      ((app-exp
                                                         (var-exp cadr)
                                                         ((var-exp
                                                            exp)))))))))))
                                         ()))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp exp)))
                                           (lit-exp case-exp)))
                                       (app-exp
                                         (lambda-exp
                                           (case-key)
                                           (begin-exp
                                             ((if-exp
                                                (app-exp
                                                  (var-exp null?)
                                                  ((app-exp
                                                     (var-exp caddr)
                                                     ((var-exp exp)))))
                                                (lit-exp ())
                                                (if-exp
                                                  (lit-exp #t)
                                                  (app-exp
                                                    (var-exp expand-syntax)
                                                    ((app-exp
                                                       (var-exp list)
                                                       ((lit-exp if-exp)
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp or-exp)
                                                             (app-exp
                                                               (var-exp map)
                                                               ((lambda-exp
                                                                  (ls)
                                                                  (app-exp
                                                                    (var-exp
                                                                      list)
                                                                    ((lit-exp
                                                                       app-exp)
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((lit-exp
                                                                           var-exp)
                                                                          (lit-exp
                                                                            equal?)))
                                                                      (app-exp
                                                                        (var-exp
                                                                          list)
                                                                        ((var-exp
                                                                           ls)
                                                                          (var-exp
                                                                            case-key))))))
                                                                 (app-exp
                                                                   (var-exp
                                                                     caar)
                                                                   ((app-exp
                                                                      (var-exp
                                                                        caddr)
                                                                      ((var-exp
                                                                         exp)))))))))
                                                         (app-exp
                                                           (var-exp cadar)
                                                           ((app-exp
                                                              (var-exp caddr)
                                                              ((var-exp exp)))))
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp case-exp)
                                                             (app-exp
                                                               (var-exp cadr)
                                                               ((var-exp exp)))
                                                             (app-exp
                                                               (var-exp cdr)
                                                               ((app-exp
                                                                  (var-exp
                                                                    caddr)
                                                                  ((var-exp
                                                                     exp)))))))))))
                                                  ())))))
                                         ((app-exp
                                            (var-exp expand-syntax)
                                            ((app-exp
                                               (var-exp cadr)
                                               ((var-exp exp)))))))
                                       (if-exp
                                         (lit-exp #t)
                                         (var-exp exp)
                                         ()))))))))))))))))
         ())
       ((lit-exp 1))
       (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | | (apply-proc (primitive null?) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc null? ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp lambda-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp lambda-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp app-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc equal? (lit-exp app-exp) (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp if-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc equal? (lit-exp if-exp) (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp set!-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp set!-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp letrec-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp letrec-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp let-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc equal? (lit-exp let-exp) (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp named-let-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp named-let-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp let*-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp let*-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp begin-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp begin-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp define-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp define-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp and-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc equal? (lit-exp and-exp) (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp or-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc equal? (lit-exp or-exp) (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp cond-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp cond-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | | (apply-proc (primitive car) ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp) . #((lit-exp 1)))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp case-exp)
        (((exp) . #((lit-exp 1)))))
| | | (apply-primitive-proc
        equal?
        (lit-exp case-exp)
        (((exp) . #((lit-exp 1)))))
| | | #f
| | |(lit-exp 1)
| | ((lit-exp 1) (lit-exp 2))
| | (apply-proc
      (primitive cadr)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      cadr
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (var-exp +)
| | (apply-proc
      (closure-record
        (exp)
        (if-exp
          (app-exp (var-exp null?) ((var-exp exp)))
          (lit-exp ())
          (if-exp
            (app-exp
              (var-exp equal?)
              ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lambda-exp)))
            (app-exp
              (var-exp list)
              ((lit-exp lambda-exp)
                (app-exp (var-exp cadr) ((var-exp exp)))
                (app-exp
                  (var-exp expand-syntax)
                  ((app-exp (var-exp caddr) ((var-exp exp)))))))
            (if-exp
              (app-exp
                (var-exp equal?)
                ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
              (app-exp
                (var-exp list)
                ((lit-exp app-exp)
                  (app-exp
                    (var-exp expand-syntax)
                    ((app-exp (var-exp cadr) ((var-exp exp)))))
                  (app-exp
                    (var-exp map)
                    ((var-exp expand-syntax)
                      (app-exp (var-exp caddr) ((var-exp exp)))))))
              (if-exp
                (app-exp
                  (var-exp equal?)
                  ((app-exp (var-exp car) ((var-exp exp))) (lit-exp if-exp)))
                (app-exp
                  (var-exp list)
                  ((lit-exp if-exp)
                    (app-exp
                      (var-exp expand-syntax)
                      ((app-exp (var-exp cadr) ((var-exp exp)))))
                    (app-exp
                      (var-exp expand-syntax)
                      ((app-exp (var-exp caddr) ((var-exp exp)))))
                    (app-exp
                      (var-exp expand-syntax)
                      ((app-exp
                         (var-exp car)
                         ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                (if-exp
                  (app-exp
                    (var-exp equal?)
                    ((app-exp (var-exp car) ((var-exp exp)))
                      (lit-exp set!-exp)))
                  (app-exp
                    (var-exp list)
                    ((lit-exp set!-exp)
                      (app-exp (var-exp cadr) ((var-exp exp)))
                      (app-exp
                        (var-exp expand-syntax)
                        ((app-exp (var-exp caddr) ((var-exp exp)))))))
                  (if-exp
                    (app-exp
                      (var-exp equal?)
                      ((app-exp (var-exp car) ((var-exp exp)))
                        (lit-exp letrec-exp)))
                    (app-exp
                      (var-exp list)
                      ((lit-exp letrec-exp)
                        (app-exp (var-exp cadr) ((var-exp exp)))
                        (app-exp
                          (var-exp map)
                          ((var-exp expand-syntax)
                            (app-exp (var-exp caddr) ((var-exp exp)))))
                        (app-exp
                          (var-exp expand-syntax)
                          ((app-exp
                             (var-exp car)
                             ((app-exp (var-exp cdddr) ((var-exp exp)))))))))
                    (if-exp
                      (app-exp
                        (var-exp equal?)
                        ((app-exp (var-exp car) ((var-exp exp)))
                          (lit-exp let-exp)))
                      (app-exp
                        (var-exp list)
                        ((lit-exp app-exp)
                          (app-exp
                            (var-exp list)
                            ((lit-exp lambda-exp)
                              (app-exp (var-exp cadr) ((var-exp exp)))
                              (app-exp
                                (var-exp expand-syntax)
                                ((app-exp
                                   (var-exp car)
                                   ((app-exp
                                      (var-exp cdddr)
                                      ((var-exp exp)))))))))
                          (app-exp
                            (var-exp map)
                            ((var-exp expand-syntax)
                              (app-exp (var-exp caddr) ((var-exp exp)))))))
                      (if-exp
                        (app-exp
                          (var-exp equal?)
                          ((app-exp (var-exp car) ((var-exp exp)))
                            (lit-exp named-let-exp)))
                        (app-exp
                          (var-exp expand-syntax)
                          ((app-exp
                             (var-exp list)
                             ((lit-exp app-exp)
                               (app-exp
                                 (var-exp list)
                                 ((lit-exp letrec-exp)
                                   (app-exp
                                     (var-exp list)
                                     ((app-exp (var-exp cadr) ((var-exp exp)))))
                                   (app-exp
                                     (var-exp list)
                                     ((app-exp
                                        (var-exp list)
                                        ((lit-exp lambda-exp)
                                          (app-exp
                                            (var-exp caddr)
                                            ((var-exp exp)))
                                          (app-exp
                                            (var-exp cadr)
                                            ((app-exp
                                               (var-exp cdddr)
                                               ((var-exp exp)))))))))
                                   (app-exp
                                     (var-exp list)
                                     ((lit-exp var-exp)
                                       (app-exp
                                         (var-exp cadr)
                                         ((var-exp exp)))))))
                               (app-exp
                                 (var-exp car)
                                 ((app-exp
                                    (var-exp cdddr)
                                    ((var-exp exp)))))))))
                        (if-exp
                          (app-exp
                            (var-exp equal?)
                            ((app-exp (var-exp car) ((var-exp exp)))
                              (lit-exp let*-exp)))
                          (if-exp
                            (if-exp
                              (app-exp
                                (var-exp null?)
                                ((app-exp (var-exp cadr) ((var-exp exp)))))
                              (app-exp
                                (var-exp null?)
                                ((app-exp (var-exp caddr) ((var-exp exp)))))
                              (lit-exp #f))
                            (app-exp
                              (var-exp expand-syntax)
                              ((app-exp
                                 (var-exp car)
                                 ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                            (if-exp
                              (lit-exp #t)
                              (app-exp
                                (var-exp list)
                                ((lit-exp app-exp)
                                  (app-exp
                                    (var-exp list)
                                    ((lit-exp lambda-exp)
                                      (app-exp
                                        (var-exp list)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp exp)))))))
                                      (app-exp
                                        (var-exp expand-syntax)
                                        ((app-exp
                                           (var-exp list)
                                           ((lit-exp let*-exp)
                                             (app-exp
                                               (var-exp cdr)
                                               ((app-exp
                                                  (var-exp cadr)
                                                  ((var-exp exp)))))
                                             (app-exp
                                               (var-exp cdr)
                                               ((app-exp
                                                  (var-exp caddr)
                                                  ((var-exp exp)))))
                                             (app-exp
                                               (var-exp car)
                                               ((app-exp
                                                  (var-exp cdddr)
                                                  ((var-exp exp)))))))))))
                                  (app-exp
                                    (var-exp list)
                                    ((app-exp
                                       (var-exp expand-syntax)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp caddr)
                                             ((var-exp exp)))))))))))
                              ()))
                          (if-exp
                            (app-exp
                              (var-exp equal?)
                              ((app-exp (var-exp car) ((var-exp exp)))
                                (lit-exp begin-exp)))
                            (app-exp
                              (var-exp list)
                              ((lit-exp begin-exp)
                                (app-exp
                                  (var-exp map)
                                  ((var-exp expand-syntax)
                                    (app-exp (var-exp cadr) ((var-exp exp)))))))
                            (if-exp
                              (app-exp
                                (var-exp equal?)
                                ((app-exp (var-exp car) ((var-exp exp)))
                                  (lit-exp define-exp)))
                              (app-exp
                                (var-exp list)
                                ((lit-exp define-exp)
                                  (app-exp (var-exp cadr) ((var-exp exp)))
                                  (app-exp
                                    (var-exp expand-syntax)
                                    ((app-exp
                                       (var-exp caddr)
                                       ((var-exp exp)))))))
                              (if-exp
                                (app-exp
                                  (var-exp equal?)
                                  ((app-exp (var-exp car) ((var-exp exp)))
                                    (lit-exp and-exp)))
                                (if-exp
                                  (app-exp
                                    (var-exp null?)
                                    ((app-exp (var-exp cadr) ((var-exp exp)))))
                                  (app-exp
                                    (var-exp list)
                                    ((lit-exp lit-exp) (lit-exp #t)))
                                  (if-exp
                                    (app-exp
                                      (var-exp null?)
                                      ((app-exp
                                         (var-exp cdr)
                                         ((app-exp
                                            (var-exp cadr)
                                            ((var-exp exp)))))))
                                    (app-exp
                                      (var-exp expand-syntax)
                                      ((app-exp
                                         (var-exp car)
                                         ((app-exp
                                            (var-exp cadr)
                                            ((var-exp exp)))))))
                                    (app-exp
                                      (var-exp expand-syntax)
                                      ((app-exp
                                         (var-exp list)
                                         ((lit-exp if-exp)
                                           (app-exp
                                             (var-exp car)
                                             ((app-exp
                                                (var-exp cadr)
                                                ((var-exp exp)))))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp and-exp)
                                               (app-exp
                                                 (var-exp cdr)
                                                 ((app-exp
                                                    (var-exp cadr)
                                                    ((var-exp exp)))))))
                                           (app-exp
                                             (var-exp list)
                                             ((lit-exp lit-exp)
                                               (lit-exp #f)))))))))
                                (if-exp
                                  (app-exp
                                    (var-exp equal?)
                                    ((app-exp (var-exp car) ((var-exp exp)))
                                      (lit-exp or-exp)))
                                  (if-exp
                                    (app-exp
                                      (var-exp null?)
                                      ((app-exp
                                         (var-exp cadr)
                                         ((var-exp exp)))))
                                    (app-exp
                                      (var-exp list)
                                      ((lit-exp lit-exp) (lit-exp #f)))
                                    (if-exp
                                      (app-exp
                                        (var-exp null?)
                                        ((app-exp
                                           (var-exp cdr)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp exp)))))))
                                      (app-exp
                                        (var-exp expand-syntax)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp exp)))))))
                                      (app-exp
                                        (var-exp expand-syntax)
                                        ((app-exp
                                           (var-exp list)
                                           ((lit-exp let-exp)
                                             (app-exp
                                               (var-exp cons)
                                               ((lit-exp sys-var)
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp tempVal)))))
                                             (app-exp
                                               (var-exp list)
                                               ((app-exp
                                                  (var-exp car)
                                                  ((app-exp
                                                     (var-exp cadr)
                                                     ((var-exp exp)))))))
                                             (app-exp
                                               (var-exp list)
                                               ((lit-exp if-exp)
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp var-exp)
                                                     (app-exp
                                                       (var-exp cons)
                                                       ((lit-exp sys-var)
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp
                                                              tempVal)))))))
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp var-exp)
                                                     (app-exp
                                                       (var-exp cons)
                                                       ((lit-exp sys-var)
                                                         (app-exp
                                                           (var-exp list)
                                                           ((lit-exp
                                                              tempVal)))))))
                                                 (app-exp
                                                   (var-exp list)
                                                   ((lit-exp or-exp)
                                                     (app-exp
                                                       (var-exp cdr)
                                                       ((app-exp
                                                          (var-exp cadr)
                                                          ((var-exp
                                                             exp)))))))))))))))
                                  (if-exp
                                    (app-exp
                                      (var-exp equal?)
                                      ((app-exp (var-exp car) ((var-exp exp)))
                                        (lit-exp cond-exp)))
                                    (if-exp
                                      (app-exp
                                        (var-exp null?)
                                        ((app-exp
                                           (var-exp cadr)
                                           ((var-exp exp)))))
                                      (lit-exp ())
                                      (if-exp
                                        (lit-exp #t)
                                        (app-exp
                                          (var-exp expand-syntax)
                                          ((app-exp
                                             (var-exp list)
                                             ((lit-exp if-exp)
                                               (app-exp
                                                 (var-exp caar)
                                                 ((app-exp
                                                    (var-exp cadr)
                                                    ((var-exp exp)))))
                                               (app-exp
                                                 (var-exp cadar)
                                                 ((app-exp
                                                    (var-exp cadr)
                                                    ((var-exp exp)))))
                                               (app-exp
                                                 (var-exp list)
                                                 ((lit-exp cond-exp)
                                                   (app-exp
                                                     (var-exp cdr)
                                                     ((app-exp
                                                        (var-exp cadr)
                                                        ((var-exp exp)))))))))))
                                        ()))
                                    (if-exp
                                      (app-exp
                                        (var-exp equal?)
                                        ((app-exp (var-exp car) ((var-exp exp)))
                                          (lit-exp case-exp)))
                                      (app-exp
                                        (lambda-exp
                                          (case-key)
                                          (begin-exp
                                            ((if-exp
                                               (app-exp
                                                 (var-exp null?)
                                                 ((app-exp
                                                    (var-exp caddr)
                                                    ((var-exp exp)))))
                                               (lit-exp ())
                                               (if-exp
                                                 (lit-exp #t)
                                                 (app-exp
                                                   (var-exp expand-syntax)
                                                   ((app-exp
                                                      (var-exp list)
                                                      ((lit-exp if-exp)
                                                        (app-exp
                                                          (var-exp list)
                                                          ((lit-exp or-exp)
                                                            (app-exp
                                                              (var-exp map)
                                                              ((lambda-exp
                                                                 (ls)
                                                                 (app-exp
                                                                   (var-exp
                                                                     list)
                                                                   ((lit-exp
                                                                      app-exp)
                                                                     (app-exp
                                                                       (var-exp
                                                                         list)
                                                                       ((lit-exp
                                                                          var-exp)
                                                                         (lit-exp
                                                                           equal?)))
                                                                     (app-exp
                                                                       (var-exp
                                                                         list)
                                                                       ((var-exp
                                                                          ls)
                                                                         (var-exp
                                                                           case-key))))))
                                                                (app-exp
                                                                  (var-exp caar)
                                                                  ((app-exp
                                                                     (var-exp
                                                                       caddr)
                                                                     ((var-exp
                                                                        exp)))))))))
                                                        (app-exp
                                                          (var-exp cadar)
                                                          ((app-exp
                                                             (var-exp caddr)
                                                             ((var-exp exp)))))
                                                        (app-exp
                                                          (var-exp list)
                                                          ((lit-exp case-exp)
                                                            (app-exp
                                                              (var-exp cadr)
                                                              ((var-exp exp)))
                                                            (app-exp
                                                              (var-exp cdr)
                                                              ((app-exp
                                                                 (var-exp caddr)
                                                                 ((var-exp
                                                                    exp)))))))))))
                                                 ())))))
                                        ((app-exp
                                           (var-exp expand-syntax)
                                           ((app-exp
                                              (var-exp cadr)
                                              ((var-exp exp)))))))
                                      (if-exp
                                        (lit-exp #t)
                                        (var-exp exp)
                                        ()))))))))))))))))
        ())
      ((var-exp +))
      (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | |(apply-proc (primitive null?) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc null? ((var-exp +)) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp lambda-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc
       equal?
       (var-exp lambda-exp)
       (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp app-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp app-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc (primitive equal?) (var-exp if-exp) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp if-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp set!-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp set!-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp letrec-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc
       equal?
       (var-exp letrec-exp)
       (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp let-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp let-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp named-let-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc
       equal?
       (var-exp named-let-exp)
       (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp let*-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp let*-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp begin-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc
       equal?
       (var-exp begin-exp)
       (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp define-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc
       equal?
       (var-exp define-exp)
       (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp and-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp and-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc (primitive equal?) (var-exp or-exp) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp or-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp cond-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp cond-exp) (((exp) . #((var-exp +)))))
| | |#f
| | |(apply-proc (primitive car) ((var-exp +)) (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp) . #((var-exp +)))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp case-exp)
       (((exp) . #((var-exp +)))))
| | |(apply-primitive-proc equal? (var-exp case-exp) (((exp) . #((var-exp +)))))
| | |#f
| | (var-exp +)
| |(apply-proc
     (primitive list)
     (app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))
     (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| |(apply-primitive-proc
     list
     (app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))
     (((exp) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| |(app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))
| (apply-proc
    (closure-record
      (expanded-tree)
      (app-exp
        (lambda-exp (result) (begin-exp ((var-exp result))))
        ((app-exp (var-exp top-level-eval) ((var-exp expanded-tree)))))
      (((parse-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
        ((exp) . #((+ 1 2)))))
    ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
    (((parse-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
      ((exp) . #((+ 1 2)))))
| |(apply-proc
     (closure-record
       (form)
       (if-exp
         (app-exp
           (var-exp equal?)
           ((app-exp (var-exp car) ((var-exp form))) (lit-exp define-exp)))
         (app-exp
           (var-exp extend-global-env)
           ((app-exp (var-exp cadr) ((var-exp form)))
             (app-exp
               (var-exp eval-expression)
               ((app-exp (var-exp caddr) ((var-exp form)))
                 (app-exp (var-exp empty-env) (()))))))
         (if-exp
           (lit-exp #t)
           (app-exp
             (var-exp eval-expression)
             ((var-exp form) (app-exp (var-exp empty-env) (()))))
           ()))
       ())
     ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
     (((expanded-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
       ((parse-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
       ((exp) . #((+ 1 2)))))
| | (apply-proc
      (primitive car)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((form) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      car
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((form) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | app-exp
| | (apply-proc
      (primitive equal?)
      (app-exp define-exp)
      (((form) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-primitive-proc
      equal?
      (app-exp define-exp)
      (((form) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | #f
| | (apply-proc
      (closure-record () (lit-exp ()) ())
      (())
      (((form) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | ()
| |(apply-proc
     (closure-record
       (exp env)
       (if-exp
         (app-exp (var-exp null?) ((var-exp exp)))
         (lit-exp ())
         (if-exp
           (app-exp
             (var-exp equal?)
             ((app-exp (var-exp car) ((var-exp exp))) (lit-exp var-exp)))
           (app-exp
             (var-exp apply-env)
             ((var-exp env) (app-exp (var-exp cadr) ((var-exp exp)))))
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lit-exp)))
             (app-exp (var-exp cadr) ((var-exp exp)))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lambda-exp)))
               (app-exp
                 (var-exp make-closure)
                 ((app-exp (var-exp cadr) ((var-exp exp)))
                   (app-exp (var-exp caddr) ((var-exp exp)))
                   (var-exp env)))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
                 (app-exp
                   (lambda-exp
                     (procedure)
                     (app-exp
                       (lambda-exp
                         (arg)
                         (begin-exp
                           ((app-exp
                              (var-exp apply-proc)
                              ((var-exp procedure)
                                (var-exp arg)
                                (var-exp env))))))
                       ((app-exp
                          (var-exp map)
                          ((lambda-exp
                             (operand)
                             (app-exp
                               (var-exp eval-expression)
                               ((var-exp operand) (var-exp env))))
                            (app-exp (var-exp caddr) ((var-exp exp))))))))
                   ((app-exp
                      (var-exp eval-expression)
                      ((app-exp (var-exp cadr) ((var-exp exp)))
                        (var-exp env)))))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp))) (lit-exp if-exp)))
                   (if-exp
                     (app-exp
                       (var-exp eval-expression)
                       ((app-exp (var-exp cadr) ((var-exp exp))) (var-exp env)))
                     (app-exp
                       (var-exp eval-expression)
                       ((app-exp (var-exp caddr) ((var-exp exp)))
                         (var-exp env)))
                     (if-exp
                       (app-exp
                         (var-exp not)
                         ((app-exp
                            (var-exp null?)
                            ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                       (app-exp
                         (var-exp eval-expression)
                         ((app-exp
                            (var-exp car)
                            ((app-exp (var-exp cdddr) ((var-exp exp)))))
                           (var-exp env)))
                       (lit-exp ())))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp set!-exp)))
                     (app-exp
                       (var-exp change-env)
                       ((var-exp env)
                         (app-exp (var-exp cadr) ((var-exp exp)))
                         (app-exp
                           (var-exp eval-expression)
                           ((app-exp (var-exp caddr) ((var-exp exp)))
                             (var-exp env)))))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp letrec-exp)))
                       (if-exp
                         (lit-exp #t)
                         (app-exp
                           (lambda-exp
                             (vals)
                             (app-exp
                               (lambda-exp
                                 (letrec-env)
                                 (begin-exp
                                   ((app-exp
                                      (var-exp eval-expression)
                                      ((app-exp
                                         (var-exp car)
                                         ((app-exp
                                            (var-exp cdddr)
                                            ((var-exp exp)))))
                                        (var-exp letrec-env))))))
                               ((app-exp
                                  (var-exp extend-env-recur)
                                  ((app-exp (var-exp cadr) ((var-exp exp)))
                                    (var-exp vals)
                                    (var-exp env))))))
                           ((app-exp
                              (var-exp map)
                              ((lambda-exp
                                 (v)
                                 (app-exp
                                   (var-exp eval-expression)
                                   ((var-exp v) (var-exp env))))
                                (app-exp (var-exp caddr) ((var-exp exp)))))))
                         ())
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp begin-exp)))
                         (letrec-exp
                           (eval-begin)
                           ((lambda-exp
                              (exprs)
                              (if-exp
                                (app-exp (var-exp null?) ((var-exp exprs)))
                                (lit-exp ())
                                (if-exp
                                  (app-exp
                                    (var-exp null?)
                                    ((app-exp (var-exp cdr) ((var-exp exprs)))))
                                  (app-exp
                                    (var-exp eval-expression)
                                    ((app-exp (var-exp car) ((var-exp exprs)))
                                      (var-exp env)))
                                  (if-exp
                                    (lit-exp #t)
                                    (begin-exp
                                      ((app-exp
                                         (var-exp eval-expression)
                                         ((app-exp
                                            (var-exp car)
                                            ((var-exp exprs)))
                                           (var-exp env)))
                                        (app-exp
                                          (var-exp eval-begin)
                                          ((app-exp
                                             (var-exp cdr)
                                             ((var-exp exprs)))))))
                                    ())))))
                           (begin-exp
                             ((app-exp
                                (var-exp eval-begin)
                                ((app-exp (var-exp cadr) ((var-exp exp))))))))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp while-exp)))
                           (letrec-exp
                             (loop)
                             ((lambda-exp
                                ()
                                (if-exp
                                  (app-exp
                                    (var-exp eval-expression)
                                    ((app-exp (var-exp cadr) ((var-exp exp)))
                                      (var-exp env)))
                                  (begin-exp
                                    ((app-exp
                                       (var-exp eval-expression)
                                       ((app-exp
                                          (var-exp caddr)
                                          ((var-exp exp)))
                                         (var-exp env)))
                                      (app-exp (var-exp loop) (()))))
                                  ())))
                             (begin-exp ((app-exp (var-exp loop) (())))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp define-exp)))
                             (if-exp
                               (app-exp (var-exp null?) ((var-exp env)))
                               (app-exp
                                 (var-exp extend-global-env)
                                 ((app-exp (var-exp cadr) ((var-exp exp)))
                                   (app-exp
                                     (var-exp eval-expression)
                                     ((app-exp (var-exp caddr) ((var-exp exp)))
                                       (app-exp (var-exp empty-env) (()))))))
                               (app-exp
                                 (var-exp add-to-env)
                                 ((app-exp (var-exp cadr) ((var-exp exp)))
                                   (app-exp
                                     (var-exp eval-expression)
                                     ((app-exp (var-exp caddr) ((var-exp exp)))
                                       (var-exp env)))
                                   (var-exp env))))
                             ())))))))))))
       ())
     ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ())
     (((form) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))))
| | (apply-proc
      (primitive null?)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      null?
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | #f
| | (apply-proc
      (primitive car)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      car
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | app-exp
| | (apply-proc
      (primitive equal?)
      (app-exp var-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      equal?
      (app-exp var-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | #f
| | (apply-proc
      (primitive car)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      car
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | app-exp
| | (apply-proc
      (primitive equal?)
      (app-exp lit-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      equal?
      (app-exp lit-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | #f
| | (apply-proc
      (primitive car)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      car
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | app-exp
| | (apply-proc
      (primitive equal?)
      (app-exp lambda-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      equal?
      (app-exp lambda-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | #f
| | (apply-proc
      (primitive car)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      car
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | app-exp
| | (apply-proc
      (primitive equal?)
      (app-exp app-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      equal?
      (app-exp app-exp)
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | #t
| | (apply-proc
      (primitive cadr)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      cadr
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (var-exp +)
| | (apply-proc
      (closure-record
        (exp env)
        (if-exp
          (app-exp (var-exp null?) ((var-exp exp)))
          (lit-exp ())
          (if-exp
            (app-exp
              (var-exp equal?)
              ((app-exp (var-exp car) ((var-exp exp))) (lit-exp var-exp)))
            (app-exp
              (var-exp apply-env)
              ((var-exp env) (app-exp (var-exp cadr) ((var-exp exp)))))
            (if-exp
              (app-exp
                (var-exp equal?)
                ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lit-exp)))
              (app-exp (var-exp cadr) ((var-exp exp)))
              (if-exp
                (app-exp
                  (var-exp equal?)
                  ((app-exp (var-exp car) ((var-exp exp)))
                    (lit-exp lambda-exp)))
                (app-exp
                  (var-exp make-closure)
                  ((app-exp (var-exp cadr) ((var-exp exp)))
                    (app-exp (var-exp caddr) ((var-exp exp)))
                    (var-exp env)))
                (if-exp
                  (app-exp
                    (var-exp equal?)
                    ((app-exp (var-exp car) ((var-exp exp))) (lit-exp app-exp)))
                  (app-exp
                    (lambda-exp
                      (procedure)
                      (app-exp
                        (lambda-exp
                          (arg)
                          (begin-exp
                            ((app-exp
                               (var-exp apply-proc)
                               ((var-exp procedure)
                                 (var-exp arg)
                                 (var-exp env))))))
                        ((app-exp
                           (var-exp map)
                           ((lambda-exp
                              (operand)
                              (app-exp
                                (var-exp eval-expression)
                                ((var-exp operand) (var-exp env))))
                             (app-exp (var-exp caddr) ((var-exp exp))))))))
                    ((app-exp
                       (var-exp eval-expression)
                       ((app-exp (var-exp cadr) ((var-exp exp)))
                         (var-exp env)))))
                  (if-exp
                    (app-exp
                      (var-exp equal?)
                      ((app-exp (var-exp car) ((var-exp exp)))
                        (lit-exp if-exp)))
                    (if-exp
                      (app-exp
                        (var-exp eval-expression)
                        ((app-exp (var-exp cadr) ((var-exp exp)))
                          (var-exp env)))
                      (app-exp
                        (var-exp eval-expression)
                        ((app-exp (var-exp caddr) ((var-exp exp)))
                          (var-exp env)))
                      (if-exp
                        (app-exp
                          (var-exp not)
                          ((app-exp
                             (var-exp null?)
                             ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                        (app-exp
                          (var-exp eval-expression)
                          ((app-exp
                             (var-exp car)
                             ((app-exp (var-exp cdddr) ((var-exp exp)))))
                            (var-exp env)))
                        (lit-exp ())))
                    (if-exp
                      (app-exp
                        (var-exp equal?)
                        ((app-exp (var-exp car) ((var-exp exp)))
                          (lit-exp set!-exp)))
                      (app-exp
                        (var-exp change-env)
                        ((var-exp env)
                          (app-exp (var-exp cadr) ((var-exp exp)))
                          (app-exp
                            (var-exp eval-expression)
                            ((app-exp (var-exp caddr) ((var-exp exp)))
                              (var-exp env)))))
                      (if-exp
                        (app-exp
                          (var-exp equal?)
                          ((app-exp (var-exp car) ((var-exp exp)))
                            (lit-exp letrec-exp)))
                        (if-exp
                          (lit-exp #t)
                          (app-exp
                            (lambda-exp
                              (vals)
                              (app-exp
                                (lambda-exp
                                  (letrec-env)
                                  (begin-exp
                                    ((app-exp
                                       (var-exp eval-expression)
                                       ((app-exp
                                          (var-exp car)
                                          ((app-exp
                                             (var-exp cdddr)
                                             ((var-exp exp)))))
                                         (var-exp letrec-env))))))
                                ((app-exp
                                   (var-exp extend-env-recur)
                                   ((app-exp (var-exp cadr) ((var-exp exp)))
                                     (var-exp vals)
                                     (var-exp env))))))
                            ((app-exp
                               (var-exp map)
                               ((lambda-exp
                                  (v)
                                  (app-exp
                                    (var-exp eval-expression)
                                    ((var-exp v) (var-exp env))))
                                 (app-exp (var-exp caddr) ((var-exp exp)))))))
                          ())
                        (if-exp
                          (app-exp
                            (var-exp equal?)
                            ((app-exp (var-exp car) ((var-exp exp)))
                              (lit-exp begin-exp)))
                          (letrec-exp
                            (eval-begin)
                            ((lambda-exp
                               (exprs)
                               (if-exp
                                 (app-exp (var-exp null?) ((var-exp exprs)))
                                 (lit-exp ())
                                 (if-exp
                                   (app-exp
                                     (var-exp null?)
                                     ((app-exp
                                        (var-exp cdr)
                                        ((var-exp exprs)))))
                                   (app-exp
                                     (var-exp eval-expression)
                                     ((app-exp (var-exp car) ((var-exp exprs)))
                                       (var-exp env)))
                                   (if-exp
                                     (lit-exp #t)
                                     (begin-exp
                                       ((app-exp
                                          (var-exp eval-expression)
                                          ((app-exp
                                             (var-exp car)
                                             ((var-exp exprs)))
                                            (var-exp env)))
                                         (app-exp
                                           (var-exp eval-begin)
                                           ((app-exp
                                              (var-exp cdr)
                                              ((var-exp exprs)))))))
                                     ())))))
                            (begin-exp
                              ((app-exp
                                 (var-exp eval-begin)
                                 ((app-exp (var-exp cadr) ((var-exp exp))))))))
                          (if-exp
                            (app-exp
                              (var-exp equal?)
                              ((app-exp (var-exp car) ((var-exp exp)))
                                (lit-exp while-exp)))
                            (letrec-exp
                              (loop)
                              ((lambda-exp
                                 ()
                                 (if-exp
                                   (app-exp
                                     (var-exp eval-expression)
                                     ((app-exp (var-exp cadr) ((var-exp exp)))
                                       (var-exp env)))
                                   (begin-exp
                                     ((app-exp
                                        (var-exp eval-expression)
                                        ((app-exp
                                           (var-exp caddr)
                                           ((var-exp exp)))
                                          (var-exp env)))
                                       (app-exp (var-exp loop) (()))))
                                   ())))
                              (begin-exp ((app-exp (var-exp loop) (())))))
                            (if-exp
                              (app-exp
                                (var-exp equal?)
                                ((app-exp (var-exp car) ((var-exp exp)))
                                  (lit-exp define-exp)))
                              (if-exp
                                (app-exp (var-exp null?) ((var-exp env)))
                                (app-exp
                                  (var-exp extend-global-env)
                                  ((app-exp (var-exp cadr) ((var-exp exp)))
                                    (app-exp
                                      (var-exp eval-expression)
                                      ((app-exp (var-exp caddr) ((var-exp exp)))
                                        (app-exp (var-exp empty-env) (()))))))
                                (app-exp
                                  (var-exp add-to-env)
                                  ((app-exp (var-exp cadr) ((var-exp exp)))
                                    (app-exp
                                      (var-exp eval-expression)
                                      ((app-exp (var-exp caddr) ((var-exp exp)))
                                        (var-exp env)))
                                    (var-exp env))))
                              ())))))))))))
        ())
      ((var-exp +) ())
      (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | |(apply-proc
       (primitive null?)
       ((var-exp +))
       (((exp env) . #((var-exp +) ()))))
| | |(apply-primitive-proc
       null?
       ((var-exp +))
       (((exp env) . #((var-exp +) ()))))
| | |#f
| | |(apply-proc
       (primitive car)
       ((var-exp +))
       (((exp env) . #((var-exp +) ()))))
| | |(apply-primitive-proc car ((var-exp +)) (((exp env) . #((var-exp +) ()))))
| | |var-exp
| | |(apply-proc
       (primitive equal?)
       (var-exp var-exp)
       (((exp env) . #((var-exp +) ()))))
| | |(apply-primitive-proc
       equal?
       (var-exp var-exp)
       (((exp env) . #((var-exp +) ()))))
| | |#t
| | |(apply-proc
       (primitive cadr)
       ((var-exp +))
       (((exp env) . #((var-exp +) ()))))
| | |(apply-primitive-proc cadr ((var-exp +)) (((exp env) . #((var-exp +) ()))))
| | |+
| | (apply-proc
      (closure-record
        (env sym)
        (if-exp
          (app-exp
            (lambda-exp
              (sys-var tempVal)
              (if-exp
                (var-exp (sys-var tempVal))
                (var-exp (sys-var tempVal))
                (app-exp
                  (var-exp null?)
                  ((app-exp (var-exp car) ((var-exp env)))))))
            ((app-exp (var-exp null?) ((var-exp env)))))
          (app-exp (var-exp apply-global-env) ((var-exp sym)))
          (app-exp
            (lambda-exp
              (syms)
              (app-exp
                (lambda-exp
                  (vals)
                  (app-exp
                    (lambda-exp
                      (env)
                      (begin-exp
                        ((app-exp
                           (lambda-exp
                             (pos)
                             (begin-exp
                               ((if-exp
                                  (app-exp (var-exp number?) ((var-exp pos)))
                                  (app-exp
                                    (lambda-exp
                                      (temp)
                                      (begin-exp
                                        ((if-exp
                                           (app-exp
                                             (var-exp vector?)
                                             ((var-exp temp)))
                                           (app-exp
                                             (var-exp vector->list)
                                             ((var-exp temp)))
                                           (var-exp temp)))))
                                    ((app-exp
                                       (var-exp vector-ref)
                                       ((var-exp vals) (var-exp pos)))))
                                  (app-exp
                                    (var-exp apply-env)
                                    ((var-exp env) (var-exp sym)))))))
                           ((app-exp
                              (var-exp find-position)
                              ((var-exp sym) (var-exp syms))))))))
                    ((app-exp (var-exp cdr) ((var-exp env))))))
                ((if-exp
                   (app-exp
                     (var-exp =)
                     ((app-exp
                        (var-exp length)
                        ((app-exp (var-exp caar) ((var-exp env)))))
                       (lit-exp 2)))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp caaar) ((var-exp env)))
                         (lit-exp variable)))
                     (app-exp
                       (var-exp vector)
                       ((app-exp (var-exp cdar) ((var-exp env)))))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp caaar) ((var-exp env)))
                           (lit-exp improper)))
                       (app-exp
                         (var-exp list->vector)
                         ((app-exp
                            (var-exp apply-env-improper)
                            ((app-exp (var-exp length) ((var-exp syms)))
                              (app-exp
                                (var-exp vector->list)
                                ((app-exp (var-exp cdar) ((var-exp env)))))))))
                       (if-exp
                         (lit-exp #t)
                         (app-exp
                           (var-exp cdr)
                           ((app-exp (var-exp car) ((var-exp env)))))
                         ())))
                   (app-exp
                     (var-exp cdr)
                     ((app-exp (var-exp car) ((var-exp env)))))))))
            ((if-exp
               (app-exp
                 (var-exp =)
                 ((app-exp
                    (var-exp length)
                    ((app-exp (var-exp caar) ((var-exp env)))))
                   (lit-exp 2)))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp caaar) ((var-exp env)))
                     (lit-exp variable)))
                 (app-exp (var-exp cdaar) ((var-exp env)))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp caaar) ((var-exp env)))
                       (lit-exp improper)))
                   (app-exp
                     (var-exp car)
                     ((app-exp (var-exp cdaar) ((var-exp env)))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp caaar) ((var-exp env)))
                         (lit-exp sys-var)))
                     (app-exp
                       (var-exp list)
                       ((app-exp (var-exp caar) ((var-exp env)))))
                     (if-exp
                       (lit-exp #t)
                       (app-exp
                         (var-exp car)
                         ((app-exp (var-exp car) ((var-exp env)))))
                       ()))))
               (app-exp
                 (var-exp car)
                 ((app-exp (var-exp car) ((var-exp env)))))))))
        ())
      (() +)
      (((exp env) . #((var-exp +) ()))))
| | |(apply-proc (primitive null?) (()) (((env sym) . #(() +))))
| | |(apply-primitive-proc null? (()) (((env sym) . #(() +))))
| | |#t
| | |(apply-proc
       (closure-record
         (sys-var tempVal)
         (if-exp
           (var-exp (sys-var tempVal))
           (var-exp (sys-var tempVal))
           (app-exp (var-exp null?) ((app-exp (var-exp car) ((var-exp env))))))
         (((env sym) . #(() +))))
       (#t)
       (((env sym) . #(() +))))
| | |#t
| | (apply-proc
      (closure-record
        (sym)
        (app-exp
          (lambda-exp
            (ele)
            (begin-exp
              ((if-exp
                 (var-exp ele)
                 (app-exp (var-exp cadr) ((var-exp ele)))
                 (begin-exp
                   ((app-exp (var-exp display) ((var-exp sym)))
                     (app-exp (var-exp read) (()))))))))
          ((app-exp (var-exp assq) ((var-exp sym) (var-exp global-env)))))
        ())
      (+)
      (((env sym) . #(() +))))
| | |(apply-proc
       (primitive assq)
       (+ ((+ (primitive +)) (- (primitive -)) (* (primitive *))
           (/ (primitive /)) (add1 (primitive add1)) (sub1 (primitive sub1))
           (max (primitive max)) (display (primitive display))
           (read (primitive read)) (zero? (primitive zero?))
           (not (primitive not)) (= (primitive =)) (< (primitive <))
           (> (primitive >)) (<= (primitive <=)) (>= (primitive >=))
           (close-port (primitive close-port)) (newline (primitive newline))
           (cons (primitive cons)) (list (primitive list))
           (null? (primitive null?)) (eq? (primitive eq?))
           (equal? (primitive equal?)) (eof-object? (primitive eof-object?))
           (write (primitive write)) (atom? (primitive atom?))
           (length (primitive length)) (list->vector (primitive list->vector))
           (list? (primitive list?))
           (open-input-file (primitive open-input-file))
           (pair? (primitive pair?)) (procedure? (primitive procedure?))
           (vector->list (primitive vector->list)) (vector (primitive vector))
           (boolean? (primitive boolean?)) (make-vector (primitive make-vector))
           (vector-ref (primitive vector-ref)) (vector? (primitive vector?))
           (number? (primitive number?)) (string? (primitive string?))
           (symbol? (primitive symbol?)) (set-car! (primitive set-car!))
           (set-cdr! (primitive set-cdr!)) (vector-set! (primitive vector-set!))
           (car (primitive car)) (cdr (primitive cdr)) (caar (primitive caar))
           (cadr (primitive cadr)) (cdar (primitive cdar))
           (cddr (primitive cddr)) (caaar (primitive caaar))
           (load (primitive load)) (caadr (primitive caadr))
           (cadar (primitive cadar)) (cdaar (primitive cdaar))
           (cdddr (primitive cdddr)) (cddar (primitive cddar))
           (cdadr (primitive cdadr)) (caddr (primitive caddr))
           (map (primitive map)) (apply (primitive apply))
           (assq (primitive assq)) (assv (primitive assv))
           (append (primitive append))))
       (((sym) . #(+))))
| | |(apply-primitive-proc
       assq
       (+ ((+ (primitive +)) (- (primitive -)) (* (primitive *))
           (/ (primitive /)) (add1 (primitive add1)) (sub1 (primitive sub1))
           (max (primitive max)) (display (primitive display))
           (read (primitive read)) (zero? (primitive zero?))
           (not (primitive not)) (= (primitive =)) (< (primitive <))
           (> (primitive >)) (<= (primitive <=)) (>= (primitive >=))
           (close-port (primitive close-port)) (newline (primitive newline))
           (cons (primitive cons)) (list (primitive list))
           (null? (primitive null?)) (eq? (primitive eq?))
           (equal? (primitive equal?)) (eof-object? (primitive eof-object?))
           (write (primitive write)) (atom? (primitive atom?))
           (length (primitive length)) (list->vector (primitive list->vector))
           (list? (primitive list?))
           (open-input-file (primitive open-input-file))
           (pair? (primitive pair?)) (procedure? (primitive procedure?))
           (vector->list (primitive vector->list)) (vector (primitive vector))
           (boolean? (primitive boolean?)) (make-vector (primitive make-vector))
           (vector-ref (primitive vector-ref)) (vector? (primitive vector?))
           (number? (primitive number?)) (string? (primitive string?))
           (symbol? (primitive symbol?)) (set-car! (primitive set-car!))
           (set-cdr! (primitive set-cdr!)) (vector-set! (primitive vector-set!))
           (car (primitive car)) (cdr (primitive cdr)) (caar (primitive caar))
           (cadr (primitive cadr)) (cdar (primitive cdar))
           (cddr (primitive cddr)) (caaar (primitive caaar))
           (load (primitive load)) (caadr (primitive caadr))
           (cadar (primitive cadar)) (cdaar (primitive cdaar))
           (cdddr (primitive cdddr)) (cddar (primitive cddar))
           (cdadr (primitive cdadr)) (caddr (primitive caddr))
           (map (primitive map)) (apply (primitive apply))
           (assq (primitive assq)) (assv (primitive assv))
           (append (primitive append))))
       (((sym) . #(+))))
| | |(+ (primitive +))
| | (apply-proc
      (closure-record
        (ele)
        (begin-exp
          ((if-exp
             (var-exp ele)
             (app-exp (var-exp cadr) ((var-exp ele)))
             (begin-exp
               ((app-exp (var-exp display) ((var-exp sym)))
                 (app-exp (var-exp read) (())))))))
        (((sym) . #(+))))
      ((+ (primitive +)))
      (((sym) . #(+))))
| | (apply-proc
      (primitive cadr)
      ((+ (primitive +)))
      (((ele) . #((+ (primitive +)))) ((sym) . #(+))))
| | (apply-primitive-proc
      cadr
      ((+ (primitive +)))
      (((ele) . #((+ (primitive +)))) ((sym) . #(+))))
| | (primitive +)
| |(apply-proc
     (closure-record
       (procedure)
       (app-exp
         (lambda-exp
           (arg)
           (begin-exp
             ((app-exp
                (var-exp apply-proc)
                ((var-exp procedure) (var-exp arg) (var-exp env))))))
         ((app-exp
            (var-exp map)
            ((lambda-exp
               (operand)
               (app-exp
                 (var-exp eval-expression)
                 ((var-exp operand) (var-exp env))))
              (app-exp (var-exp caddr) ((var-exp exp)))))))
       (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
     ((primitive +))
     (((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-proc
      (primitive caddr)
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((procedure) . #((primitive +)))
        ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      caddr
      ((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))))
      (((procedure) . #((primitive +)))
        ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | ((lit-exp 1) (lit-exp 2))
| | (apply-proc
      (primitive map)
      ((closure-record
         (operand)
         (app-exp (var-exp eval-expression) ((var-exp operand) (var-exp env)))
         (((procedure) . #((primitive +)))
           ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
        ((lit-exp 1) (lit-exp 2)))
      (((procedure) . #((primitive +)))
        ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-primitive-proc
      map
      ((closure-record
         (operand)
         (app-exp (var-exp eval-expression) ((var-exp operand) (var-exp env)))
         (((procedure) . #((primitive +)))
           ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
        ((lit-exp 1) (lit-exp 2)))
      (((procedure) . #((primitive +)))
        ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | |(apply-proc
       (closure-record
         (operand)
         (app-exp (var-exp eval-expression) ((var-exp operand) (var-exp env)))
         (((procedure) . #((primitive +)))
           ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
       ((lit-exp 2))
       (((procedure) . #((primitive +)))
         ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | |(apply-proc
       (closure-record
         (exp env)
         (if-exp
           (app-exp (var-exp null?) ((var-exp exp)))
           (lit-exp ())
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp var-exp)))
             (app-exp
               (var-exp apply-env)
               ((var-exp env) (app-exp (var-exp cadr) ((var-exp exp)))))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lit-exp)))
               (app-exp (var-exp cadr) ((var-exp exp)))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp)))
                     (lit-exp lambda-exp)))
                 (app-exp
                   (var-exp make-closure)
                   ((app-exp (var-exp cadr) ((var-exp exp)))
                     (app-exp (var-exp caddr) ((var-exp exp)))
                     (var-exp env)))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp)))
                       (lit-exp app-exp)))
                   (app-exp
                     (lambda-exp
                       (procedure)
                       (app-exp
                         (lambda-exp
                           (arg)
                           (begin-exp
                             ((app-exp
                                (var-exp apply-proc)
                                ((var-exp procedure)
                                  (var-exp arg)
                                  (var-exp env))))))
                         ((app-exp
                            (var-exp map)
                            ((lambda-exp
                               (operand)
                               (app-exp
                                 (var-exp eval-expression)
                                 ((var-exp operand) (var-exp env))))
                              (app-exp (var-exp caddr) ((var-exp exp))))))))
                     ((app-exp
                        (var-exp eval-expression)
                        ((app-exp (var-exp cadr) ((var-exp exp)))
                          (var-exp env)))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp if-exp)))
                     (if-exp
                       (app-exp
                         (var-exp eval-expression)
                         ((app-exp (var-exp cadr) ((var-exp exp)))
                           (var-exp env)))
                       (app-exp
                         (var-exp eval-expression)
                         ((app-exp (var-exp caddr) ((var-exp exp)))
                           (var-exp env)))
                       (if-exp
                         (app-exp
                           (var-exp not)
                           ((app-exp
                              (var-exp null?)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                         (app-exp
                           (var-exp eval-expression)
                           ((app-exp
                              (var-exp car)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))
                             (var-exp env)))
                         (lit-exp ())))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp set!-exp)))
                       (app-exp
                         (var-exp change-env)
                         ((var-exp env)
                           (app-exp (var-exp cadr) ((var-exp exp)))
                           (app-exp
                             (var-exp eval-expression)
                             ((app-exp (var-exp caddr) ((var-exp exp)))
                               (var-exp env)))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp letrec-exp)))
                         (if-exp
                           (lit-exp #t)
                           (app-exp
                             (lambda-exp
                               (vals)
                               (app-exp
                                 (lambda-exp
                                   (letrec-env)
                                   (begin-exp
                                     ((app-exp
                                        (var-exp eval-expression)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp cdddr)
                                              ((var-exp exp)))))
                                          (var-exp letrec-env))))))
                                 ((app-exp
                                    (var-exp extend-env-recur)
                                    ((app-exp (var-exp cadr) ((var-exp exp)))
                                      (var-exp vals)
                                      (var-exp env))))))
                             ((app-exp
                                (var-exp map)
                                ((lambda-exp
                                   (v)
                                   (app-exp
                                     (var-exp eval-expression)
                                     ((var-exp v) (var-exp env))))
                                  (app-exp (var-exp caddr) ((var-exp exp)))))))
                           ())
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp begin-exp)))
                           (letrec-exp
                             (eval-begin)
                             ((lambda-exp
                                (exprs)
                                (if-exp
                                  (app-exp (var-exp null?) ((var-exp exprs)))
                                  (lit-exp ())
                                  (if-exp
                                    (app-exp
                                      (var-exp null?)
                                      ((app-exp
                                         (var-exp cdr)
                                         ((var-exp exprs)))))
                                    (app-exp
                                      (var-exp eval-expression)
                                      ((app-exp (var-exp car) ((var-exp exprs)))
                                        (var-exp env)))
                                    (if-exp
                                      (lit-exp #t)
                                      (begin-exp
                                        ((app-exp
                                           (var-exp eval-expression)
                                           ((app-exp
                                              (var-exp car)
                                              ((var-exp exprs)))
                                             (var-exp env)))
                                          (app-exp
                                            (var-exp eval-begin)
                                            ((app-exp
                                               (var-exp cdr)
                                               ((var-exp exprs)))))))
                                      ())))))
                             (begin-exp
                               ((app-exp
                                  (var-exp eval-begin)
                                  ((app-exp (var-exp cadr) ((var-exp exp))))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp while-exp)))
                             (letrec-exp
                               (loop)
                               ((lambda-exp
                                  ()
                                  (if-exp
                                    (app-exp
                                      (var-exp eval-expression)
                                      ((app-exp (var-exp cadr) ((var-exp exp)))
                                        (var-exp env)))
                                    (begin-exp
                                      ((app-exp
                                         (var-exp eval-expression)
                                         ((app-exp
                                            (var-exp caddr)
                                            ((var-exp exp)))
                                           (var-exp env)))
                                        (app-exp (var-exp loop) (()))))
                                    ())))
                               (begin-exp ((app-exp (var-exp loop) (())))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp exp)))
                                   (lit-exp define-exp)))
                               (if-exp
                                 (app-exp (var-exp null?) ((var-exp env)))
                                 (app-exp
                                   (var-exp extend-global-env)
                                   ((app-exp (var-exp cadr) ((var-exp exp)))
                                     (app-exp
                                       (var-exp eval-expression)
                                       ((app-exp
                                          (var-exp caddr)
                                          ((var-exp exp)))
                                         (app-exp (var-exp empty-env) (()))))))
                                 (app-exp
                                   (var-exp add-to-env)
                                   ((app-exp (var-exp cadr) ((var-exp exp)))
                                     (app-exp
                                       (var-exp eval-expression)
                                       ((app-exp
                                          (var-exp caddr)
                                          ((var-exp exp)))
                                         (var-exp env)))
                                     (var-exp env))))
                               ())))))))))))
         ())
       ((lit-exp 2) ())
       (((operand) . #((lit-exp 2)))
         ((procedure) . #((primitive +)))
         ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | | (apply-proc
        (primitive null?)
        ((lit-exp 2))
        (((exp env) . #((lit-exp 2) ()))))
| | | (apply-primitive-proc
        null?
        ((lit-exp 2))
        (((exp env) . #((lit-exp 2) ()))))
| | | #f
| | | (apply-proc
        (primitive car)
        ((lit-exp 2))
        (((exp env) . #((lit-exp 2) ()))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp env) . #((lit-exp 2) ()))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp var-exp)
        (((exp env) . #((lit-exp 2) ()))))
| | | (apply-primitive-proc
        equal?
        (lit-exp var-exp)
        (((exp env) . #((lit-exp 2) ()))))
| | | #f
| | | (apply-proc
        (primitive car)
        ((lit-exp 2))
        (((exp env) . #((lit-exp 2) ()))))
| | | (apply-primitive-proc car ((lit-exp 2)) (((exp env) . #((lit-exp 2) ()))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp lit-exp)
        (((exp env) . #((lit-exp 2) ()))))
| | | (apply-primitive-proc
        equal?
        (lit-exp lit-exp)
        (((exp env) . #((lit-exp 2) ()))))
| | | #t
| | |(apply-proc
       (primitive cadr)
       ((lit-exp 2))
       (((exp env) . #((lit-exp 2) ()))))
| | |(apply-primitive-proc cadr ((lit-exp 2)) (((exp env) . #((lit-exp 2) ()))))
| | |2
| | |(apply-proc
       (closure-record
         (operand)
         (app-exp (var-exp eval-expression) ((var-exp operand) (var-exp env)))
         (((procedure) . #((primitive +)))
           ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
       ((lit-exp 1))
       (((procedure) . #((primitive +)))
         ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | |(apply-proc
       (closure-record
         (exp env)
         (if-exp
           (app-exp (var-exp null?) ((var-exp exp)))
           (lit-exp ())
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp exp))) (lit-exp var-exp)))
             (app-exp
               (var-exp apply-env)
               ((var-exp env) (app-exp (var-exp cadr) ((var-exp exp)))))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp exp))) (lit-exp lit-exp)))
               (app-exp (var-exp cadr) ((var-exp exp)))
               (if-exp
                 (app-exp
                   (var-exp equal?)
                   ((app-exp (var-exp car) ((var-exp exp)))
                     (lit-exp lambda-exp)))
                 (app-exp
                   (var-exp make-closure)
                   ((app-exp (var-exp cadr) ((var-exp exp)))
                     (app-exp (var-exp caddr) ((var-exp exp)))
                     (var-exp env)))
                 (if-exp
                   (app-exp
                     (var-exp equal?)
                     ((app-exp (var-exp car) ((var-exp exp)))
                       (lit-exp app-exp)))
                   (app-exp
                     (lambda-exp
                       (procedure)
                       (app-exp
                         (lambda-exp
                           (arg)
                           (begin-exp
                             ((app-exp
                                (var-exp apply-proc)
                                ((var-exp procedure)
                                  (var-exp arg)
                                  (var-exp env))))))
                         ((app-exp
                            (var-exp map)
                            ((lambda-exp
                               (operand)
                               (app-exp
                                 (var-exp eval-expression)
                                 ((var-exp operand) (var-exp env))))
                              (app-exp (var-exp caddr) ((var-exp exp))))))))
                     ((app-exp
                        (var-exp eval-expression)
                        ((app-exp (var-exp cadr) ((var-exp exp)))
                          (var-exp env)))))
                   (if-exp
                     (app-exp
                       (var-exp equal?)
                       ((app-exp (var-exp car) ((var-exp exp)))
                         (lit-exp if-exp)))
                     (if-exp
                       (app-exp
                         (var-exp eval-expression)
                         ((app-exp (var-exp cadr) ((var-exp exp)))
                           (var-exp env)))
                       (app-exp
                         (var-exp eval-expression)
                         ((app-exp (var-exp caddr) ((var-exp exp)))
                           (var-exp env)))
                       (if-exp
                         (app-exp
                           (var-exp not)
                           ((app-exp
                              (var-exp null?)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))))
                         (app-exp
                           (var-exp eval-expression)
                           ((app-exp
                              (var-exp car)
                              ((app-exp (var-exp cdddr) ((var-exp exp)))))
                             (var-exp env)))
                         (lit-exp ())))
                     (if-exp
                       (app-exp
                         (var-exp equal?)
                         ((app-exp (var-exp car) ((var-exp exp)))
                           (lit-exp set!-exp)))
                       (app-exp
                         (var-exp change-env)
                         ((var-exp env)
                           (app-exp (var-exp cadr) ((var-exp exp)))
                           (app-exp
                             (var-exp eval-expression)
                             ((app-exp (var-exp caddr) ((var-exp exp)))
                               (var-exp env)))))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((app-exp (var-exp car) ((var-exp exp)))
                             (lit-exp letrec-exp)))
                         (if-exp
                           (lit-exp #t)
                           (app-exp
                             (lambda-exp
                               (vals)
                               (app-exp
                                 (lambda-exp
                                   (letrec-env)
                                   (begin-exp
                                     ((app-exp
                                        (var-exp eval-expression)
                                        ((app-exp
                                           (var-exp car)
                                           ((app-exp
                                              (var-exp cdddr)
                                              ((var-exp exp)))))
                                          (var-exp letrec-env))))))
                                 ((app-exp
                                    (var-exp extend-env-recur)
                                    ((app-exp (var-exp cadr) ((var-exp exp)))
                                      (var-exp vals)
                                      (var-exp env))))))
                             ((app-exp
                                (var-exp map)
                                ((lambda-exp
                                   (v)
                                   (app-exp
                                     (var-exp eval-expression)
                                     ((var-exp v) (var-exp env))))
                                  (app-exp (var-exp caddr) ((var-exp exp)))))))
                           ())
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((app-exp (var-exp car) ((var-exp exp)))
                               (lit-exp begin-exp)))
                           (letrec-exp
                             (eval-begin)
                             ((lambda-exp
                                (exprs)
                                (if-exp
                                  (app-exp (var-exp null?) ((var-exp exprs)))
                                  (lit-exp ())
                                  (if-exp
                                    (app-exp
                                      (var-exp null?)
                                      ((app-exp
                                         (var-exp cdr)
                                         ((var-exp exprs)))))
                                    (app-exp
                                      (var-exp eval-expression)
                                      ((app-exp (var-exp car) ((var-exp exprs)))
                                        (var-exp env)))
                                    (if-exp
                                      (lit-exp #t)
                                      (begin-exp
                                        ((app-exp
                                           (var-exp eval-expression)
                                           ((app-exp
                                              (var-exp car)
                                              ((var-exp exprs)))
                                             (var-exp env)))
                                          (app-exp
                                            (var-exp eval-begin)
                                            ((app-exp
                                               (var-exp cdr)
                                               ((var-exp exprs)))))))
                                      ())))))
                             (begin-exp
                               ((app-exp
                                  (var-exp eval-begin)
                                  ((app-exp (var-exp cadr) ((var-exp exp))))))))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((app-exp (var-exp car) ((var-exp exp)))
                                 (lit-exp while-exp)))
                             (letrec-exp
                               (loop)
                               ((lambda-exp
                                  ()
                                  (if-exp
                                    (app-exp
                                      (var-exp eval-expression)
                                      ((app-exp (var-exp cadr) ((var-exp exp)))
                                        (var-exp env)))
                                    (begin-exp
                                      ((app-exp
                                         (var-exp eval-expression)
                                         ((app-exp
                                            (var-exp caddr)
                                            ((var-exp exp)))
                                           (var-exp env)))
                                        (app-exp (var-exp loop) (()))))
                                    ())))
                               (begin-exp ((app-exp (var-exp loop) (())))))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((app-exp (var-exp car) ((var-exp exp)))
                                   (lit-exp define-exp)))
                               (if-exp
                                 (app-exp (var-exp null?) ((var-exp env)))
                                 (app-exp
                                   (var-exp extend-global-env)
                                   ((app-exp (var-exp cadr) ((var-exp exp)))
                                     (app-exp
                                       (var-exp eval-expression)
                                       ((app-exp
                                          (var-exp caddr)
                                          ((var-exp exp)))
                                         (app-exp (var-exp empty-env) (()))))))
                                 (app-exp
                                   (var-exp add-to-env)
                                   ((app-exp (var-exp cadr) ((var-exp exp)))
                                     (app-exp
                                       (var-exp eval-expression)
                                       ((app-exp
                                          (var-exp caddr)
                                          ((var-exp exp)))
                                         (var-exp env)))
                                     (var-exp env))))
                               ())))))))))))
         ())
       ((lit-exp 1) ())
       (((operand) . #((lit-exp 1)))
         ((procedure) . #((primitive +)))
         ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | | (apply-proc
        (primitive null?)
        ((lit-exp 1))
        (((exp env) . #((lit-exp 1) ()))))
| | | (apply-primitive-proc
        null?
        ((lit-exp 1))
        (((exp env) . #((lit-exp 1) ()))))
| | | #f
| | | (apply-proc
        (primitive car)
        ((lit-exp 1))
        (((exp env) . #((lit-exp 1) ()))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp env) . #((lit-exp 1) ()))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp var-exp)
        (((exp env) . #((lit-exp 1) ()))))
| | | (apply-primitive-proc
        equal?
        (lit-exp var-exp)
        (((exp env) . #((lit-exp 1) ()))))
| | | #f
| | | (apply-proc
        (primitive car)
        ((lit-exp 1))
        (((exp env) . #((lit-exp 1) ()))))
| | | (apply-primitive-proc car ((lit-exp 1)) (((exp env) . #((lit-exp 1) ()))))
| | | lit-exp
| | | (apply-proc
        (primitive equal?)
        (lit-exp lit-exp)
        (((exp env) . #((lit-exp 1) ()))))
| | | (apply-primitive-proc
        equal?
        (lit-exp lit-exp)
        (((exp env) . #((lit-exp 1) ()))))
| | | #t
| | |(apply-proc
       (primitive cadr)
       ((lit-exp 1))
       (((exp env) . #((lit-exp 1) ()))))
| | |(apply-primitive-proc cadr ((lit-exp 1)) (((exp env) . #((lit-exp 1) ()))))
| | |1
| | (1 2)
| |(apply-proc
     (closure-record
       (arg)
       (begin-exp
         ((app-exp
            (var-exp apply-proc)
            ((var-exp procedure) (var-exp arg) (var-exp env)))))
       (((procedure) . #((primitive +)))
         ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
     ((1 2))
     (((procedure) . #((primitive +)))
       ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| |(apply-proc
     (closure-record
       (proc arg env)
       (if-exp
         (app-exp
           (var-exp equal?)
           ((app-exp (var-exp car) ((var-exp proc))) (lit-exp closure-record)))
         (app-exp
           (var-exp eval-expression)
           ((app-exp (var-exp caddr) ((var-exp proc)))
             (app-exp
               (var-exp extend-env)
               ((app-exp (var-exp cadr) ((var-exp proc)))
                 (var-exp arg)
                 (app-exp
                   (var-exp car)
                   ((app-exp (var-exp cdddr) ((var-exp proc)))))))))
         (if-exp
           (app-exp
             (var-exp equal?)
             ((app-exp (var-exp car) ((var-exp proc))) (lit-exp primitive)))
           (app-exp
             (var-exp apply-primitive-proc)
             ((app-exp (var-exp cadr) ((var-exp proc)))
               (var-exp arg)
               (var-exp env)))
           ()))
       ())
     ((primitive +) (1 2) ())
     (((arg) . #((1 2)))
       ((procedure) . #((primitive +)))
       ((exp env) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2))) ()))))
| | (apply-proc
      (primitive car)
      ((primitive +))
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | (apply-primitive-proc
      car
      ((primitive +))
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | primitive
| | (apply-proc
      (primitive equal?)
      (primitive closure-record)
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | (apply-primitive-proc
      equal?
      (primitive closure-record)
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | #f
| | (apply-proc
      (primitive car)
      ((primitive +))
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | (apply-primitive-proc
      car
      ((primitive +))
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | primitive
| | (apply-proc
      (primitive equal?)
      (primitive primitive)
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | (apply-primitive-proc
      equal?
      (primitive primitive)
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | #t
| | (apply-proc
      (primitive cadr)
      ((primitive +))
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | (apply-primitive-proc
      cadr
      ((primitive +))
      (((proc arg env) . #((primitive +) (1 2) ()))))
| | +
| |(apply-proc
     (closure-record
       (id arg env)
       (if-exp
         (app-exp (var-exp equal?) ((var-exp +) (var-exp id)))
         (app-exp (var-exp apply) ((var-exp +) (var-exp arg)))
         (if-exp
           (app-exp (var-exp equal?) ((var-exp -) (var-exp id)))
           (app-exp (var-exp apply) ((var-exp -) (var-exp arg)))
           (if-exp
             (app-exp (var-exp equal?) ((var-exp *) (var-exp id)))
             (app-exp (var-exp apply) ((var-exp *) (var-exp arg)))
             (if-exp
               (app-exp (var-exp equal?) ((var-exp /) (var-exp id)))
               (app-exp (var-exp apply) ((var-exp /) (var-exp arg)))
               (if-exp
                 (app-exp (var-exp equal?) ((var-exp string?) (var-exp id)))
                 (app-exp (var-exp apply) ((var-exp string?) (var-exp arg)))
                 (if-exp
                   (app-exp (var-exp equal?) ((var-exp boolean?) (var-exp id)))
                   (app-exp (var-exp apply) ((var-exp boolean?) (var-exp arg)))
                   (if-exp
                     (app-exp (var-exp equal?) ((var-exp add1) (var-exp id)))
                     (app-exp (var-exp apply) ((var-exp add1) (var-exp arg)))
                     (if-exp
                       (app-exp (var-exp equal?) ((var-exp sub1) (var-exp id)))
                       (app-exp (var-exp apply) ((var-exp sub1) (var-exp arg)))
                       (if-exp
                         (app-exp
                           (var-exp equal?)
                           ((var-exp zero?) (var-exp id)))
                         (app-exp
                           (var-exp apply)
                           ((var-exp zero?) (var-exp arg)))
                         (if-exp
                           (app-exp
                             (var-exp equal?)
                             ((var-exp not) (var-exp id)))
                           (app-exp
                             (var-exp apply)
                             ((var-exp not) (var-exp arg)))
                           (if-exp
                             (app-exp
                               (var-exp equal?)
                               ((var-exp =) (var-exp id)))
                             (app-exp
                               (var-exp apply)
                               ((var-exp =) (var-exp arg)))
                             (if-exp
                               (app-exp
                                 (var-exp equal?)
                                 ((var-exp <) (var-exp id)))
                               (app-exp
                                 (var-exp apply)
                                 ((var-exp <) (var-exp arg)))
                               (if-exp
                                 (app-exp
                                   (var-exp equal?)
                                   ((var-exp >) (var-exp id)))
                                 (app-exp
                                   (var-exp apply)
                                   ((var-exp >) (var-exp arg)))
                                 (if-exp
                                   (app-exp
                                     (var-exp equal?)
                                     ((var-exp <=) (var-exp id)))
                                   (app-exp
                                     (var-exp apply)
                                     ((var-exp <=) (var-exp arg)))
                                   (if-exp
                                     (app-exp
                                       (var-exp equal?)
                                       ((var-exp >=) (var-exp id)))
                                     (app-exp
                                       (var-exp apply)
                                       ((var-exp >=) (var-exp arg)))
                                     (if-exp
                                       (app-exp
                                         (var-exp equal?)
                                         ((var-exp cons) (var-exp id)))
                                       (app-exp
                                         (var-exp apply)
                                         ((var-exp cons) (var-exp arg)))
                                       (if-exp
                                         (app-exp
                                           (var-exp equal?)
                                           ((var-exp list) (var-exp id)))
                                         (var-exp arg)
                                         (if-exp
                                           (app-exp
                                             (var-exp equal?)
                                             ((var-exp null?) (var-exp id)))
                                           (app-exp
                                             (var-exp apply)
                                             ((var-exp null?) (var-exp arg)))
                                           (if-exp
                                             (app-exp
                                               (var-exp equal?)
                                               ((var-exp eq?) (var-exp id)))
                                             (app-exp
                                               (var-exp apply)
                                               ((var-exp eq?) (var-exp arg)))
                                             (if-exp
                                               (app-exp
                                                 (var-exp equal?)
                                                 ((var-exp equal?)
                                                   (var-exp id)))
                                               (app-exp
                                                 (var-exp apply)
                                                 ((var-exp equal?)
                                                   (var-exp arg)))
                                               (if-exp
                                                 (app-exp
                                                   (var-exp equal?)
                                                   ((var-exp atom?)
                                                     (var-exp id)))
                                                 (app-exp
                                                   (var-exp apply)
                                                   ((var-exp atom?)
                                                     (var-exp arg)))
                                                 (if-exp
                                                   (app-exp
                                                     (var-exp equal?)
                                                     ((var-exp length)
                                                       (var-exp id)))
                                                   (app-exp
                                                     (var-exp apply)
                                                     ((var-exp length)
                                                       (var-exp arg)))
                                                   (if-exp
                                                     (app-exp
                                                       (var-exp equal?)
                                                       ((var-exp list->vector)
                                                         (var-exp id)))
                                                     (app-exp
                                                       (var-exp apply)
                                                       ((var-exp list->vector)
                                                         (var-exp arg)))
                                                     (if-exp
                                                       (app-exp
                                                         (var-exp equal?)
                                                         ((var-exp list?)
                                                           (var-exp id)))
                                                       (app-exp
                                                         (var-exp apply)
                                                         ((var-exp list?)
                                                           (var-exp arg)))
                                                       (if-exp
                                                         (app-exp
                                                           (var-exp equal?)
                                                           ((var-exp pair?)
                                                             (var-exp id)))
                                                         (app-exp
                                                           (var-exp apply)
                                                           ((var-exp pair?)
                                                             (var-exp arg)))
                                                         (if-exp
                                                           (app-exp
                                                             (var-exp equal?)
                                                             ((var-exp
                                                                procedure?)
                                                               (var-exp id)))
                                                           (app-exp
                                                             (var-exp apply)
                                                             ((var-exp
                                                                procedure?)
                                                               (var-exp arg)))
                                                           (if-exp
                                                             (app-exp
                                                               (var-exp equal?)
                                                               ((var-exp
                                                                  vector->list)
                                                                 (var-exp id)))
                                                             (app-exp
                                                               (var-exp apply)
                                                               ((var-exp
                                                                  vector->list)
                                                                 (var-exp arg)))
                                                             (if-exp
                                                               (app-exp
                                                                 (var-exp
                                                                   equal?)
                                                                 ((var-exp
                                                                    vector)
                                                                   (var-exp
                                                                     id)))
                                                               (app-exp
                                                                 (var-exp apply)
                                                                 ((var-exp
                                                                    vector)
                                                                   (var-exp
                                                                     arg)))
                                                               (if-exp
                                                                 (app-exp
                                                                   (var-exp
                                                                     equal?)
                                                                   ((var-exp
                                                                      make-vector)
                                                                     (var-exp
                                                                       id)))
                                                                 (app-exp
                                                                   (var-exp
                                                                     apply)
                                                                   ((var-exp
                                                                      make-vector)
                                                                     (var-exp
                                                                       arg)))
                                                                 (if-exp
                                                                   (app-exp
                                                                     (var-exp
                                                                       equal?)
                                                                     ((var-exp
                                                                        vector-ref)
                                                                       (var-exp
                                                                         id)))
                                                                   (app-exp
                                                                     (var-exp
                                                                       apply)
                                                                     ((var-exp
                                                                        vector-ref)
                                                                       (var-exp
                                                                         arg)))
                                                                   (if-exp
                                                                     (app-exp
                                                                       (var-exp
                                                                         equal?)
                                                                       ((var-exp
                                                                          vector?)
                                                                         (var-exp
                                                                           id)))
                                                                     (app-exp
                                                                       (var-exp
                                                                         apply)
                                                                       ((var-exp
                                                                          vector?)
                                                                         (var-exp
                                                                           arg)))
                                                                     (if-exp
                                                                       (app-exp
                                                                         (var-exp
                                                                           equal?)
                                                                         ((var-exp
                                                                            number?)
                                                                           (var-exp
                                                                             id)))
                                                                       (app-exp
                                                                         (var-exp
                                                                           apply)
                                                                         ((var-exp
                                                                            number?)
                                                                           (var-exp
                                                                             arg)))
                                                                       (if-exp
                                                                         (app-exp
                                                                           (var-exp
                                                                             equal?)
                                                                           ((var-exp
                                                                              symbol?)
                                                                             (var-exp
                                                                               id)))
                                                                         (app-exp
                                                                           (var-exp
                                                                             apply)
                                                                           ((var-exp
                                                                              symbol?)
                                                                             (var-exp
                                                                               arg)))
                                                                         (if-exp
                                                                           (app-exp
                                                                             (var-exp
                                                                               equal?)
                                                                             ((var-exp
                                                                                set-car!)
                                                                               (var-exp
                                                                                 id)))
                                                                           (app-exp
                                                                             (var-exp
                                                                               apply)
                                                                             ((var-exp
                                                                                set-car!)
                                                                               (var-exp
                                                                                 arg)))
                                                                           (if-exp
                                                                             (app-exp
                                                                               (var-exp
                                                                                 equal?)
                                                                               ((var-exp
                                                                                  set-cdr!)
                                                                                 (var-exp
                                                                                   id)))
                                                                             (app-exp
                                                                               (var-exp
                                                                                 apply)
                                                                               ((var-exp
                                                                                  set-cdr!)
                                                                                 (var-exp
                                                                                   arg)))
                                                                             (if-exp
                                                                               (app-exp
                                                                                 (var-exp
                                                                                   equal?)
                                                                                 ((var-exp
                                                                                    vector-set!)
                                                                                   (var-exp
                                                                                     id)))
                                                                               (app-exp
                                                                                 (var-exp
                                                                                   apply)
                                                                                 ((var-exp
                                                                                    vector-set!)
                                                                                   (var-exp
                                                                                     arg)))
                                                                               (if-exp
                                                                                 (app-exp
                                                                                   (var-exp
                                                                                     equal?)
                                                                                   ((var-exp
                                                                                      car)
                                                                                     (var-exp
                                                                                       id)))
                                                                                 (app-exp
                                                                                   (var-exp
                                                                                     apply)
                                                                                   ((var-exp
                                                                                      car)
                                                                                     (var-exp
                                                                                       arg)))
                                                                                 (if-exp
                                                                                   (app-exp
                                                                                     (var-exp
                                                                                       equal?)
                                                                                     ((var-exp
                                                                                        cdr)
                                                                                       (var-exp
                                                                                         id)))
                                                                                   (app-exp
                                                                                     (var-exp
                                                                                       apply)
                                                                                     ((var-exp
                                                                                        cdr)
                                                                                       (var-exp
                                                                                         arg)))
                                                                                   (if-exp
                                                                                     (app-exp
                                                                                       (var-exp
                                                                                         equal?)
                                                                                       ((var-exp
                                                                                          caar)
                                                                                         (var-exp
                                                                                           id)))
                                                                                     (app-exp
                                                                                       (var-exp
                                                                                         apply)
                                                                                       ((var-exp
                                                                                          caar)
                                                                                         (var-exp
                                                                                           arg)))
                                                                                     (if-exp
                                                                                       (app-exp
                                                                                         (var-exp
                                                                                           equal?)
                                                                                         ((var-exp
                                                                                            cadr)
                                                                                           (var-exp
                                                                                             id)))
                                                                                       (app-exp
                                                                                         (var-exp
                                                                                           apply)
                                                                                         ((var-exp
                                                                                            cadr)
                                                                                           (var-exp
                                                                                             arg)))
                                                                                       (if-exp
                                                                                         (app-exp
                                                                                           (var-exp
                                                                                             equal?)
                                                                                           ((var-exp
                                                                                              cdar)
                                                                                             (var-exp
                                                                                               id)))
                                                                                         (app-exp
                                                                                           (var-exp
                                                                                             apply)
                                                                                           ((var-exp
                                                                                              cdar)
                                                                                             (var-exp
                                                                                               arg)))
                                                                                         (if-exp
                                                                                           (app-exp
                                                                                             (var-exp
                                                                                               equal?)
                                                                                             ((var-exp
                                                                                                cddr)
                                                                                               (var-exp
                                                                                                 id)))
                                                                                           (app-exp
                                                                                             (var-exp
                                                                                               apply)
                                                                                             ((var-exp
                                                                                                cddr)
                                                                                               (var-exp
                                                                                                 arg)))
                                                                                           (if-exp
                                                                                             (app-exp
                                                                                               (var-exp
                                                                                                 equal?)
                                                                                               ((var-exp
                                                                                                  caaar)
                                                                                                 (var-exp
                                                                                                   id)))
                                                                                             (app-exp
                                                                                               (var-exp
                                                                                                 apply)
                                                                                               ((var-exp
                                                                                                  caaar)
                                                                                                 (var-exp
                                                                                                   arg)))
                                                                                             (if-exp
                                                                                               (app-exp
                                                                                                 (var-exp
                                                                                                   equal?)
                                                                                                 ((var-exp
                                                                                                    caadr)
                                                                                                   (var-exp
                                                                                                     id)))
                                                                                               (app-exp
                                                                                                 (var-exp
                                                                                                   apply)
                                                                                                 ((var-exp
                                                                                                    caadr)
                                                                                                   (var-exp
                                                                                                     arg)))
                                                                                               (if-exp
                                                                                                 (app-exp
                                                                                                   (var-exp
                                                                                                     equal?)
                                                                                                   ((var-exp
                                                                                                      cadar)
                                                                                                     (var-exp
                                                                                                       id)))
                                                                                                 (app-exp
                                                                                                   (var-exp
                                                                                                     apply)
                                                                                                   ((var-exp
                                                                                                      cadar)
                                                                                                     (var-exp
                                                                                                       arg)))
                                                                                                 (if-exp
                                                                                                   (app-exp
                                                                                                     (var-exp
                                                                                                       equal?)
                                                                                                     ((var-exp
                                                                                                        cdaar)
                                                                                                       (var-exp
                                                                                                         id)))
                                                                                                   (app-exp
                                                                                                     (var-exp
                                                                                                       apply)
                                                                                                     ((var-exp
                                                                                                        cdaar)
                                                                                                       (var-exp
                                                                                                         arg)))
                                                                                                   (if-exp
                                                                                                     (app-exp
                                                                                                       (var-exp
                                                                                                         equal?)
                                                                                                       ((var-exp
                                                                                                          cdddr)
                                                                                                         (var-exp
                                                                                                           id)))
                                                                                                     (app-exp
                                                                                                       (var-exp
                                                                                                         apply)
                                                                                                       ((var-exp
                                                                                                          cdddr)
                                                                                                         (var-exp
                                                                                                           arg)))
                                                                                                     (if-exp
                                                                                                       (app-exp
                                                                                                         (var-exp
                                                                                                           equal?)
                                                                                                         ((var-exp
                                                                                                            cddar)
                                                                                                           (var-exp
                                                                                                             id)))
                                                                                                       (app-exp
                                                                                                         (var-exp
                                                                                                           apply)
                                                                                                         ((var-exp
                                                                                                            cddar)
                                                                                                           (var-exp
                                                                                                             arg)))
                                                                                                       (if-exp
                                                                                                         (app-exp
                                                                                                           (var-exp
                                                                                                             equal?)
                                                                                                           ((var-exp
                                                                                                              cdadr)
                                                                                                             (var-exp
                                                                                                               id)))
                                                                                                         (app-exp
                                                                                                           (var-exp
                                                                                                             apply)
                                                                                                           ((var-exp
                                                                                                              cdadr)
                                                                                                             (var-exp
                                                                                                               arg)))
                                                                                                         (if-exp
                                                                                                           (app-exp
                                                                                                             (var-exp
                                                                                                               equal?)
                                                                                                             ((var-exp
                                                                                                                caddr)
                                                                                                               (var-exp
                                                                                                                 id)))
                                                                                                           (app-exp
                                                                                                             (var-exp
                                                                                                               apply)
                                                                                                             ((var-exp
                                                                                                                caddr)
                                                                                                               (var-exp
                                                                                                                 arg)))
                                                                                                           (if-exp
                                                                                                             (app-exp
                                                                                                               (var-exp
                                                                                                                 equal?)
                                                                                                               ((var-exp
                                                                                                                  map)
                                                                                                                 (var-exp
                                                                                                                   id)))
                                                                                                             (app-exp
                                                                                                               (var-exp
                                                                                                                 map)
                                                                                                               ((lambda-exp
                                                                                                                  (args)
                                                                                                                  (app-exp
                                                                                                                    (var-exp
                                                                                                                      apply-proc)
                                                                                                                    ((app-exp
                                                                                                                       (var-exp
                                                                                                                         car)
                                                                                                                       ((var-exp
                                                                                                                          arg)))
                                                                                                                      (var-exp
                                                                                                                        args)
                                                                                                                      (var-exp
                                                                                                                        env))))
                                                                                                                 (app-exp
                                                                                                                   (var-exp
                                                                                                                     index-recur)
                                                                                                                   ((app-exp
                                                                                                                      (var-exp
                                                                                                                        cdr)
                                                                                                                      ((var-exp
                                                                                                                         arg)))))))
                                                                                                             (if-exp
                                                                                                               (app-exp
                                                                                                                 (var-exp
                                                                                                                   equal?)
                                                                                                                 ((var-exp
                                                                                                                    apply)
                                                                                                                   (var-exp
                                                                                                                     id)))
                                                                                                               (app-exp
                                                                                                                 (var-exp
                                                                                                                   apply-proc)
                                                                                                                 ((app-exp
                                                                                                                    (var-exp
                                                                                                                      car)
                                                                                                                    ((var-exp
                                                                                                                       arg)))
                                                                                                                   (app-exp
                                                                                                                     (var-exp
                                                                                                                       combine-arg)
                                                                                                                     ((app-exp
                                                                                                                        (var-exp
                                                                                                                          cdr)
                                                                                                                        ((var-exp
                                                                                                                           arg)))))
                                                                                                                   (var-exp
                                                                                                                     env)))
                                                                                                               (if-exp
                                                                                                                 (app-exp
                                                                                                                   (var-exp
                                                                                                                     equal?)
                                                                                                                   ((var-exp
                                                                                                                      assq)
                                                                                                                     (var-exp
                                                                                                                       id)))
                                                                                                                 (app-exp
                                                                                                                   (var-exp
                                                                                                                     apply)
                                                                                                                   ((var-exp
                                                                                                                      assq)
                                                                                                                     (var-exp
                                                                                                                       arg)))
                                                                                                                 (if-exp
                                                                                                                   (app-exp
                                                                                                                     (var-exp
                                                                                                                       equal?)
                                                                                                                     ((var-exp
                                                                                                                        assv)
                                                                                                                       (var-exp
                                                                                                                         id)))
                                                                                                                   (app-exp
                                                                                                                     (var-exp
                                                                                                                       apply)
                                                                                                                     ((var-exp
                                                                                                                        assv)
                                                                                                                       (var-exp
                                                                                                                         arg)))
                                                                                                                   (if-exp
                                                                                                                     (app-exp
                                                                                                                       (var-exp
                                                                                                                         equal?)
                                                                                                                       ((var-exp
                                                                                                                          append)
                                                                                                                         (var-exp
                                                                                                                           id)))
                                                                                                                     (app-exp
                                                                                                                       (letrec-exp
                                                                                                                         (f)
                                                                                                                         ((lambda-exp
                                                                                                                            (ls args)
                                                                                                                            (begin-exp
                                                                                                                              ((if-exp
                                                                                                                                 (app-exp
                                                                                                                                   (var-exp
                                                                                                                                     null?)
                                                                                                                                   ((var-exp
                                                                                                                                      args)))
                                                                                                                                 (var-exp
                                                                                                                                   ls)
                                                                                                                                 (app-exp
                                                                                                                                   (letrec-exp
                                                                                                                                     (g)
                                                                                                                                     ((lambda-exp
                                                                                                                                        (ls)
                                                                                                                                        (begin-exp
                                                                                                                                          ((if-exp
                                                                                                                                             (app-exp
                                                                                                                                               (var-exp
                                                                                                                                                 null?)
                                                                                                                                               ((var-exp
                                                                                                                                                  ls)))
                                                                                                                                             (app-exp
                                                                                                                                               (var-exp
                                                                                                                                                 f)
                                                                                                                                               ((app-exp
                                                                                                                                                  (var-exp
                                                                                                                                                    car)
                                                                                                                                                  ((var-exp
                                                                                                                                                     args)))
                                                                                                                                                 (app-exp
                                                                                                                                                   (var-exp
                                                                                                                                                     cdr)
                                                                                                                                                   ((var-exp
                                                                                                                                                      args)))))
                                                                                                                                             (app-exp
                                                                                                                                               (var-exp
                                                                                                                                                 cons)
                                                                                                                                               ((app-exp
                                                                                                                                                  (var-exp
                                                                                                                                                    car)
                                                                                                                                                  ((var-exp
                                                                                                                                                     ls)))
                                                                                                                                                 (app-exp
                                                                                                                                                   (var-exp
                                                                                                                                                     g)
                                                                                                                                                   ((app-exp
                                                                                                                                                      (var-exp
                                                                                                                                                        cdr)
                                                                                                                                                      ((var-exp
                                                                                                                                                         ls))))))))))))
                                                                                                                                     (var-exp
                                                                                                                                       g))
                                                                                                                                   ((var-exp
                                                                                                                                      ls))))))))
                                                                                                                         (var-exp
                                                                                                                           f))
                                                                                                                       ((lit-exp
                                                                                                                          ())
                                                                                                                         (var-exp
                                                                                                                           arg)))
                                                                                                                     (if-exp
                                                                                                                       (app-exp
                                                                                                                         (var-exp
                                                                                                                           equal?)
                                                                                                                         ((var-exp
                                                                                                                            max)
                                                                                                                           (var-exp
                                                                                                                             id)))
                                                                                                                       (app-exp
                                                                                                                         (var-exp
                                                                                                                           apply)
                                                                                                                         ((var-exp
                                                                                                                            max)
                                                                                                                           (var-exp
                                                                                                                             arg)))
                                                                                                                       (if-exp
                                                                                                                         (app-exp
                                                                                                                           (var-exp
                                                                                                                             equal?)
                                                                                                                           ((var-exp
                                                                                                                              open-input-file)
                                                                                                                             (var-exp
                                                                                                                               id)))
                                                                                                                         (app-exp
                                                                                                                           (var-exp
                                                                                                                             apply)
                                                                                                                           ((var-exp
                                                                                                                              open-input-file)
                                                                                                                             (app-exp
                                                                                                                               (var-exp
                                                                                                                                 car)
                                                                                                                               ((var-exp
                                                                                                                                  arg)))))
                                                                                                                         (if-exp
                                                                                                                           (app-exp
                                                                                                                             (var-exp
                                                                                                                               equal?)
                                                                                                                             ((var-exp
                                                                                                                                eof-object?)
                                                                                                                               (var-exp
                                                                                                                                 id)))
                                                                                                                           (app-exp
                                                                                                                             (var-exp
                                                                                                                               apply)
                                                                                                                             ((var-exp
                                                                                                                                eof-object?)
                                                                                                                               (var-exp
                                                                                                                                 arg)))
                                                                                                                           (if-exp
                                                                                                                             (app-exp
                                                                                                                               (var-exp
                                                                                                                                 equal?)
                                                                                                                               ((var-exp
                                                                                                                                  close-port)
                                                                                                                                 (var-exp
                                                                                                                                   id)))
                                                                                                                             (app-exp
                                                                                                                               (var-exp
                                                                                                                                 apply)
                                                                                                                               ((var-exp
                                                                                                                                  close-port)
                                                                                                                                 (var-exp
                                                                                                                                   arg)))
                                                                                                                             (if-exp
                                                                                                                               (app-exp
                                                                                                                                 (var-exp
                                                                                                                                   equal?)
                                                                                                                                 ((var-exp
                                                                                                                                    write)
                                                                                                                                   (var-exp
                                                                                                                                     id)))
                                                                                                                               (app-exp
                                                                                                                                 (var-exp
                                                                                                                                   apply)
                                                                                                                                 ((var-exp
                                                                                                                                    write)
                                                                                                                                   (var-exp
                                                                                                                                     arg)))
                                                                                                                               (if-exp
                                                                                                                                 (app-exp
                                                                                                                                   (var-exp
                                                                                                                                     equal?)
                                                                                                                                   ((var-exp
                                                                                                                                      display)
                                                                                                                                     (var-exp
                                                                                                                                       id)))
                                                                                                                                 (app-exp
                                                                                                                                   (var-exp
                                                                                                                                     apply)
                                                                                                                                   ((var-exp
                                                                                                                                      display)
                                                                                                                                     (var-exp
                                                                                                                                       arg)))
                                                                                                                                 (if-exp
                                                                                                                                   (app-exp
                                                                                                                                     (var-exp
                                                                                                                                       equal?)
                                                                                                                                     ((var-exp
                                                                                                                                        read)
                                                                                                                                       (var-exp
                                                                                                                                         id)))
                                                                                                                                   (app-exp
                                                                                                                                     (lambda-exp
                                                                                                                                       (temp)
                                                                                                                                       (begin-exp
                                                                                                                                         ((var-exp
                                                                                                                                            temp))))
                                                                                                                                     ((if-exp
                                                                                                                                        (app-exp
                                                                                                                                          (var-exp
                                                                                                                                            null?)
                                                                                                                                          ((app-exp
                                                                                                                                             (var-exp
                                                                                                                                               car)
                                                                                                                                             ((var-exp
                                                                                                                                                arg)))))
                                                                                                                                        (app-exp
                                                                                                                                          (var-exp
                                                                                                                                            read)
                                                                                                                                          (()))
                                                                                                                                        (app-exp
                                                                                                                                          (var-exp
                                                                                                                                            apply)
                                                                                                                                          ((var-exp
                                                                                                                                             read)
                                                                                                                                            (var-exp
                                                                                                                                              arg))))))
                                                                                                                                   (if-exp
                                                                                                                                     (app-exp
                                                                                                                                       (var-exp
                                                                                                                                         equal?)
                                                                                                                                       ((var-exp
                                                                                                                                          newline)
                                                                                                                                         (var-exp
                                                                                                                                           id)))
                                                                                                                                     (app-exp
                                                                                                                                       (var-exp
                                                                                                                                         newline)
                                                                                                                                       (()))
                                                                                                                                     (if-exp
                                                                                                                                       (app-exp
                                                                                                                                         (var-exp
                                                                                                                                           equal?)
                                                                                                                                         ((var-exp
                                                                                                                                            load)
                                                                                                                                           (var-exp
                                                                                                                                             id)))
                                                                                                                                       (app-exp
                                                                                                                                         (lambda-exp
                                                                                                                                           (p)
                                                                                                                                           (begin-exp
                                                                                                                                             ((app-exp
                                                                                                                                                (letrec-exp
                                                                                                                                                  (f)
                                                                                                                                                  ((lambda-exp
                                                                                                                                                     (x)
                                                                                                                                                     (begin-exp
                                                                                                                                                       ((if-exp
                                                                                                                                                          (app-exp
                                                                                                                                                            (var-exp
                                                                                                                                                              eof-object?)
                                                                                                                                                            ((var-exp
                                                                                                                                                               x)))
                                                                                                                                                          (begin-exp
                                                                                                                                                            ((app-exp
                                                                                                                                                               (var-exp
                                                                                                                                                                 close-port)
                                                                                                                                                               ((var-exp
                                                                                                                                                                  p)))
                                                                                                                                                              (lit-exp
                                                                                                                                                                ())))
                                                                                                                                                          (begin-exp
                                                                                                                                                            ((app-exp
                                                                                                                                                               (var-exp
                                                                                                                                                                 eval-one-exp)
                                                                                                                                                               ((var-exp
                                                                                                                                                                  x)))
                                                                                                                                                              (app-exp
                                                                                                                                                                (var-exp
                                                                                                                                                                  f)
                                                                                                                                                                ((app-exp
                                                                                                                                                                   (var-exp
                                                                                                                                                                     read)
                                                                                                                                                                   ((var-exp
                                                                                                                                                                      p))))))))))))
                                                                                                                                                  (var-exp
                                                                                                                                                    f))
                                                                                                                                                ((app-exp
                                                                                                                                                   (var-exp
                                                                                                                                                     read)
                                                                                                                                                   ((var-exp
                                                                                                                                                      p))))))))
                                                                                                                                         ((app-exp
                                                                                                                                            (var-exp
                                                                                                                                              apply)
                                                                                                                                            ((var-exp
                                                                                                                                               open-input-file)
                                                                                                                                              (var-exp
                                                                                                                                                arg)))))
                                                                                                                                       ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ())
     (+ (1 2) ())
     (((proc arg env) . #((primitive +) (1 2) ()))))
| | (apply-proc
      (primitive equal?)
      ((primitive +) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive +) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive -) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive -) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive *) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive *) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive /) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive /) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive string?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive string?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive boolean?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive boolean?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive add1) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive add1) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive sub1) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive sub1) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive zero?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive zero?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive not) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive not) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive =) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive =) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive <) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive <) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive >) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive >) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive <=) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive <=) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive >=) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive >=) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cons) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cons) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive list) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive list) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive null?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive null?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive eq?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive eq?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive equal?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive equal?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive atom?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive atom?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive length) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive length) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive list->vector) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive list->vector) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive list?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive list?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive pair?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive pair?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((closure-record
         (proc)
         (if-exp
           (app-exp (var-exp atom?) ((var-exp proc)))
           (lit-exp #f)
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp proc)))
                 (lit-exp closure-record)))
             (if-exp
               (app-exp
                 (lambda-exp
                   (id)
                   (app-exp
                     (lambda-exp
                       (sys-var tempVal)
                       (if-exp
                         (var-exp (sys-var tempVal))
                         (var-exp (sys-var tempVal))
                         (app-exp
                           (lambda-exp
                             (sys-var tempVal)
                             (if-exp
                               (var-exp (sys-var tempVal))
                               (var-exp (sys-var tempVal))
                               (app-exp (var-exp pair?) ((var-exp id)))))
                           ((app-exp (var-exp symbol?) ((var-exp id)))))))
                     ((app-exp
                        (app-exp (var-exp list-of) ((var-exp symbol?)))
                        ((var-exp id))))))
                 ((app-exp (var-exp cadr) ((var-exp proc)))))
               (if-exp
                 (app-exp
                   (var-exp expression?)
                   ((app-exp (var-exp caddr) ((var-exp proc)))))
                 (app-exp
                   (var-exp environment?)
                   ((app-exp
                      (var-exp car)
                      ((app-exp (var-exp cdddr) ((var-exp proc)))))))
                 (lit-exp #f))
               (lit-exp #f))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp proc))) (lit-exp primitive)))
               (app-exp
                 (var-exp symbol?)
                 ((app-exp (var-exp cadr) ((var-exp proc)))))
               (if-exp (lit-exp #t) (lit-exp #f) ()))))
         ())
        +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((closure-record
         (proc)
         (if-exp
           (app-exp (var-exp atom?) ((var-exp proc)))
           (lit-exp #f)
           (if-exp
             (app-exp
               (var-exp equal?)
               ((app-exp (var-exp car) ((var-exp proc)))
                 (lit-exp closure-record)))
             (if-exp
               (app-exp
                 (lambda-exp
                   (id)
                   (app-exp
                     (lambda-exp
                       (sys-var tempVal)
                       (if-exp
                         (var-exp (sys-var tempVal))
                         (var-exp (sys-var tempVal))
                         (app-exp
                           (lambda-exp
                             (sys-var tempVal)
                             (if-exp
                               (var-exp (sys-var tempVal))
                               (var-exp (sys-var tempVal))
                               (app-exp (var-exp pair?) ((var-exp id)))))
                           ((app-exp (var-exp symbol?) ((var-exp id)))))))
                     ((app-exp
                        (app-exp (var-exp list-of) ((var-exp symbol?)))
                        ((var-exp id))))))
                 ((app-exp (var-exp cadr) ((var-exp proc)))))
               (if-exp
                 (app-exp
                   (var-exp expression?)
                   ((app-exp (var-exp caddr) ((var-exp proc)))))
                 (app-exp
                   (var-exp environment?)
                   ((app-exp
                      (var-exp car)
                      ((app-exp (var-exp cdddr) ((var-exp proc)))))))
                 (lit-exp #f))
               (lit-exp #f))
             (if-exp
               (app-exp
                 (var-exp equal?)
                 ((app-exp (var-exp car) ((var-exp proc))) (lit-exp primitive)))
               (app-exp
                 (var-exp symbol?)
                 ((app-exp (var-exp cadr) ((var-exp proc)))))
               (if-exp (lit-exp #t) (lit-exp #f) ()))))
         ())
        +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive vector->list) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive vector->list) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive vector) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive vector) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive make-vector) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive make-vector) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive vector-ref) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive vector-ref) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive vector?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive vector?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive number?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive number?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive symbol?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive symbol?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive set-car!) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive set-car!) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive set-cdr!) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive set-cdr!) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive vector-set!) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive vector-set!) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive car) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive car) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cdr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cdr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive caar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive caar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cadr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cadr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cdar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cdar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cddr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cddr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive caaar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive caaar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive caadr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive caadr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cadar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cadar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cdaar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cdaar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cdddr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cdddr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cddar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cddar) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive cdadr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive cdadr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive caddr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive caddr) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive map) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive map) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive apply) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive apply) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive assq) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive assq) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive assv) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive assv) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive append) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive append) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive max) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive max) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive open-input-file) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive open-input-file) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive eof-object?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive eof-object?) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive close-port) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive close-port) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive write) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive write) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive display) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive display) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive read) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive read) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive newline) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive newline) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| | (apply-proc
      (primitive equal?)
      ((primitive load) +)
      (((id arg env) . #(+ (1 2) ()))))
| | (apply-primitive-proc
      equal?
      ((primitive load) +)
      (((id arg env) . #(+ (1 2) ()))))
| | #f
| |()
| (apply-proc
    (closure-record
      (result)
      (begin-exp ((var-exp result)))
      (((expanded-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
        ((parse-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
        ((exp) . #((+ 1 2)))))
    (())
    (((expanded-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
      ((parse-tree) . #((app-exp (var-exp +) ((lit-exp 1) (lit-exp 2)))))
      ((exp) . #((+ 1 2)))))
| ()
| (apply-proc (primitive write) (()) (((foo) . #((+ 1 2))) (() . #(()))))
| (apply-primitive-proc write (()) (((foo) . #((+ 1 2))) (() . #(()))))
()| #<void>
| (apply-proc (primitive newline) (()) (((foo) . #((+ 1 2))) (() . #(()))))
| (apply-primitive-proc newline (()) (((foo) . #((+ 1 2))) (() . #(()))))

| #<void>
|(apply-proc
   (closure-record
     ()
     (begin-exp
       ((app-exp (var-exp display) ((lit-exp ">>> ")))
         (app-exp
           (lambda-exp
             (foo)
             (begin-exp
               ((if-exp
                  (app-exp
                    (var-exp not)
                    ((app-exp
                       (var-exp equal?)
                       ((var-exp foo) (lit-exp (exit))))))
                  (begin-exp
                    ((app-exp
                       (var-exp write)
                       ((app-exp (var-exp eval-one-exp) ((var-exp foo)))))
                      (app-exp (var-exp newline) (()))
                      (app-exp (var-exp rep) (()))))
                  (app-exp (var-exp display) ((lit-exp "Bye...")))))))
           ((app-exp (var-exp read) (()))))))
     ())
   (())
   (((foo) . #((+ 1 2))) (() . #(()))))
| (apply-proc (primitive display) (">>> ") ((() . #(()))))
| (apply-primitive-proc display (">>> ") ((() . #(()))))
>>> | #<void>
| (apply-proc (primitive read) (()) ((() . #(()))))
| (apply-primitive-proc read (()) ((() . #(()))))
(exit)
| (exit)
|(apply-proc
   (closure-record
     (foo)
     (begin-exp
       ((if-exp
          (app-exp
            (var-exp not)
            ((app-exp (var-exp equal?) ((var-exp foo) (lit-exp (exit))))))
          (begin-exp
            ((app-exp
               (var-exp write)
               ((app-exp (var-exp eval-one-exp) ((var-exp foo)))))
              (app-exp (var-exp newline) (()))
              (app-exp (var-exp rep) (()))))
          (app-exp (var-exp display) ((lit-exp "Bye..."))))))
     ((() . #(()))))
   ((exit))
   ((() . #(()))))
| (apply-proc
    (primitive equal?)
    ((exit) (exit))
    (((foo) . #((exit))) (() . #(()))))
| (apply-primitive-proc
    equal?
    ((exit) (exit))
    (((foo) . #((exit))) (() . #(()))))
| #t
| (apply-proc (primitive not) (#t) (((foo) . #((exit))) (() . #(()))))
| (apply-primitive-proc not (#t) (((foo) . #((exit))) (() . #(()))))
| #f
|(apply-proc (primitive display) ("Bye...") (((foo) . #((exit))) (() . #(()))))
|(apply-primitive-proc display ("Bye...") (((foo) . #((exit))) (() . #(()))))
Bye...|#<void>
#<void>
>>> (exit)
Bye...
> (load "main.ss")
> (rep)
>>> (load "main.ss")
()
>>> global-env
((+ (primitive +)) (- (primitive -)) (* (primitive *)) (/ (primitive /)) (add1 (primitive add1)) (sub1 (primitive sub1)) (max (primitive max)) (display (primitive display)) (read (primitive read)) (zero? (primitive zero?)) (not (primitive not)) (= (primitive =)) (< (primitive <)) (> (primitive >)) (<= (primitive <=)) (>= (primitive >=)) (close-port (primitive close-port)) (newline (primitive newline)) (cons (primitive cons)) (list (primitive list)) (null? (primitive null?)) (eq? (primitive eq?)) (equal? (primitive equal?)) (eof-object? (primitive eof-object?)) (write (primitive write)) (atom? (primitive atom?)) (length (primitive length)) (list->vector (primitive list->vector)) (list? (primitive list?)) (open-input-file (primitive open-input-file)) (pair? (primitive pair?)) (procedure? (primitive procedure?)) (vector->list (primitive vector->list)) (vector (primitive vector)) (boolean? (primitive boolean?)) (make-vector (primitive make-vector)) (vector-ref (primitive 