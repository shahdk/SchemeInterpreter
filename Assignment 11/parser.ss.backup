(define scheme-value? 
  (lambda (v) #t))

(define-datatype expression expression?
  (lit-exp
    (v scheme-value?))
  (var-exp
    (id (lambda (v) (or (symbol? v) (eqv? 'sys-var (car v))))))
  (lambda-exp
    (vars (lambda (var) (or ((list-of symbol?) var) (pair? var) (symbol? var))))
    (body expression?))
  (app-exp
    (operand (lambda (var) (or ((list-of expression?) var) (pair? var) (expression? var)))))
  (if-exp
    (condition expression?)
    (if-true expression?)
    (if-false expression?))
  (let-exp
    (symbols (list-of symbol?))
    (values (list-of expression?))
    (body expression?))
  (named-let-exp
    (name symbol?)
    (symbols (list-of symbol?))
    (values (list-of expression?))
    (body expression?))
  (letrec-exp
    (symbols (list-of symbol?))
    (values (list-of expression?))
    (body expression?))
  (let*-exp
    (symbols (list-of symbol?))
    (values (list-of expression?))
    (body expression?))
  (set!-exp
    (var symbol?)
    (value expression?))
  (begin-exp
    (expressions (list-of expression?)))
  (while-exp
    (condition expression?)
    (body expression?))
  (and-exp
    (body (list-of expression?)))
  (or-exp
    (body (list-of expression?)))
  (cond-exp
    (conditions (list-of (lambda (cd) 
                           (and (or (expression? (car cd)) (scheme-value? (car cd)))
                                (expression? (cadr cd)))))))
  (case-exp
    (key expression?)
    (clauses (list-of (lambda (cd)
                        (and ((list-of expression?) (car cd))
                             (expression? (cadr cd)))))))
  (define-exp
    (name symbol?)
    (body expression?))
  (call/cc-exp
    (receiver expression?))
  (null-exp))

(define param-list
      (lambda (args)
        (cond
          [(null? args) '()]
          [(atom? args) (cons 'variable (list args))]
          [(list? args)
           (if (atom? (car args)) 
               (append (list (car args)) (param-list (cdr args)))
               (if (list? (car args))
                   (append (list (car args)) (param-list (cdr args)))
                   (append (param-list (car args)) (param-list (cdr args)))))]
          [else (cons 'improper (list (improper->proper args)))])))

(define valid?
  (lambda (args)
    (cond
      [(null? args) #t]
      [else (and (isvalid (car args)) (valid? (cdr args)))])))

(define isvalid
  (lambda (arg)
    (cond
      [(null? arg) #t]
      [(not (list? arg)) #f]
      [(number? (car arg)) #f]
      [(null? (cdr arg)) #f]
      [(not (null? (cddr arg))) #f]
      [else #t])))

(define parse-expression
  (lambda (datum)
    (cond 
      [(null? datum) (null-exp)]
      [(symbol? datum) (var-exp datum)]
      [(number? datum) (lit-exp datum)]
      [(string? datum) (lit-exp datum)]
      [(boolean? datum) (lit-exp datum)]
      [(vector? datum) (lit-exp datum)]
      [(pair? datum)
       (case (car datum)
         ['quote (if (null? (cdr datum)) (apply-cont (error-cont) (format "Error in parse-expression quote expr: nothing quoted"))
                     (lit-exp (cadr datum)))]
         ['lambda
          (cond
            [(null? (cddr datum)) (apply-cont (error-cont) (format "Error in parse-expression parse-exp: lambda expression mising body: ~s" datum))]
            [(and (not ((list-of symbol?) (cadr datum))) (not (symbol? (cadr datum))) (not (pair? (cadr datum))))
             (apply-cont (error-cont) (format "Error in parse-expression: lambda expression: incorrect formals must be symbols: ~s" datum))]
            [else (lambda-exp (param-list (cadr datum))
                   (if (= (length (cddr datum)) 1)
                       (parse-expression (caddr datum))
                       (begin-exp (map parse-expression (cddr datum)))))])]
         ['set!
          (cond [(or (null? (cdr datum)) (null? (cddr datum)) (not (null? (cdddr datum))))
                 (apply-cont (error-cont) (format "Error in parse-expression set! expr: incorrect number of arguments in ~s" datum))]
            [(not (symbol? (cadr datum)))
             (apply-cont (error-cont) (format "Error in parse-expression set! expr: invalid argument: ~s" (cadr datum)))]
            [else (set!-exp (cadr datum)
                    (parse-expression (caddr datum)))])]
         ['letrec
          (cond 
            [(not (list? (cadr datum)))
             (apply-cont (error-cont) (format "Error in parse-expression letrec expr: bindings not a list: ~s" datum))]
            [(null? (cddr datum))
             (apply-cont (error-cont) (format "Error in parse-expression letrec expr: no body: ~s" datum))]
            [else (if (valid? (cadr datum))
                      (letrec-exp (map car (cadr datum))
                        (map parse-expression (map cadr (cadr datum)))
                        (begin-exp (map parse-expression (cddr datum))))
                      (apply-cont (error-cont) (format "Error in parse-expression letrec expr: invalid argument ~s" (cadr datum))))])]
         ['let*
          (cond [(not (list? (cadr datum)))
                 (eopl:error 'parse-expression "let* expr: bindings are not a list: ~s" datum)]
            [(null? (cddr datum))
             (apply-cont (error-cont) (format "Error in parse-expression let* expr: missing body: ~s" datum))]
            [else (if (valid? (cadr datum))
                      (let*-exp (map car (cadr datum))
                        (map parse-expression (map cadr (cadr datum)))
                        (begin-exp (map parse-expression (cddr datum))))
                      (apply-cont (error-cont) (format "Error in parse-expression let* expr: invalid arugments ~s" (cadr datum))))])]
         ['let
          (if (list? (cadr datum))
              (cond [(null? (cddr datum))
                     (apply-cont (error-cont) (format "Error in parse-expression let expr: no body: ~s" datum))]
                [else (if (or (valid? (cadr datum)) #t)
                          (let-exp (let-idlist (cadr datum) '())
                            (map parse-expression (let-vallist (cadr datum) '()))
                            (begin-exp (map parse-expression (cddr datum))))
                          (apply-cont (error-cont) (format "Error in parse-expression let expr: invalid arguments in ~s" datum)))])
              (cond [(not (list? (caddr datum)))
                     (apply-cont (error-cont) (format "Error in parse-expression named-let expr: bindings not a list ~s" datum))]
                [(null? (cdddr datum))
                 (apply-cont (error-cont) (format "Error in parse-expression named-let expr: no body ~s" datum))]
                [else (named-let-exp (cadr datum)
                            (map car (caddr datum))
                            (map parse-expression (map cadr (caddr datum)))
                            (begin-exp (map parse-expression (cdddr datum))))]))]
         ['if
          (cond 
            [(null? (cddr datum)) (apply-cont (error-cont) (format "Error in parse-expression if-expr: empty if/else clase in ~s" datum))]
            [(and (not (null? (cdddr datum))) (not (null? (cddddr datum)))) (apply-cont (error-cont) (format "Error in parse-expression if-expr: too many clauses in ~s" datum))]
            [else (if-exp (parse-expression (cadr datum)) (parse-expression (caddr datum))
                    (if (null? (cdddr datum))
                        (null-exp)
                        (parse-expression (cadddr datum))))])]
         ['begin
          (if (null? (cdr datum))
              (apply-cont (error-cont) (format "Error in parse-expression begin expr: no body in ~s" datum))
              (begin-exp (map parse-expression (cdr datum))))]
         ['while
          (if (null? (cdr datum))
              (apply-cont (error-cont) (format "Error in parse-expression while expr: no body in ~s" datum))
              (while-exp (parse-expression (cadr datum)) (begin-exp (map parse-expression (cddr datum)))))]
         ['and
          (and-exp (map parse-expression (cdr datum)))]
         ['or
          (or-exp (map parse-expression (cdr datum)))]
         ['cond
          (cond
            [(null? (cdr datum)) (apply-cont (error-cont) (format "Error in parse-expression cond expr: missing clauses in ~s" datum))]
            [(not (valid-clause? (cdr datum))) (apply-cont (error-cont) (format "Error in parse-expression cond expr: incorrect clauses in ~s" datum))]
            [else (cond-exp (map cd-lambda (cdr datum)))])]
         ['case
          (cond
            [(null? (cdr datum)) (apply-cont (error-cont) (format "Error in parse-expression case expr: missing key and clauses in ~s" datum))]
            [(null? (cddr datum)) (apply-cont (error-cont) (format "Error in parse-expression case expr: missing clauses in ~s" datum))]
            [(not (valid-clause? (cddr datum))) (apply-cont (error-cont) (format "Error in parse-expression case expr: incorrect clauses in ~s" datum))]
            [else (case-exp (parse-expression (cadr datum)) 
                    (map (lambda (ls)
                           (list (if (equal? 'else (car ls))
                                     (list (parse-expression (cadr datum)))
                                     (map parse-expression (car ls)))
                             (parse-expression (cadr ls))))
                      (cddr datum)))])]
         ['define
          (cond
            [(null? (cadr datum)) (apply-cont (error-cont) (format "Error in parse-expression define expr: missing variable to define in ~s" datum))]
            [(null? (caddr datum)) (apply-cont (error-cont) (format "Error in parse-expression define expr: missing body in ~s" datum))]
            [else (define-exp (cadr datum) 
                    (parse-expression (caddr datum)))])]
         ['call/cc
          (call/cc-exp (parse-expression (cdr datum)))]
         [else (if (not (list? (cdr datum)))
                   (apply-cont (error-cont) (format "Error in parse-expression ~s is not a proper list" datum))
                   (app-exp (map parse-expression datum)))])]
      [else (apply-cont (error-cont) (format "Error in parse-expression
              Invalid concrete syntax ~s" datum))])))

(define valid-clause?
  (lambda (ls)
    (cond
      [(null? ls) #t]
      [(not (eq? (length (car ls)) 2)) #f]
      [(and (equal? 'else (caar ls)) (not (null? (cdr ls)))) #f]
      [else (valid-clause? (cdr ls))])))
       
(define cd-lambda
  (lambda (ls)
    (list (if (equal? 'else (car ls)) (lit-exp #t)
              (parse-expression (car ls)))
      (parse-expression (cadr ls)))))
       
(define let-idlist
  (lambda (ls accum)
    (cond
      [(null? ls) accum]
      [(null? (car ls)) accum]
      [else (let-idlist (cdr ls) (append accum (get-list (car ls) '())))])))

(define let-vallist
  (lambda (ls accum)
    (cond
      [(null? ls) accum]
      [(null? (car ls)) accum]
      [else (let-vallist (cdr ls) (append accum (get-vallist (car ls) '())))])))

(define get-vallist
  (lambda (ls accum)
    (let ([len (- (length ls) 1)]
          [val (list-ref ls (- (length ls) 1))])
      (letrec ([loop (lambda (accum)
                       (if (zero? len) accum
                           (begin (set! len (- len 1)) (loop (append (list val) accum)))))])
        (loop '())))))
      

(define get-list
  (lambda (ls accum)
    (cond
      [(null? (cdr ls)) accum]
      [else (get-list (cdr ls) (append accum (list (car ls))))])))

(define unparse-arguments
  (lambda (symbols values)
    (cond
      [(null? symbols) '()]
      [else (cons (list (car symbols) (unparse-expression (car values))) (unparse-arguments (cdr symbols) (cdr values)))])))

(define unparse-ids
  (lambda (id)
    (cond
      [(null? id) '()]
      [(eq? (car id) 'improper) (car (append (list (cons (caadr id) (cadadr id))) (unparse-ids (cddr id))))]
      [(eq? (car id) 'variable) (cadr id)]
      [else (append (if (atom? (car id))
                        (list (car id))
                        (car id))
              (unparse-ids (cdr id)))])))

(define unparse-expression
  (lambda (exp)
    (cases expression exp
      [var-exp (id) id]
      [lit-exp (val) val]
      [null-exp () '()]
      [lambda-exp (id body)           
        (cons 'lambda (append (list (unparse-ids id)) (list (unparse-expression body))))]
      [app-exp (operator operand)
        (cons (unparse-expression operator)
          (map unparse-expression operand))]
        [else exp])))
      ;[if-exp (condition if-true if-false)
      ;  (append (list 'if
      ;         	  (unparse-expression condition)
      ;            (unparse-expression if-true))
      ;    (let ([temp (unparse-expression if-false)])
      ;      (if (null? temp) '()  (list temp))))]
      ;[set!-exp (variable value)
      ;  (list 'set! variable (unparse-expression value))]
     ; [letrec-exp (symbols values body)
       ; (append (list 'letrec (unparse-arguments symbols values)) (map unparse-expression body))]
      ;[let-exp (symbols values body)
     ;   (append (list 'let (unparse-arguments symbols values)) (map unparse-expression body))]
     ; [named-let-exp (name symbols values body)
     ;   (append (list 'let name (unparse-arguments symbols values)) (map unparse-expression body))]
     ; [let*-exp (symbols values body)
     ;   (append (list 'let* (unparse-arguments symbols values)) (map unparse-expression body))]
     ; [begin-exp (expressions)
     ;   (cons 'begin (map unparse-expression expressions))]
     ; [while-exp (condition body)
     ;   (cons 'while (cons (unparse-expression condition) (unparse-expression body)))]
     ; [and-exp (body)
     ;   (cons 'and (map unparse-expression body))]
     ; [or-exp (body)
     ;   (cons 'or (map unparse-expression body))]
     ; [cond-exp (conditions)
     ;   '()]
     ; [case-exp (key clauses)
     ;   '()]
     ; [null-exp () '()])))
