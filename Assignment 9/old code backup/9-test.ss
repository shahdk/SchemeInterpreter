(set! totalScore 0) 
(set! possiblePoints 120)

(define (test-all)
	(and
		(begin (set! totalScore 0) (test-set!-local) (test-set!-global) (test-define-top-level) (test-internal-definitions) (test-letrec) (test-named-let))))

(define (test-set!-local)
	(and
		(if (not (equal? (eval-one-exp (quote (let ((f #f) (x 3)) (set! f (lambda (n) (+ 3 (* n 10)))) (set! x 7) (f x)))) '73))
			(begin (display "Failed set! local case 1") (newline) #f)
			(begin (set! totalScore (+ totalScore 4)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote ((lambda (x) (set! x (+ x 1)) (+ x 2)) 90))) '93))
			(begin (display "Failed set! local case 2") (newline) #f)
			(begin (set! totalScore (+ totalScore 4)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let ((x 5) (y 3)) (let ((z (begin (set! x (+ x y)) x))) (set! x 3) (set! x (+ z 2)) (+ z (+ x y)))))) '21))
			(begin (display "Failed set! local case 3") (newline) #f)
			(begin (set! totalScore (+ totalScore 4)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let ((a 5)) (if (not (= a 6)) (begin (set! a (+ 1 a)) (set! a (+ 1 a))) 3) (+ 1 a)))) '8))
			(begin (display "Failed set! local case 4") (newline) #f)
			(begin (set! totalScore (+ totalScore 4)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let ((f #f)) (let ((dummy (begin (set! f (lambda (n) (+ 3 (* n 10)))) 3))) (f 4))))) '43))
			(begin (display "Failed set! local case 5") (newline) #f)
			(begin (set! totalScore (+ totalScore 4)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))))
			
			
(define (test-set!-global)
	(and
		(if (not (equal? (eval-one-exp (quote (begin (set! cddar 4) (+ cddar 3)))) '7))
			(begin (display "Failed set!-global case 1") (newline) #f)
			(begin (set! totalScore (+ totalScore 7)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let ([x 3]) (set! cddar 5) (set! x (+ cddar (* x 2))) (list x cddar)))) '(11 5)))
			(begin (display "Failed set!-global case 2") (newline) #f)
			(begin (set! totalScore (+ totalScore 7)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (begin (define x1 4) (set! x1 (+ x1 3)) x1))) '7))
			(begin (display "Failed set!-global case 3") (newline) #f)
			(begin (set! totalScore (+ totalScore 6)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))))
			
(define (test-define-top-level)
	(and
		(if (not (equal? (eval-one-exp (quote (begin (define x1 4) (+ x1 3)))) '7))
			(begin (display "Failed define-top-level case 1") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (begin (define cddar 4) (+ cddar 3)))) '7))
			(begin (display "Failed define-top-level case 2") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (begin (define f1 (lambda (x) (+ x 5))) (f1 2)))) '7))
			(begin (display "Failed define-top-level case 3") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (eval-one-exp (quote (define cddar 5))) (reset-global-env) (eval-one-exp (quote (cddar '((7  6  3) 2))))) '(3)))
			(begin (display "Failed define-top-level case 4") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (reset-global-env) (eval-one-exp '(define xyz (list 1 2 3 4 5))) (eval-one-exp '(define g (lambda (x) (cdr (cdr x))))) (eval-one-exp '(g xyz))) '(3 4 5)))
			(begin (display "Failed define-top-level case 5") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (reset-global-env) (eval-one-exp '(define xyz (list 1 2 3 4 5))) (eval-one-exp '(define g (lambda (x) (cdr (cdr x))))) (eval-one-exp '(set! xyz (cdr xyz))) (eval-one-exp '(g xyz))) '(4 5)))
			(begin (display "Failed define-top-level case 6") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (reset-global-env) (eval-one-exp '(define null? (lambda (L) (eq? L '())))) (eval-one-exp '(define len (lambda (L) (if (null? L) 0 (+ 1 (len (cdr L))))))) (eval-one-exp '(len '(3 2 1 7)))) '4))
			(begin (display "Failed define-top-level case 7") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (reset-global-env) (eval-one-exp '(define curry2 (lambda (f) (lambda (x) (lambda (y) (f x y)))))) (eval-one-exp '(define c2+ (curry2 +))) (eval-one-exp '((c2+ 4) 5))) '9))
			(begin (display "Failed define-top-level case 8") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (reset-global-env) (eval-one-exp '(define fib-memo (let ([max 2] [sofar '((1 . 1) (0 . 1))]) (lambda (n) (if (< n max) (cdr (assq n sofar)) (let* ([v1 (fib-memo (- n 1))] [v2 (fib-memo (- n 2))] [v3 (+ v2 v1)]) (set! max (+ n 1)) (set! sofar (cons  (cons n v3) sofar)) v3)))))) (eval-one-exp '(list (fib-memo 15)(fib-memo 20)))) '(987 10946)))
			(begin (display "Failed define-top-level case 9") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (reset-global-env) (eval-one-exp '(define f1 (lambda (x) (f2 (+ x 1))))) (eval-one-exp '(define f2 (lambda (x) (* x x)))) (eval-one-exp '(f1 3))) '16))
			(begin (display "Failed define-top-level case 10") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (reset-global-env) (eval-one-exp '(define subst (lambda (old new x) (cond [(null? x) '()] [(not (pair? x)) (if (= x old) new x)] [else (map (lambda (x) (subst old new x)) x)])))) (eval-one-exp '(subst 2 3 (list 1 2 3 4 5 2 3 4)))) '(1 3 3 4 5 3 3 4)))
			(begin (display "Failed define-top-level case 11") (newline) #f)
			(begin (set! totalScore (+ totalScore 2)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))))
			
(define (test-internal-definitions)
	(and
		(if (not (equal? (begin (eval-one-exp (quote (define f (lambda (x) (* x x))))) (eval-one-exp (quote (let ([x 3]) (define f (lambda (y) (+ y x))) (f 4))))) '7))
			(begin (display "Failed internal-definitions case 1") (newline) #f)
			(begin (set! totalScore (+ totalScore 5)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (f 4))) '16))
			(begin (display "Failed internal-definitions case 2") (newline) #f)
			(begin (set! totalScore (+ totalScore 5)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let () (define even? (lambda (x) (or (= x 0) (odd? (- x 1))))) (define odd? (lambda (x) (and (not (= x 0)) (even? (- x 1))))) (even? 20)))) '#t))
			(begin (display "Failed internal-definitions case 3") (newline) #f)
			(begin (set! totalScore (+ totalScore 4)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (begin (eval-one-exp (quote (define list? (lambda (x) (define race (lambda (h t) (if (pair? h) (let ([h (cdr h)]) (if (pair? h) (and (not (eq? h t)) (race (cdr h) (cdr t))) (null? h))) (null? h)))) (race x x))))) (eval-one-exp (quote (list? (quote (a b . c)))))) '#f))
			(begin (display "Failed internal-definitions case 4") (newline) #f)
			(begin (set! totalScore (+ totalScore 4)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))))
			
(define (test-letrec)
	(and
		(if (not (equal? (eval-one-exp (quote (let ([a (lambda (x) (- 3 x))] [b (lambda (x) (+ 2 x))]) (letrec ([a (lambda (x) (if (< x 25) (b (+ 10 x)) (+ 100 x)))] [b (lambda (x) (a (+ 4 x)))]) (b 3))))) '135))
			(begin (display "Failed letrec case 1") (newline) #f)
			(begin (set! totalScore (+ totalScore 5)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (letrec ([make-range (lambda (start stop) (if (= start stop) (list stop) (cons start (make-range (+ 1 start) stop))))]) (make-range 4 8)))) '(4 5 6 7 8)))
			(begin (display "Failed letrec case 2") (newline) #f)
			(begin (set! totalScore (+ totalScore 5)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (letrec ([o? (lambda (n) (if (zero? n) #f (e? (- n 1))))] [e? (lambda (n) (if (zero? n) #t (o? (- n 1))))]) ((lambda (n) (o? n)) 3)))) '#t))
			(begin (display "Failed letrec case 3") (newline) #f)
			(begin (set! totalScore (+ totalScore 5)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let ([largest-in-lists (letrec ([largest-of-two (lambda (x y) (cond [(not x) y] [(not y) x] [else (max x y)]))] [largest-in-one-list (lambda (L) (if (null? L) #f (largest-of-two (car L) (largest-in-one-list (cdr L)))))]) (lambda (L)  (largest-in-one-list (map largest-in-one-list L))))]) (largest-in-lists '((4 6 -5 2 1) () (-3 12 1) (-9 8)))))) '12)) 
			(begin (display "Failed letrec case 4") (newline) #f)
			(begin (set! totalScore (+ totalScore 5)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))))
			
(define (test-named-let)
	(and
		(if (not (equal? (eval-one-exp '(let foo () 3)) '3))
			(begin (display "Failed named-let case 1") (newline) #f)
			(begin (set! totalScore (+ totalScore 3)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp '(let foo ([a 3]) (if (> a 1) (foo (- a 1)) a))) '1))
			(begin (display "Failed named-let case 2") (newline) #f)
			(begin (set! totalScore (+ totalScore 5)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let loop ([count 4] [sum 0]) (if (= count 0) sum (loop (- count 1) (+ sum count)))))) '10))
			(begin (display "Failed named-let case 3") (newline) #f)
			(begin (set! totalScore (+ totalScore 6)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))
		(if (not (equal? (eval-one-exp (quote (let ([one-list '(1)]) (let loop ([count 0]) (set-car! one-list (+ 2 (car one-list))) (if (< count 6) (loop (+ 1 count)) one-list))))) '(15)))
			(begin (display "Failed named-let case 4") (newline) #f)
			(begin (set! totalScore (+ totalScore 6)) (display "Your total score is: ") (display totalScore) (display "/") (display possiblePoints) (newline) #t))))