;;Dharmin Shah and Brian Padilla
(define eval-one-exp
  (lambda (exp)
    (let* ([parse-tree (parse-expression exp)]
           [expanded-tree (expand-syntax parse-tree)]
       	   [initial-environment global-env]
           [result (top-level-eval expanded-tree)])
      result)))

(define top-level-eval
  (lambda (form)
    (cases expression form
	   [define-exp (sym val)
	     (extend-global-env sym (eval-expression val (empty-env)))]
	   [else (eval-expression form (empty-env))])))
	   
(define-datatype procedure procedure?
  [closure-record
    (id (lambda (id) (or ((list-of symbol?) id) (symbol? id) (pair? id))))
    (body expression?)
    (env environment?)]
  [primitive
    (id symbol?)])
      
(define make-closure
  (lambda (id body env)
    (closure-record id body env)))

(define expand-syntax
  (lambda (exp)
    (cases expression exp
      [lambda-exp (id body)
        (lambda-exp id (expand-syntax body))]
      [app-exp (operator operand)
        (app-exp (expand-syntax operator) (map expand-syntax operand))]
      [if-exp (condition if-true if-false)
        (if-exp (expand-syntax condition) (expand-syntax if-true) (expand-syntax if-false))]
      [set!-exp (variable value)
        (set!-exp variable (expand-syntax value))]
      [letrec-exp (symbols values body)
        (cond
          [(letrec-check symbols values) (eopl:error 'eval-expression "Referencing an undefined variable")]
          [else (letrec-exp symbols (map expand-syntax values) (expand-syntax body))])]
      [let-exp (symbols values body)
        (app-exp (lambda-exp symbols (expand-syntax body)) (map expand-syntax values))]
      [named-let-exp (name symbols values body)
        (expand-syntax (app-exp (letrec-exp (list name) (list (lambda-exp symbols body)) (var-exp name)) values))]
      [let*-exp (symbols values body)
        (cond
          [(and (null? symbols) (null? values)) (expand-syntax body)]
          [else (app-exp (lambda-exp (list (car symbols))
                           (expand-syntax (let*-exp (cdr symbols) (cdr values) body)))
                  (list (expand-syntax (car values))))])]
      [begin-exp (expressions)
        (begin-exp (map expand-syntax expressions))]
      [define-exp (name body)
        (define-exp name (expand-syntax body))]
      [and-exp (body)
        (if (null? body)
            (lit-exp #t)
            (if (null? (cdr body))
                (expand-syntax (car body))
                (expand-syntax (if-exp (car body) (and-exp (cdr body)) (lit-exp #f)))))]
      [or-exp (body)
        (if (null? body)
            (lit-exp #f)
            (if (null? (cdr body))
                (expand-syntax (car body))
                (expand-syntax (let-exp (cons 'sys-var (list 'tempVal)) (list (car body))
                                 (if-exp (var-exp (cons 'sys-var (list 'tempVal))) 
                                   (var-exp (cons 'sys-var (list 'tempVal)))
                                   (or-exp (cdr body)))))))]
      [cond-exp (conditions) 
        (cond 
          [(null? conditions) (null-exp)]
          [else (expand-syntax (if-exp (caar conditions) (cadar conditions)
                                 (cond-exp (cdr conditions))))])]                                 
      [case-exp (key clauses)
        (let ([case-key (expand-syntax key)])
          (cond 
            [(null? clauses) (null-exp)]
            [else (expand-syntax (if-exp (or-exp (map (lambda (ls)
                                                        (app-exp (var-exp 'equal?) (list ls case-key))) (caar clauses)))
                                   (cadar clauses)
                                   (case-exp key (cdr clauses))))]))]
      [else exp])))


(define eval-expression
  (lambda (exp env)
    (cases expression exp
      [var-exp (id) (apply-env env id)]
      [lit-exp (val) val]
      [lambda-exp (id body) (make-closure id body env)]
      [app-exp (operator operand)
        (let* ([procedure (eval-expression operator env)]
               [arg (map (lambda (operand) (eval-expression operand env)) operand)])
              (apply-proc procedure arg env))]
      [if-exp (condition if-true if-false)
        (if (eval-expression condition env)
            (eval-expression if-true env)
            (if (not (null? (cdddr exp)))
                (eval-expression if-false env)
                '()))]
      [set!-exp (variable value)
        (change-env env variable (eval-expression value env))]
	  
      [letrec-exp (symbols values body)
        (cond
          [(letrec-check symbols values) (eopl:error 'eval-expression "Referencing an undefined variable")]
          [else (let* ([vals (map (lambda (v) (eval-expression v env)) values)]
                       [letrec-env (extend-env-recur symbols vals env)])
                 	(eval-expression body letrec-env))])]

      [begin-exp (expressions)
        (letrec ([eval-begin (lambda (exprs)
                               (cond
                                 [(null? exprs) (void)]
                                 [(null? (cdr exprs)) (eval-expression (car exprs) env)]
                                 [else (begin (eval-expression (car exprs) env) (eval-begin (cdr exprs)))]))])
          (eval-begin expressions))]
      [while-exp (condition body)
        (letrec ([loop (lambda ()
                         (if (eval-expression condition env)
                             (begin (eval-expression body env) (loop))))])
		    (loop))]
      [define-exp (name body)
        (if (null? env)
            (extend-global-env name (eval-expression body (empty-env)))
            (add-to-env name (eval-expression body env) env))]          
      [null-exp () (void)]
      [else
        (eopl:error 'eval-expression "Not a syntax ~s" exp)])))
		


(define null-list
  (lambda (len accum)
    (cond 
      [(= len 0) accum]
      [else (null-list (- len 1) (append accum (list '#f)))]))) 


(define apply-proc
  (lambda (proc arg env)
    (cases procedure proc
      [closure-record (id body env)
        (eval-expression body (extend-env id arg env))]
      [primitive (id)
        (apply-primitive-proc id arg)])))

(define list-of-numbers?
  (lambda (ls)
    (cond
      [(null? ls) #t]
      [(null? (car ls)) #f]
      [else (and (list-of-numbers? (cdr ls)) (number? (car ls)))])))

(define apply-primitive-proc
  (lambda (id arg)
    (if (and (null? arg) (not (equal? id 'append))) (eopl:error 'apply-primitive-proc "Missing procedure body")
        (case id
          [(+) (cond
                 [(null? (cdr arg)) (+ 0 (car arg))]
                 [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure +>" arg)]
                 [else (apply + arg)])]
          [(-) (cond
                 [(null? (cdr arg)) (- 0 (car arg))]
                 [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure ->" arg)]
                 [else (apply - arg)])]
          [(*) (cond
                 [(null? (cdr arg)) (* 1 (car arg))]
                 [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure *>" arg)]
                 [else (apply * arg)])]
          [(/) (cond
                 [(null? (cdr arg)) (/ 1 (car arg))]
                 [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure />" arg)]
                 [(zero? (cadr arg)) (eopl:error 'apply-primitive-proc "You created a black hole by dividing with 0")]
                 [else (apply / arg)])]
          [(add1) (cond
                    [(or (not (number? (car arg))) (null? (car arg))) (eopl:error 'apply-primitive-proc "~s Not a number in #<primitive procedure add1>" (car arg))]
                    [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure add1>" arg)]
                    [else (add1 (car arg))])]
          [(sub1) (cond
                    [(or (not (number? (car arg))) (null? (car arg))) (eopl:error 'apply-primitive-proc "() Not a number in #<primitive procedure sub1>")]
                    [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure sub1>" arg)]
                    [else (sub1 (car arg))])]
          [(zero?) (cond
                     [(or (not (number? (car arg))) (null? (car arg))) (eopl:error 'apply-primitive-proc "() Not a number in #<primitive procedure zero?>")]
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure zero?>" arg)]
                     [else (zero? (car arg))])]
          [(not) (cond
                   [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure not>" arg)]
                   [else (not (car arg))])]
          [(=) (cond
                 [(null? (cdr arg)) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure =>" arg)]
                 [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure =>" arg)]
                 [else (apply = arg)])]
          [(<) (cond
                 [(null? (cdr arg)) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure <>" arg)]
                 [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure <>" arg)]
                 [else (apply < arg)])]
          [(>) (cond
                 [(null? (cdr arg)) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure >>" arg)]
                 [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure >>" arg)]
                 [else (apply > arg)])]
          [(<=) (cond
                  [(null? (cdr arg)) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure <=>" arg)]
                  [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure <=>" arg)]
                  [else (apply <= arg)])]
          [(>=) (cond
                  [(null? (cdr arg)) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure >=>" arg)]
                  [(not (list-of-numbers? arg)) (eopl:error 'apply-primitive-proc "Invalid arguments ~s in #<primitive procedure >=>" arg)]
                  [else (apply >= arg)])]
          [(cons) (cond 
                    [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure cons>" arg)]
                    [else (cons (car arg) (cadr arg))])]
          [(list)  arg]
          [(null?) (cond
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure null?>" arg)]
                     [else (null? (car arg))])]
          [(eq?) (cond
                   [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure eq?>" arg)]
                   [else (eq? (car arg) (cadr arg))])]
          [(equal?) (cond
                      [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure eq?>" arg)]
                      [else (equal? (car arg) (cadr arg))])]
          [(atom?) (cond
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure atom?>" arg)]
                     [else (atom? (car arg))])]
          [(length) (cond
                      [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure length>" arg)]
                      [(not (list? (car arg))) (eopl:error 'apply-primitive-proc "~s is not a proper list in #<primitive procedure length>" arg)]
                      [else (length (car arg))])]
          [(list->vector) (cond
                            [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure list-vector>" arg)]
                            [(not (list? (car arg))) (eopl:error 'apply-primitive-proc "~s is not a proper list in #<primitive procedure list->vector>" arg)]
                            [else (list->vector (car arg))])]
          [(list?) (cond
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure list?>" arg)]
                     [else (list? (car arg))])]
          [(pair?) (cond
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure pair?>" arg)]
                     [else (pair? (car arg))])]
          [(procedure?) (cond
                          [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure procedure?>" arg)]
                          [else (procedure? (car arg))])]
          [(vector->list) (cond
                            [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure vector->list>" arg)]
                            [(not (vector? (car arg))) (eopl:error 'apply-primitive-proc "~s is not a vector in #<primitive procedure vector->list>" arg)]
                            [else (vector->list (car arg))])]
          [(vector) (apply vector arg)]
          [(make-vector) (cond
                           [(not (number? (car arg))) (eopl:error 'apply-primitive-proc "~s is not a number in #<primitive procedure make-vector>" (car arg))]
                           [(null? (cdr arg)) (make-vector (car arg))]
                           [(not (null? (cddr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure make-vector>" arg)]
                           [else (apply make-vector arg)])]
          [(vector-ref) (cond
                          [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure vector-ref>" arg)]
                          [(not (vector? (car arg))) (eopl:error 'apply-primitive-proc "~s is not a vector in #<primitive procedure vector-ref>" (car arg))]
                          [(not (number? (cadr arg))) (eopl:error 'apply-primitive-proc "~s is not a number in #<primitive procedure vector-ref>" (cadr arg))]
                          [else (vector-ref (car arg) (cadr arg))])]
          [(vector?) (cond
                       [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure vector?>" arg)]
                       [else (vector? (car arg))])]
          [(number?) (cond
                       [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure number?>" arg)]
                       [else (number? (car arg))])]
          [(symbol?) (cond
                       [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure symbol?>" arg)]
                       [else (symbol? (car arg))])]
          [(set-car!) (cond
                        [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure set-car!>" arg)]
                        [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s is not a pair in #<primitive procedure set-car!>" (car arg))]
                        [else (set-car! (car arg) (cadr arg))])]
          [(set-cdr!) (cond
                        [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure set-cdr!>" arg)]
                        [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s is not a pair in #<primitive procedure set-cdr!>" (car arg))]
                        [else (set-cdr! (car arg) (cadr arg))])]
          [(vector-set!) (cond
                           [(or (not (null? (cdddr arg))) (null? (cddr arg)) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure set-car!>" arg)]
                           [(not (vector? (car arg))) (eopl:error 'apply-primitive-proc "~s is not vector in #<primitive procedure vector-set!>" (car arg))]
                           [(not (number? (cadr arg))) (eopl:error 'apply-primitive-proc "~s is not a number in #<primitive procedure vector-set!>" (cadr arg))]
                           [else (vector-set! (car arg) (cadr arg) (caddr arg))])]
          [(car) (cond 
                   [(and (atom? (car arg)) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure car>" arg)]
                   [(and (not (pair? (car arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure car>" arg)]
                   [else (car (car arg))])]
          [(cdr) (cond 
                   [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure cdr>" arg)]
                   [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure cdr>" arg)]
                   [else (cdr (car arg))])]
          [(caar) (cond 
                    [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                    [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                    [(atom? (caar arg)) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure caar>" (car arg))]
                    [else (caar (car arg))])]
          [(cadr) (cond 
                    [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                    [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                    [(atom? (cdar arg)) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cadr>" (car arg))]
                    [else (cadr (car arg))])]
          [(cdar) (cond 
                    [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                    [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                    [(atom? (caar arg)) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cdar>" (car arg))]
                    [else (cdar (car arg))])]
          [(cddr) (cond 
                    [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                    [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                    [(atom? (cdar arg)) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cddr>" (car arg))]
                    [else (cddr (car arg))])]
          [(caaar) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (caar arg)) (atom? (caaar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure caaar>" (car arg))]
                     [else (caaar (car arg))])]
          [(caadr) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (cdar arg)) (atom? (cadar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure caadr>" (car arg))]
                     [else (caadr (car arg))])]
          [(cadar) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (caar arg)) (atom? (cdaar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cadar>" (car arg))]
                     [else (cadar (car arg))])]
          [(cdaar) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (caar arg)) (atom? (caaar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cdaar>" (car arg))]
                     [else (cdaar (car arg))])]
          [(cdddr) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (cdar arg)) (atom? (cddar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cdddr>" (car arg))]
                     [else (cdddr (car arg))])]
          [(cddar) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (caar arg)) (atom? (cdaar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cddar>" (car arg))]
                     [else (cddar (car arg))])]
          [(cdadr) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (cdar arg)) (atom? (cadar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure cdadr>" (car arg))]
                     [else (cdadr (car arg))])]
          [(caddr) (cond 
                     [(not (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure caar>" arg)]
                     [(not (pair? (car arg))) (eopl:error 'apply-primitive-proc "~s not a pair in #<primitive procedure caar>" arg)]
                     [(or (atom? (cdar arg)) (atom? (cddar arg))) (eopl:error 'apply-primitive-proc "Incorrect list structure ~s in #<primitive procedure caddr>" (car arg))]
                     [else (caddr (car arg))])]
          [(map) (cond
                   [(not (procedure? (car arg))) (eopl:error 'apply-primitive-proc "~s not a procedure #<primitive procedure map>" (car arg))]
                   [(null? (cadr arg)) (eopl:error 'apply-primitive-proc "No list to map in #<primitive procedure map>")]
                   [else (map (lambda (args)
                                (apply-proc (car arg) args  global-env)) (index-recur (cdr arg)))])]
          [(apply) (cond
                   [(not (procedure? (car arg))) (eopl:error 'apply-primitive-proc "~s not a procedure #<primitive procedure apply>" (car arg))]
                   [(null? (cadr arg)) (eopl:error 'apply-primitive-proc "No object to apply in #<primitive procedure spply>")]
                   [else (apply-proc (car arg) (combine-arg (cdr arg)) global-env)])]
          [(assq) (cond
                    [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure assq>" arg)]
                    [(not (list? (cadr arg))) (eopl:error 'apply-primitive-proc "~s not a list in #<primitive procedure assq>" (cadr arg))]
                    [else (assq (car arg) (cadr arg))])]
          [(assv) (cond
                    [(or (not (null? (cddr arg))) (null? (cdr arg))) (eopl:error 'apply-primitive-proc "Incorrect argument count ~s in #<primitive procedure assv>" arg)]
                    [(not (list? (cadr arg))) (eopl:error 'apply-primitive-proc "~s not a list in #<primitive procedure assv>" (cadr arg))]
                    [else (assv (car arg) (cadr arg))])]
          [(append) (cond
                      [(and (not (null? arg)) (not (list? (car arg)))) (eopl:error 'apply-primitive-proc "~s not a list #<primitive procedure append>" (car arg))]
                      [else (let f ([ls '()] [args arg])
                              (if (null? args)
                                  ls
                                  (let g ([ls ls])
                                    (if (null? ls)
                                        (f (car args) (cdr args))
                                        (cons (car ls) (g (cdr ls)))))))])]
          [(max) (cond
                   [(not (andmap number? arg)) (eopl:error 'apply-primitive-proc "~s not a number #<primitive procedure max>"  arg)]
                   [else (apply max arg)])]
          [else (eopl:error 'apply-primitive-proc "Incorrect primitive procedure ~s" id)]))))

(define combine-arg
  (lambda (ls)
    (cond 
      [(null? ls) '()]
      [(list? (car ls)) (append  (car ls) (combine-arg (cdr ls)))]
      [else (append (list (car ls)) (combine-arg (cdr ls)))])))

(define index-recur
  (lambda (ls)
    (if (null? (cdr ls)) 
        (letrec ([loop (lambda (ls accum)
                         (if (null? ls) accum
                             (loop (cdr ls) (append accum (list (list (car ls)))))))])
          (loop (car ls) '()))
        (let ([size (- (length (car ls)) 1)])
          (letrec ([index-recur-helper (lambda (count)
                                        	(cond [(eq? count size) (list (index-value count ls))]
                                        			[else (append (list (index-value count ls)) (index-recur-helper (+ count 1)))]))])
            (index-recur-helper 0))))))
                                                                           
                                
(define index-value
  (lambda (index ls)
    (letrec ([index-helper (lambda (index ls accum count)
                             (cond 
                               [(null? ls) accum]
                               [(list? (car ls)) (index-helper index (cdr ls) (append accum (list (index-helper index (car ls) '() 0))) count)]
                               [else (if (eq? index count)
                                         (car ls)
                                         (index-helper index (cdr ls) '() (+ count 1)))]))])
      (index-helper index ls '() 0))))


(define primitive-proc
  (list '+ '- '* '/ 'add1 'sub1 'max
    'zero? 'not '= '< '> '<= '>= 
    'cons 'list 'null? 'eq? 'equal? 
    'atom? 'length 'list->vector 'list? 
    'pair? 'procedure? 'vector->list 'vector 
    'make-vector 'vector-ref 'vector? 'number? 
    'symbol? 'set-car! 'set-cdr! 'vector-set!
    'car 'cdr 'caar 'cadr 'cdar 'cddr 'caaar 
    'caadr 'cadar 'cdaar 'cdddr 'cddar 'cdadr 'caddr 'map 'apply 'assq 'assv 'append))

(define global-env
  (map (lambda (name)	(cons name (list (primitive name)))) primitive-proc))

(define reset-global-env
  (lambda ()
    (set! global-env (map (lambda (name)	(cons name (list (primitive name)))) primitive-proc))))
	
(define extend-env-recur
  (lambda (syms vals env)
    (let* ([vec (list->vector vals)]
	   [new-env (cons (cons syms vec) env)])
      (for-each (lambda (item pos)
		  (if (procedure? item)
		      (vector-set! vec
				   pos
				   (cases procedure item
					  [closure-record (ids bodies toss-env)
						   (closure-record ids bodies new-env)]
					  [primitive (id)
						     item]))))
		vals
		(make-indices (- (length vals) 1) '()))
      new-env)))

(define letrec-check
  (lambda (s1 s2)
    (cond
      [(null? s1) #f]
      [(letrec-check-helper (cons 'var-exp (list (car s1))) s2) #t]
      [else (letrec-check (cdr s1) s2)])))

(define letrec-check-helper
  (lambda (el ls)
    (cond
      [(or (atom? ls) (null? ls)) #f]
      [(equal? (car ls) 'lambda-exp)  #f]
      [(equal? (car ls) 'letrec-exp) (if (letrec-check-helper el (caddr ls)) 
                                         #t
                                         (if (letrec-check-helper el (cadddr ls))
                                             (not (contains? (cadr el) (cadr ls)))
                                             #f))]
      [(equal? el (car ls)) #t]
      [(null? (cdr ls)) (letrec-check-helper el (car ls))]
      [else (letrec-check-helper el (cdr ls))])))

(define contains?
  (lambda (el ls)
    (cond
      [(null? ls) #f]
      [(equal? el (car ls)) #t]
      [else (contains? el (cdr ls))])))