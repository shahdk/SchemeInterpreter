(load "chez-init.ss")

(define scheme-value? 
  (lambda (v) #t))

(define-datatype continuation continuation?
  (halt-cont)
  (multiplication-cont
    (n number?)
    (next-cont continuation?))
  (if-cont
    (n scheme-value?)
    (m scheme-value?)
    (next-cont continuation?))
  (intersection-cont
    (n scheme-value?)
    (m scheme-value?)
    (next-cont continuation?))
  (cons-cont
    (n scheme-value?)
    (next-cont continuation?)))

(define apply-cont
  (lambda (cont val)
    (cases continuation cont
      [halt-cont ()
        val]
      [multiplication-cont (n next-cont)
        (apply-cont next-cont (* val n))]
      [if-cont (n m next-cont)
        (if val
            (apply-cont next-cont n)
            (apply-cont next-cont m))]
      [intersection-cont (n m next-cont)
        (if val
            (intersection-cps (cdr n) m (cons-cont (car n) next-cont))
            (intersection-cps (cdr n) m next-cont))]
      [cons-cont (n next-cont)
        (apply-cont next-cont (cons n val))])))

(define member?-cps
  (lambda (val ls k)
    (if (null? ls)
        (apply-cont k #f)
        (if (equal? val (car ls))
            (apply-cont k #t)
            (member?-cps val (cdr ls) k)))))

(define set?-cps
  (lambda (ls k)
    (if (null? ls) 
        (apply-cont k #t)
        (member?-cps (car ls) (cdr ls) (if-cont #f (set?-cps (cdr ls) k) k)))))

(define intersection-cps
  (lambda (los1 los2 k)
    (if (null? los1)
        (apply-cont k '())
        (member?-cps (car los1) los2 (intersection-cont los1 los2 k)))))

(define make-cps
  (lambda (proc)
    (lambda (ls k)
      (apply-cont k (proc ls)))))

(define andmap-cps
  (lambda (pred ls k)
    (if (null? ls)
        (apply-cont k #t)
        (pred (car ls) (if-cont (andmap-cps pred (cdr ls) k) #f k)))))

(define matrix?-cps
  (lambda (m k)
    (if (and (list? m) (not (null? m)) (not (null? (car m))))
        (andmap-cps (make-cps list?) m (if-cont 
                                         (andmap-cps (make-cps (lambda (L) (= (length L) (length (car m))))) (cdr m) k)
                                         #f k))
        (apply-cont k #f))))