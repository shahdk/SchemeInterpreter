(define (test-connected?)
  (and
    (equal? (connected? (quote ((a ())))) #t)
    (equal? (connected? (quote ((a (b)) (b (a))))) #t)
    (equal? (connected? (quote ((a (b c)) (b (c a)) (c (b a))))) #t)
    (equal? (connected? (quote ((a (b)) (b (a)) (c (d)) (d (c))))) #f)
    (equal? (connected? (quote ((a (b c)) (b (a c)) (c (b a)) (d (e f)) (e (d f)) (f (d e))))) #f)
    (equal? (connected? (quote ((a ()) (b ())))) #f)
    (equal? (connected? (quote ((a (b)) (c ()) (b (a))))) #f)
    (equal? (connected? (quote ((a (b c)) (b (c a)) (c (b a)) (d (e f g)) (e (d f g)) (f (d e g)) (g (d e f))))) #f)
    (equal? (connected? (quote ((a (b)) (k (j)) (j (k i)) (c (b d)) (i (h j)) (h (i g)) (g (f h)) (b (c a)) (f (e g)) (e (d f)) (d (c e))))) #t)))
	
(define (test-iterator)